{"file_contents":{"README.md":{"content":"# Firebase Studio\n\nThis is a NextJS starter in Firebase Studio.\n\nTo get started, take a look at src/app/page.tsx.\n","size_bytes":114},"apphosting.yaml":{"content":"# Settings to manage and configure a Firebase App Hosting backend.\n# https://firebase.google.com/docs/app-hosting/configure\n\nrunConfig:\n  # Increase this value if you'd like to automatically spin up\n  # more instances in response to increased traffic.\n  maxInstances: 1\n","size_bytes":270},"middleware.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { getSession } from '@/lib/session';\n\nconst protectedRoutes = ['/read'];\nconst publicRoutes = ['/'];\nconst adminRoutes = ['/admin'];\n\nexport async function middleware(req: NextRequest) {\n  const path = req.nextUrl.pathname;\n  const session = await getSession();\n\n  const isProtectedRoute = protectedRoutes.some((p) => path.startsWith(p));\n  const isPublicRoute = publicRoutes.includes(path);\n  const isAdminRoute = adminRoutes.some((p) => path.startsWith(p));\n  \n  // If trying to access an admin route\n  if (isAdminRoute) {\n    if (!session?.isAdmin) {\n      console.log('Middleware: Admin access denied. Redirecting to login.');\n      return NextResponse.redirect(new URL('/', req.nextUrl));\n    }\n    // If admin, allow access\n    return NextResponse.next();\n  }\n\n  // If trying to access a protected route for regular users\n  if (isProtectedRoute && !session?.userId) {\n    // If not logged in, redirect to login\n    return NextResponse.redirect(new URL('/', req.nextUrl));\n  }\n\n  // If a logged-in user tries to access a public-only page (like the login page)\n  if (isPublicRoute && session?.userId) {\n    // Redirect them to their appropriate dashboard\n    const url = session.isAdmin ? '/admin' : '/read';\n    return NextResponse.redirect(new URL(url, req.nextUrl));\n  }\n\n  return NextResponse.next();\n}\n\nexport const config = {\n  matcher: ['/((?!api|_next/static|_next/image|.*\\\\.png$|scripts/.*).*)'],\n};\n","size_bytes":1478},"next-env.d.ts":{"content":"/// <reference types=\"next\" />\n/// <reference types=\"next/image-types/global\" />\n/// <reference path=\"./.next/types/routes.d.ts\" />\n\n// NOTE: This file should not be edited\n// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.\n","size_bytes":262},"next.config.js":{"content":"\nrequire('dotenv').config();\nconst path = require('path');\nconst CopyPlugin = require('copy-webpack-plugin');\n\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  // Enable for Replit environment - allow all hosts\n  experimental: {\n    allowedHosts: true,\n  },\n  // Alternative for older Next.js versions - allow all hosts in dev\n  async rewrites() {\n    return []\n  },\n  async headers() {\n    return [\n      {\n        // matching all API routes\n        source: \"/api/:path*\",\n        headers: [\n          { key: \"Access-Control-Allow-Credentials\", value: \"true\" },\n          { key: \"Access-Control-Allow-Origin\", value: \"*\" },\n          { key: \"Access-Control-Allow-Methods\", value: \"GET,DELETE,PATCH,POST,PUT\" },\n          { key: \"Access-Control-Allow-Headers\", value: \"X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version\" },\n        ]\n      }\n    ]\n  },\n  typescript: {\n    ignoreBuildErrors: false,\n  },\n  eslint: {\n    ignoreDuringBuilds: true,\n  },\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'placehold.co',\n        port: '',\n        pathname: '/**',\n      },\n    ],\n  },\n  webpack: (config) => {\n    // Aliases to handle module resolution issues in a Next.js environment\n    config.resolve.alias.canvas = false;\n    config.resolve.alias.encoding = false;\n\n    // Copy the pdf.worker.min.js file to the static directory\n    config.plugins.push(\n        new CopyPlugin({\n            patterns: [\n                {\n                    from: path.join(__dirname, 'node_modules/pdfjs-dist/build/pdf.worker.min.js'),\n                    to: path.join(__dirname, 'public/static'),\n                },\n                {\n                    from: path.join(__dirname, 'node_modules/pdfjs-dist/build/pdf.min.js'),\n                    to: path.join(__dirname, 'public/static'),\n                },\n            ],\n        })\n    );\n    \n    return config;\n  },\n};\n\nmodule.exports = nextConfig;\n","size_bytes":2010},"replit.md":{"content":"# Overview\n\nReadify is a sophisticated PDF viewer and reader application built with Next.js that transforms documents into interactive audiobooks with AI-powered features. The platform combines PDF viewing, text-to-speech synthesis, AI-powered document analysis, and user management in a comprehensive reading experience. Users can upload PDFs, listen to them with synchronized highlighting, chat with their documents, generate quizzes, and access summaries and glossaries.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: Next.js 15 with App Router and TypeScript\n- **UI Components**: Shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom design system featuring dark blue primary (#3F51B5) and light blue background (#E8EAF6)\n- **PDF Rendering**: React-PDF with PDF.js for client-side PDF viewing and text extraction\n- **State Management**: React hooks with custom hook patterns (useReadPage) for complex state logic\n- **Responsive Design**: Mobile-first approach with conditional rendering based on screen size\n\n## Backend Architecture\n- **API Routes**: Next.js API routes for server actions and RESTful endpoints\n- **Authentication**: JWT-based session management with middleware-based route protection\n- **Server Actions**: Next.js server actions for form handling and server-side operations\n- **File Upload**: Vercel Blob storage for PDF and audio file management\n- **Audio Processing**: Server-side audio merging and chunking for large documents\n\n## AI Integration (Genkit Framework)\n- **AI Framework**: Google Genkit with multiple AI providers (Google AI, OpenAI)\n- **Text-to-Speech**: Multi-provider TTS system supporting OpenAI, Amazon Polly, and VibeVoice\n- **Document Analysis**: AI flows for summarization, glossary generation, quiz creation, and chat functionality\n- **Speech Synthesis**: Chunked audio generation with speech marks for word-level synchronization\n- **Text Processing**: AI-powered text cleaning and formatting for optimal TTS output\n\n## Data Storage\n- **Database**: Vercel KV (Redis) for user data, documents metadata, and session storage\n- **File Storage**: Vercel Blob for PDF documents and generated audio files\n- **Session Storage**: JWT tokens stored in HTTP-only cookies\n- **Cache Strategy**: KV-based caching for user sessions and document metadata\n\n## Authentication & Authorization\n- **Authentication Method**: Email/password with bcrypt hashing\n- **Session Management**: JWT tokens with 24-hour expiration\n- **Role-Based Access**: User and Admin roles with middleware-based route protection\n- **Admin Features**: User impersonation, user management, document administration\n- **Setup Flow**: Token-based account setup for new users\n\n## Audio System Architecture\n- **Multi-Provider TTS**: Pluggable architecture supporting multiple TTS providers\n- **Chunked Processing**: Large documents split into manageable chunks for audio generation\n- **Synchronization**: Speech marks for word/sentence-level highlighting during playback\n- **Playback Controls**: Custom audio player with speed control, seeking, and progress tracking\n- **Voice Management**: User preferences for voice selection and speaking rate\n\n## User Interface Patterns\n- **Sidebar Navigation**: Collapsible sidebar with document library and user controls\n- **Modal Dialogs**: For settings, AI features, and administrative functions\n- **Drag-and-Drop**: Document organization with folder management\n- **Real-time Updates**: Live status updates for audio generation and processing\n- **Responsive Layout**: Adaptive layout for different screen sizes and orientations\n\n# External Dependencies\n\n## AI and Machine Learning\n- **Google Genkit**: Primary AI framework for orchestrating AI workflows\n- **OpenAI API**: Text generation, TTS (voices: alloy, echo, fable, onyx, nova, shimmer), and GPT models\n- **Google AI (Gemini)**: Document analysis and text processing with Gemini 2.0 Flash model\n- **Amazon Polly**: Advanced TTS with neural voices and speech marks generation\n- **VibeVoice**: Additional TTS provider for voice variety\n\n## Storage and Infrastructure\n- **Vercel KV**: Redis-compatible key-value store for user data and session management\n- **Vercel Blob**: Object storage for PDF documents and generated audio files\n- **AWS S3**: Audio file storage for Amazon Polly-generated content\n- **Vercel Platform**: Hosting and deployment with optimized Next.js support\n\n## Email Services\n- **Resend**: Email delivery service for user onboarding, notifications, and admin communications\n- **React Email**: Email template framework for styled email components\n\n## File Processing\n- **PDF.js**: Client-side PDF parsing and rendering in the browser\n- **bcrypt**: Password hashing for secure user authentication\n\n## Development and Build Tools\n- **TypeScript**: Type safety and developer experience\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n- **React Hook Form**: Form validation and management with Zod schemas\n- **Zod**: Runtime type validation and schema definition","size_bytes":5125},"tailwind.config.ts":{"content":"\nimport type {Config} from 'tailwindcss';\n\nexport default {\n  darkMode: ['class'],\n  content: [\n    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/components/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/app/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  safelist: [\n    'bg-highlight-yellow',\n    'bg-highlight-green',\n    'bg-highlight-blue',\n    'bg-highlight-pink',\n    'bg-highlight-purple',\n    'dark:bg-highlight-yellow',\n    'dark:bg-highlight-green',\n    'dark:bg-highlight-blue',\n    'dark:bg-highlight-pink',\n    'dark:bg-highlight-purple',\n  ],\n  theme: {\n    extend: {\n      fontFamily: {\n        body: ['Inter', 'sans-serif'],\n        headline: ['Playfair Display', 'serif'],\n        code: ['monospace'],\n      },\n      colors: {\n        background: 'hsl(var(--background))',\n        foreground: 'hsl(var(--foreground))',\n        card: {\n          DEFAULT: 'hsl(var(--card))',\n          foreground: 'hsl(var(--card-foreground))',\n        },\n        popover: {\n          DEFAULT: 'hsl(var(--popover))',\n          foreground: 'hsl(var(--popover-foreground))',\n        },\n        primary: {\n          DEFAULT: 'hsl(var(--primary))',\n          foreground: 'hsl(var(--primary-foreground))',\n        },\n        secondary: {\n          DEFAULT: 'hsl(var(--secondary))',\n          foreground: 'hsl(var(--secondary-foreground))',\n        },\n        muted: {\n          DEFAULT: 'hsl(var(--muted))',\n          foreground: 'hsl(var(--muted-foreground))',\n        },\n        accent: {\n          DEFAULT: 'hsl(var(--accent))',\n          foreground: 'hsl(var(--accent-foreground))',\n        },\n        destructive: {\n          DEFAULT: 'hsl(var(--destructive))',\n          foreground: 'hsl(var(--destructive-foreground))',\n        },\n        border: 'hsl(var(--border))',\n        input: 'hsl(var(--input))',\n        ring: 'hsl(var(--ring))',\n        chart: {\n          '1': 'hsl(var(--chart-1))',\n          '2': 'hsl(var(--chart-2))',\n          '3': 'hsl(var(--chart-3))',\n          '4': 'hsl(var(--chart-4))',\n          '5': 'hsl(var(--chart-5))',\n        },\n        sidebar: {\n          DEFAULT: 'hsl(var(--sidebar-background))',\n          foreground: 'hsl(var(--sidebar-foreground))',\n          primary: 'hsl(var(--sidebar-primary))',\n          'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',\n          accent: 'hsl(var(--sidebar-accent))',\n          'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',\n          border: 'hsl(var(--sidebar-border))',\n          ring: 'hsl(var(--sidebar-ring))',\n        },\n         // Custom highlight colors as CSS variables\n        'highlight-yellow': 'hsl(var(--highlight-yellow))',\n        'highlight-green': 'hsl(var(--highlight-green))',\n        'highlight-blue': 'hsl(var(--highlight-blue))',\n        'highlight-pink': 'hsl(var(--highlight-pink))',\n        'highlight-purple': 'hsl(var(--highlight-purple))',\n      },\n      borderRadius: {\n        lg: 'var(--radius)',\n        md: 'calc(var(--radius) - 2px)',\n        sm: 'calc(var(--radius) - 4px)',\n      },\n      keyframes: {\n        'accordion-down': {\n          from: {\n            height: '0',\n          },\n          to: {\n            height: 'var(--radix-accordion-content-height)',\n          },\n        },\n        'accordion-up': {\n          from: {\n            height: 'var(--radix-accordion-content-height)',\n          },\n          to: {\n            height: '0',\n          },\n        },\n      },\n      animation: {\n        'accordion-down': 'accordion-down 0.2s ease-out',\n        'accordion-up': 'accordion-up 0.2s ease-out',\n      },\n    },\n  },\n  plugins: [require('tailwindcss-animate')],\n} satisfies Config;\n","size_bytes":3623},"docs/blueprint.md":{"content":"# **App Name**: Readify\n\n## Core Features:\n\n- User Login: User authentication via login.\n- PDF Display: PDF document uploading, parsing, and clear rendering within the app. Every PDF page must be rendered correctly.\n- Audio Playback: Play bar at the bottom of the screen for text-to-speech control.\n- Text-to-Speech: Text-to-speech functionality for reading the document aloud. Tool can use its reasoning ability to incorporate breaks in reading according to the punctuation.\n- Audio Sync: Word highlighting synchronized with the audio playback.\n- Voice selection: Voice selection from available voices provided by the browser.\n\n## Style Guidelines:\n\n- Primary color: Dark blue (#3F51B5) to create a professional yet engaging experience.\n- Background color: Very light blue (#E8EAF6).\n- Accent color: Analogous purple (#7E57C2) for interactive elements.\n- Font pairing: 'Inter' (sans-serif) for body and 'Playfair' (serif) for headlines\n- Subtle animations for user interactions such as page transitions.","size_bytes":1004},"src/middleware.ts":{"content":"\nimport { NextRequest, NextResponse } from 'next/server';\nimport { getSession } from '@/lib/session';\n\nconst protectedRoutes = ['/read'];\nconst publicRoutes = ['/', '/login', '/welcome', '/setup-account', '/contact', '/request-access'];\nconst adminRoutes = ['/admin']; // This now includes /admin and /admin/*\n\nexport async function middleware(req: NextRequest) {\n  const path = req.nextUrl.pathname;\n  const session = await getSession();\n\n  // Allow access to setup-account page regardless of session state\n  if (path.startsWith('/setup-account')) {\n    return NextResponse.next();\n  }\n\n  const isProtectedRoute = protectedRoutes.some((p) => path.startsWith(p));\n  const isAdminRoute = adminRoutes.some((p) => path.startsWith(p));\n  \n  // If the user is not logged in and is trying to access any protected page\n  if (!session?.userId && (isProtectedRoute || isAdminRoute)) {\n    return NextResponse.redirect(new URL('/login', req.nextUrl));\n  }\n\n  // If the user is logged in\n  if (session?.userId) {\n    // If they haven't set a username, force them to the welcome page\n    // Allow access to /api for actions like setting the username\n    if (!session.username && path !== '/welcome' && !path.startsWith('/api')) {\n      return NextResponse.redirect(new URL('/welcome', req.nextUrl));\n    }\n    \n    // If they have set a username but are trying to access the welcome page, redirect them\n    if (session.username && path === '/welcome') {\n      const url = session.isAdmin ? '/admin' : '/read';\n      return NextResponse.redirect(new URL(url, req.nextUrl));\n    }\n    \n    // If a logged-in user is on a public page that isn't for contact/request, redirect them\n    if (publicRoutes.includes(path) && path !== '/contact' && path !== '/request-access' && path !== '/') {\n        const url = session.isAdmin ? '/admin' : '/read';\n        return NextResponse.redirect(new URL(url, req.nextUrl));\n    }\n    \n    // If a regular user tries to access an admin route, redirect them\n    if (isAdminRoute && !session.isAdmin) {\n      return NextResponse.redirect(new URL('/read', req.nextUrl));\n    }\n  }\n\n  return NextResponse.next();\n}\n\nexport const config = {\n  matcher: ['/((?!api|_next/static|_next/image|.*\\\\.png$|scripts/.*).*)'],\n};\n","size_bytes":2235},"src/next.config.js":{"content":"\nrequire('dotenv').config();\nconst path = require('path');\nconst CopyPlugin = require('copy-webpack-plugin');\n\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  serverActions: {\n    bodySizeLimit: 10 * 1024 * 1024, // 10MB in bytes\n  },\n  async headers() {\n    return [\n      {\n        // matching all API routes\n        source: \"/api/:path*\",\n        headers: [\n          { key: \"Access-Control-Allow-Credentials\", value: \"true\" },\n          { key: \"Access-Control-Allow-Origin\", value: \"*\" },\n          { key: \"Access-Control-Allow-Methods\", value: \"GET,DELETE,PATCH,POST,PUT\" },\n          { key: \"Access-Control-Allow-Headers\", value: \"X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version\" },\n        ]\n      }\n    ]\n  },\n  typescript: {\n    ignoreBuildErrors: true,\n  },\n  eslint: {\n    ignoreDuringBuilds: true,\n  },\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'placehold.co',\n        port: '',\n        pathname: '/**',\n      },\n    ],\n  },\n  webpack: (config) => {\n    // Aliases to handle module resolution issues in a Next.js environment\n    config.resolve.alias.canvas = false;\n    config.resolve.alias.encoding = false;\n\n    // Copy the pdf.worker.min.js file to the static directory\n    config.plugins.push(\n        new CopyPlugin({\n            patterns: [\n                {\n                    from: path.join(__dirname, 'node_modules/pdfjs-dist/build/pdf.worker.min.js'),\n                    to: path.join(__dirname, 'public/static'),\n                },\n                {\n                    from: path.join(__dirname, 'node_modules/pdfjs-dist/build/pdf.min.js'),\n                    to: path.join(__dirname, 'public/static'),\n                },\n            ],\n        })\n    );\n    \n    return config;\n  },\n};\n\nmodule.exports = nextConfig;\n","size_bytes":1878},"src/ai/dev.ts":{"content":"\nimport 'dotenv/config';\n\nimport '@/ai/flows/summarize-pdf.ts';\nimport '@/ai/flows/voice-selection.ts';\nimport '@/ai/flows/preview-speech.ts';\nimport '@/ai/flows/chat-with-pdf.ts';\nimport '@/ai/flows/glossary-flow.ts';\nimport '@/ai/flows/quiz-flow.ts';\nimport '@/ai/flows/clean-text-flow.ts';\nimport '@/ai/flows/generate-speech.ts';\nimport '@/ai/flows/format-text-for-speech.ts';\nimport '@/ai/flows/quiz-feedback-flow.ts';\nimport '@/ai/flows/speech-generation/openai.ts';\nimport '@/ai/flows/speech-generation/amazon-async.ts';\nimport '@/ai/flows/speech-generation/amazon-sync.ts';\nimport '@/ai/flows/speech-generation/vibevoice.ts';\nimport '@/ai/flows/identify-unwanted-text.ts';\n\n","size_bytes":681},"src/ai/genkit.ts":{"content":"import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\nimport {openAI} from 'genkitx-openai';\n\nexport const ai = genkit({\n  plugins: [\n    googleAI(),\n    openAI()\n  ],\n  model: 'googleai/gemini-2.0-flash',\n});\n","size_bytes":233},"src/ai/schemas.ts":{"content":"\nimport { z } from 'genkit';\n\nexport const GenerateSpeechInputSchema = z.object({\n  text: z.string().describe('The text to be converted to speech.'),\n  voice: z.string().describe('The identifier for the voice to use for the speech synthesis (e.g., \"openai/alloy\", \"google/en-US-News-M\").'),\n  speakingRate: z.number().min(0.25).max(4.0).optional().describe('The speaking rate, where 1.0 is the normal speed.'),\n  docId: z.string().optional().describe('The document ID, required for asynchronous providers like Amazon Polly.'),\n  fileName: z.string().optional().describe('The original file name, used by providers like Amazon Polly to name the output file.'),\n});\nexport type GenerateSpeechInput = z.infer<typeof GenerateSpeechInputSchema>;\n\nexport const GenerateSpeechOutputSchema = z.object({\n  audioDataUris: z.array(z.string()).optional().describe(\"An array of data URIs for the generated audio chunks. Each format: 'data:audio/mp3;base64,<encoded_data>'.\"),\n  audioUrl: z.string().optional().describe(\"A single, final URL for audio stored in a cloud bucket (e.g., S3).\"),\n  pollyAudioTaskId: z.string().optional().describe(\"The task ID for an asynchronous Amazon Polly audio generation task.\"),\n  pollyMarksTaskId: z.string().optional().describe(\"The task ID for an asynchronous Amazon Polly speech marks generation task.\"),\n});\nexport type GenerateSpeechOutput = z.infer<typeof GenerateSpeechOutputSchema>;\n\n\n// Schema for previewing a selected voice\nexport const PreviewSpeechInputSchema = z.object({\n    voice: z.string().describe('The voice identifier to preview (e.g., \"openai/alloy\", \"google/en-US-News-M\").'),\n});\nexport type PreviewSpeechInput = z.infer<typeof PreviewSpeechInputSchema>;\n\nexport const PreviewSpeechOutputSchema = z.object({\n    audioDataUri: z.string().describe(\"A data URI of the generated audio file. Expected format: 'data:audio/mp3;base64,<encoded_data>'.\"),\n});\nexport type PreviewSpeechOutput = z.infer<typeof PreviewSpeechOutputSchema>;\n","size_bytes":1973},"src/app/globals.css":{"content":"\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nbody {\n  font-family: Arial, Helvetica, sans-serif;\n}\n\n@layer base {\n  :root {\n    --background: 225 67% 94%;\n    --foreground: 231 48% 18%;\n    --card: 225 67% 97%;\n    --card-foreground: 231 48% 18%;\n    --popover: 225 67% 97%;\n    --popover-foreground: 231 48% 18%;\n    --primary: 231 48% 48%;\n    --primary-foreground: 0 0% 100%;\n    --secondary: 225 50% 90%;\n    --secondary-foreground: 231 48% 25%;\n    --muted: 225 50% 90%;\n    --muted-foreground: 231 48% 35%;\n    --accent: 266 42% 55%;\n    --accent-foreground: 0 0% 100%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 225 30% 85%;\n    --input: 225 30% 88%;\n    --ring: 231 48% 48%;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n    --radius: 0.5rem;\n    --sidebar-background: 0 0% 98%;\n    --sidebar-foreground: 240 5.3% 26.1%;\n    --sidebar-primary: 240 5.9% 10%;\n    --sidebar-primary-foreground: 0 0% 98%;\n    --sidebar-accent: 240 4.8% 95.9%;\n    --sidebar-accent-foreground: 240 5.9% 10%;\n    --sidebar-border: 220 13% 91%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n    \n    /* Highlight Colors - Light Mode */\n    --highlight-yellow: 54 96% 83%;\n    --highlight-green: 145 63% 82%;\n    --highlight-blue: 206 94% 87%;\n    --highlight-pink: 336 84% 87%;\n    --highlight-purple: 265 89% 88%;\n  }\n  .dark {\n    --background: 231 20% 12%;\n    --foreground: 225 30% 90%;\n    --card: 231 20% 15%;\n    --card-foreground: 225 30% 90%;\n    --popover: 231 20% 15%;\n    --popover-foreground: 225 30% 90%;\n    --primary: 225 60% 70%;\n    --primary-foreground: 231 48% 18%;\n    --secondary: 231 20% 25%;\n    --secondary-foreground: 225 30% 90%;\n    --muted: 231 20% 25%;\n    --muted-foreground: 225 30% 60%;\n    --accent: 266 50% 65%;\n    --accent-foreground: 0 0% 100%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 231 20% 30%;\n    --input: 231 20% 30%;\n    --ring: 225 60% 70%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 224.3 76.3% 48%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 240 4.8% 95.9%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n\n    /* Highlight Colors - Dark Mode */\n    --highlight-yellow: 54 76% 33%;\n    --highlight-green: 145 63% 22%;\n    --highlight-blue: 206 94% 27%;\n    --highlight-pink: 336 84% 37%;\n    --highlight-purple: 265 89% 38%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n","size_bytes":2868},"src/app/layout.tsx":{"content":"\nimport type {Metadata} from 'next';\nimport './globals.css';\nimport { cn } from '@/lib/utils';\nimport { Toaster } from \"@/components/ui/toaster\"\nimport { ThemeProvider } from '@/components/theme-provider';\nimport Script from 'next/script';\nimport ImpersonationBanner from '@/components/impersonation-banner';\nimport { getSession } from '@/lib/session';\nimport { cookies } from 'next/headers';\n\nexport const metadata: Metadata = {\n  title: 'Readify',\n  description: 'A PDF viewer and reader with text-to-speech capabilities.',\n};\n\nexport default async function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  const session = await getSession();\n  const impersonatorId = (await cookies()).get('impersonator_id')?.value;\n  const isImpersonating = !!impersonatorId && session?.isAdmin === false;\n\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <head>\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossOrigin=\"anonymous\" />\n        <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&family=Playfair+Display:wght@400;700&display=swap\" rel=\"stylesheet\" />\n      </head>\n      <body className={cn(\"font-body antialiased\", \"min-h-screen bg-background font-sans\")}>\n        <ThemeProvider\n          attribute=\"class\"\n          defaultTheme=\"system\"\n          enableSystem\n          disableTransitionOnChange\n        >\n          {isImpersonating && <ImpersonationBanner />}\n          {children}\n          <Toaster />\n        </ThemeProvider>\n        <Script src=\"/static/pdf.min.js\" />\n      </body>\n    </html>\n  );\n}\n","size_bytes":1666},"src/app/page.tsx":{"content":"\n'use client';\n\nimport { BookOpen } from 'lucide-react';\nimport Link from 'next/link';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Mic, BrainCircuit } from 'lucide-react';\n\nexport default function LandingPage() {\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <header className=\"sticky top-0 z-50 w-full border-b border-border/40 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n        <div className=\"container flex h-14 max-w-screen-2xl items-center justify-between\">\n          <Link href=\"/\" className=\"flex items-center gap-2\">\n            <BookOpen className=\"h-6 w-6 text-primary\" />\n            <span className=\"text-xl font-headline font-bold\">Readify</span>\n          </Link>\n          <nav className=\"flex items-center gap-2\">\n            <Button asChild>\n              <Link href=\"/login\">\n                Login\n              </Link>\n            </Button>\n          </nav>\n        </div>\n      </header>\n\n      <main className=\"flex-1\">\n        <section className=\"w-full py-16 md:py-20 lg:py-24\">\n          <div className=\"container px-4 md:px-6\">\n            <div className=\"flex flex-col items-center space-y-4 text-center\">\n              <div className=\"space-y-2\">\n                <h1 className=\"text-3xl font-bold tracking-tighter sm:text-5xl xl:text-6xl/none font-headline text-primary\">\n                  Transform Your Documents into Audiobooks\n                </h1>\n                <p className=\"mx-auto max-w-[700px] text-muted-foreground md:text-xl\">\n                  Readify intelligently converts your PDFs into natural-sounding speech. Upload, listen, and learn on the go with our AI-powered tools.\n                </p>\n              </div>\n              <div className=\"flex flex-col gap-2 min-[400px]:flex-row pt-4\">\n                <Button asChild size=\"lg\">\n                  <Link href=\"/request-access\">\n                    Request Access\n                  </Link>\n                </Button>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        <section id=\"features\" className=\"w-full py-16 md:py-20 lg:py-24 bg-muted\">\n          <div className=\"container px-4 md:px-6\">\n            <div className=\"flex flex-col items-center justify-center space-y-4 text-center\">\n              <div className=\"space-y-2\">\n                <div className=\"inline-block rounded-lg bg-secondary px-3 py-1 text-sm\">Key Features</div>\n                <h2 className=\"text-3xl font-bold tracking-tighter sm:text-5xl font-headline\">Read Less, Learn More</h2>\n                <p className=\"max-w-[900px] text-muted-foreground md:text-xl/relaxed lg:text-base/relaxed xl:text-xl/relaxed\">\n                  Our advanced AI tools help you interact with your documents in entirely new ways.\n                </p>\n              </div>\n            </div>\n            <div className=\"mx-auto grid max-w-5xl items-start gap-8 sm:grid-cols-2 md:gap-12 lg:grid-cols-3 lg:max-w-none mt-12\">\n              <Card>\n                <CardHeader className=\"flex flex-col items-center text-center\">\n                  <div className=\"mb-4 rounded-full bg-primary/10 p-4\">\n                    <Mic className=\"h-8 w-8 text-primary\" />\n                  </div>\n                  <CardTitle>AI-Powered Narration</CardTitle>\n                </CardHeader>\n                <CardContent className=\"text-center text-sm text-muted-foreground\">\n                  Choose from a variety of natural-sounding voices to listen to your documents, powered by cutting-edge text-to-speech technology.\n                </CardContent>\n              </Card>\n              <Card>\n                <CardHeader className=\"flex flex-col items-center text-center\">\n                  <div className=\"mb-4 rounded-full bg-primary/10 p-4\">\n                    <BrainCircuit className=\"h-8 w-8 text-primary\" />\n                  </div>\n                  <CardTitle>Intelligent Analysis</CardTitle>\n                </CardHeader>\n                <CardContent className=\"text-center text-sm text-muted-foreground\">\n                  Instantly get summaries, key points, and glossaries. Chat with your documents and generate quizzes to test your knowledge.\n                </CardContent>\n              </Card>\n              <Card>\n                <CardHeader className=\"flex flex-col items-center text-center\">\n                  <div className=\"mb-4 rounded-full bg-primary/10 p-4\">\n                    <BookOpen className=\"h-8 w-8 text-primary\" />\n                  </div>\n                  <CardTitle>Interactive Reading</CardTitle>\n                </CardHeader>\n                <CardContent className=\"text-center text-sm text-muted-foreground\">\n                  Experience synchronized word and sentence highlighting as you listen, keeping you focused and engaged with the content.\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </section>\n      </main>\n\n      <footer className=\"flex flex-col gap-2 sm:flex-row py-6 w-full shrink-0 items-center justify-between px-4 md:px-6 border-t\">\n        <p className=\"text-xs text-muted-foreground\">&copy; {new Date().getFullYear()} Readify. All rights reserved.</p>\n        <nav className=\"sm:ml-auto flex gap-4 sm:gap-6\">\n          <Link className=\"text-xs hover:underline underline-offset-4\" href=\"/contact\">\n            Contact Us\n          </Link>\n        </nav>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":5536},"src/components/add-user-dialog.tsx":{"content":"\n'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { createUser } from '@/lib/admin-actions';\nimport { Loader2 } from 'lucide-react';\n\nconst formSchema = z.object({\n  name: z.string().min(2, 'Name must be at least 2 characters.'),\n  email: z.string().email('Invalid email address.'),\n  role: z.enum(['User', 'Admin']),\n});\n\ntype AddUserFormValues = z.infer<typeof formSchema>;\n\ntype AddUserDialogProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onUserAdded: () => void;\n  prefilledData?: { name: string; email: string; submissionId?: string } | null;\n};\n\nexport default function AddUserDialog({ isOpen, onClose, onUserAdded, prefilledData }: AddUserDialogProps) {\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const form = useForm<AddUserFormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: '',\n      email: '',\n      role: 'User',\n    },\n  });\n\n  useEffect(() => {\n    if (prefilledData) {\n      form.reset({\n        name: prefilledData.name,\n        email: prefilledData.email,\n        role: 'User',\n      });\n    } else {\n      form.reset({\n        name: '',\n        email: '',\n        role: 'User'\n      });\n    }\n  }, [prefilledData, form, isOpen]);\n\n\n  const onSubmit = async (values: AddUserFormValues) => {\n    setIsLoading(true);\n    try {\n      const result = await createUser(values, prefilledData?.submissionId);\n      if (result.success) {\n        toast({\n          title: 'Success',\n          description: 'Invitation email sent to the new user.',\n        });\n        onUserAdded();\n        form.reset();\n      } else {\n        throw new Error(result.message || 'Failed to create user.');\n      }\n    } catch (error) {\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: error instanceof Error ? error.message : 'An unexpected error occurred.',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Add New User</DialogTitle>\n          <DialogDescription>\n            An invitation will be sent to the user's email to set up their account.\n          </DialogDescription>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Full Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"John Doe\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"user@example.com\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"role\"\n              render={({ field }) => (\n                <FormItem className=\"space-y-3\">\n                  <FormLabel>Role</FormLabel>\n                  <FormControl>\n                    <RadioGroup\n                      onValueChange={field.onChange}\n                      defaultValue={field.value}\n                      className=\"flex space-x-4\"\n                    >\n                      <FormItem className=\"flex items-center space-x-2\">\n                        <FormControl>\n                          <RadioGroupItem value=\"User\" />\n                        </FormControl>\n                        <Label className=\"font-normal\">User</Label>\n                      </FormItem>\n                      <FormItem className=\"flex items-center space-x-2\">\n                        <FormControl>\n                          <RadioGroupItem value=\"Admin\" />\n                        </FormControl>\n                        <Label className=\"font-normal\">Admin</Label>\n                      </FormItem>\n                    </RadioGroup>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <DialogFooter>\n              <Button type=\"button\" variant=\"ghost\" onClick={onClose} disabled={isLoading}>\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={isLoading}>\n                {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                Send Invitation\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5619},"src/components/admin-inbox.tsx":{"content":"\n'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Button } from '@/components/ui/button';\nimport { useToast } from '@/hooks/use-toast';\nimport { getSubmissions, sendReply, AdminSubmission, deleteSubmission, rejectSubmission } from '@/lib/admin-actions';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Loader2, Inbox, Send, Eye, CheckCircle, XCircle, Trash2 } from 'lucide-react';\nimport { Label } from './ui/label';\n\nexport default function AdminInbox() {\n  const router = useRouter();\n  const [submissions, setSubmissions] = useState<AdminSubmission[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isActionLoading, setIsActionLoading] = useState<string | null>(null);\n  const [selectedSubmission, setSelectedSubmission] = useState<AdminSubmission | null>(null);\n  const [isViewOpen, setIsViewOpen] = useState(false);\n  const [isReplyOpen, setIsReplyOpen] = useState(false);\n  const [replyMessage, setReplyMessage] = useState('');\n  const [isReplying, setIsReplying] = useState(false);\n  const { toast } = useToast();\n\n  const fetchSubmissions = async () => {\n    setIsLoading(true);\n    try {\n      const data = await getSubmissions();\n      setSubmissions(data);\n    } catch (error) {\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: error instanceof Error ? error.message : 'Failed to fetch submissions.',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchSubmissions();\n  }, []);\n\n  const handleAction = async (action: () => Promise<any>, submissionId: string, successMessage: string) => {\n    setIsActionLoading(submissionId);\n    try {\n        const result = await action();\n        if (result.success) {\n            toast({ title: 'Success', description: successMessage });\n            fetchSubmissions();\n        } else {\n            throw new Error(result.message);\n        }\n    } catch (error) {\n        toast({\n            variant: 'destructive',\n            title: 'Error',\n            description: error instanceof Error ? error.message : 'An unexpected error occurred.',\n        });\n    } finally {\n        setIsActionLoading(null);\n    }\n  }\n\n  const handleApprove = (submission: AdminSubmission) => {\n    // Redirect to admin page with query params to open the Add User dialog\n    const approveUrl = `/admin?action=addUser&name=${encodeURIComponent(submission.name)}&email=${encodeURIComponent(submission.email)}&submissionId=${submission.id}`;\n    router.push(approveUrl);\n  };\n  \n  const handleReject = async (submissionId: string) => {\n    await handleAction(() => rejectSubmission(submissionId), submissionId, 'Access request rejected.');\n  };\n  \n  const handleDelete = async (submissionId: string) => {\n    await handleAction(() => deleteSubmission(submissionId), submissionId, 'Submission deleted.');\n  };\n\n  const handleView = (submission: AdminSubmission) => {\n    setSelectedSubmission(submission);\n    setIsViewOpen(true);\n  };\n\n  const handleReply = (submission: AdminSubmission) => {\n    setSelectedSubmission(submission);\n    setIsReplyOpen(true);\n  };\n\n  const handleSendReply = async () => {\n    if (!selectedSubmission || !replyMessage.trim()) return;\n    setIsReplying(true);\n    try {\n      const result = await sendReply(selectedSubmission.id, replyMessage);\n      if (result.success) {\n        toast({ title: 'Success', description: 'Reply sent successfully.' });\n        setIsReplyOpen(false);\n        setReplyMessage('');\n        fetchSubmissions(); // Refresh the list to show 'Replied' status\n      } else {\n        throw new Error(result.message);\n      }\n    } catch (error) {\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: error instanceof Error ? error.message : 'Failed to send reply.',\n      });\n    } finally {\n      setIsReplying(false);\n    }\n  };\n\n  const getStatusVariant = (status: AdminSubmission['status']): 'default' | 'secondary' | 'destructive' | 'outline' => {\n      switch(status) {\n          case 'Approved': return 'default';\n          case 'Pending': return 'secondary';\n          case 'Rejected': return 'destructive';\n          case 'Replied': return 'outline';\n          default: return 'secondary';\n      }\n  }\n\n  return (\n    <>\n      <Card>\n        <CardHeader className=\"flex items-center gap-2 flex-row\">\n          <Inbox />\n          <CardTitle>Inbox</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Date</TableHead>\n                <TableHead>From</TableHead>\n                <TableHead>Type</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead className=\"text-right\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {isLoading ? (\n                <TableRow>\n                  <TableCell colSpan={5} className=\"text-center\">\n                    <Loader2 className=\"mx-auto my-4 h-6 w-6 animate-spin\" />\n                  </TableCell>\n                </TableRow>\n              ) : submissions.map((sub) => (\n                <TableRow key={sub.id}>\n                  <TableCell>{new Date(sub.createdAt).toLocaleDateString()}</TableCell>\n                  <TableCell>{sub.email}</TableCell>\n                  <TableCell>{sub.type}</TableCell>\n                  <TableCell>\n                    <Badge variant={getStatusVariant(sub.status)}>{sub.status}</Badge>\n                  </TableCell>\n                  <TableCell className=\"space-x-1 text-right\">\n                    {isActionLoading === sub.id ? <Loader2 className=\"h-5 w-5 animate-spin inline-flex\" /> : (\n                      <>\n                        <Button variant=\"outline\" size=\"sm\" onClick={() => handleView(sub)}>\n                          <Eye className=\"mr-2 h-4 w-4\"/> View\n                        </Button>\n                        \n                        {sub.type === 'Access Request' && sub.status === 'Pending' && (\n                            <>\n                                <Button size=\"sm\" onClick={() => handleApprove(sub)} variant=\"secondary\">\n                                    <CheckCircle className=\"mr-2 h-4 w-4\"/> Approve\n                                </Button>\n                                <AlertDialog>\n                                    <AlertDialogTrigger asChild>\n                                        <Button size=\"sm\" variant=\"destructive\">\n                                            <XCircle className=\"mr-2 h-4 w-4\"/> Reject\n                                        </Button>\n                                    </AlertDialogTrigger>\n                                    <AlertDialogContent>\n                                        <AlertDialogHeader>\n                                            <AlertDialogTitle>Reject Access Request?</AlertDialogTitle>\n                                            <AlertDialogDescription>An email will be sent to the user informing them of the rejection. Are you sure?</AlertDialogDescription>\n                                        </AlertDialogHeader>\n                                        <AlertDialogFooter>\n                                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                            <AlertDialogAction onClick={() => handleReject(sub.id)} className=\"bg-destructive hover:bg-destructive/90\">Reject</AlertDialogAction>\n                                        </AlertDialogFooter>\n                                    </AlertDialogContent>\n                                </AlertDialog>\n                            </>\n                        )}\n\n                        {sub.type === 'General Inquiry' && sub.status !== 'Replied' && (\n                             <Button size=\"sm\" onClick={() => handleReply(sub)}>\n                                <Send className=\"mr-2 h-4 w-4\"/> Reply\n                            </Button>\n                        )}\n                        \n                         <AlertDialog>\n                            <AlertDialogTrigger asChild>\n                                <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\">\n                                    <Trash2 className=\"h-4 w-4\" />\n                                </Button>\n                            </AlertDialogTrigger>\n                            <AlertDialogContent>\n                                <AlertDialogHeader>\n                                    <AlertDialogTitle>Delete Submission?</AlertDialogTitle>\n                                    <AlertDialogDescription>This will permanently delete this submission. This action cannot be undone.</AlertDialogDescription>\n                                </AlertDialogHeader>\n                                <AlertDialogFooter>\n                                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                    <AlertDialogAction onClick={() => handleDelete(sub.id)} className=\"bg-destructive hover:bg-destructive/90\">Delete</AlertDialogAction>\n                                </AlertDialogFooter>\n                            </AlertDialogContent>\n                        </AlertDialog>\n                      </>\n                    )}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* View Details Dialog */}\n      <Dialog open={isViewOpen} onOpenChange={setIsViewOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Submission Details</DialogTitle>\n          </DialogHeader>\n          {selectedSubmission && (\n            <div className=\"space-y-4 py-4\">\n              <div><strong>From:</strong> {selectedSubmission.name} ({selectedSubmission.email})</div>\n              <div><strong>Date:</strong> {new Date(selectedSubmission.createdAt).toLocaleString()}</div>\n              <div><strong>Type:</strong> {selectedSubmission.type}</div>\n              <div><strong>Status:</strong> <Badge variant={getStatusVariant(selectedSubmission.status)}>{selectedSubmission.status}</Badge></div>\n              <div className=\"space-y-1\">\n                  <Label>Message:</Label>\n                  <p className=\"p-3 bg-muted rounded-md text-sm\">{selectedSubmission.message}</p>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n      \n      {/* Reply Dialog */}\n      <Dialog open={isReplyOpen} onOpenChange={setIsReplyOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Reply to {selectedSubmission?.name}</DialogTitle>\n            <DialogDescription>Your reply will be sent via email to {selectedSubmission?.email}.</DialogDescription>\n          </DialogHeader>\n          <div className=\"py-4 space-y-4\">\n             <div className=\"space-y-1\">\n                <Label>Original Message:</Label>\n                <p className=\"p-3 bg-muted rounded-md text-sm\">{selectedSubmission?.message}</p>\n            </div>\n            <Textarea\n              placeholder=\"Type your reply here...\"\n              value={replyMessage}\n              onChange={(e) => setReplyMessage(e.target.value)}\n              rows={6}\n            />\n          </div>\n          <DialogFooter>\n            <Button variant=\"ghost\" onClick={() => setIsReplyOpen(false)}>Cancel</Button>\n            <Button onClick={handleSendReply} disabled={isReplying || !replyMessage.trim()}>\n              {isReplying && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n              Send Reply\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n\n    ","size_bytes":12339},"src/components/admin-settings.tsx":{"content":"\n'use client';\n\nimport { useEffect, useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { useToast } from '@/hooks/use-toast';\nimport { getVoiceProviderSettings, saveVoiceProviderSettings, type VoiceProviderSettings } from '@/lib/admin-actions';\nimport { getAllVoiceProviders } from '@/ai/flows/voice-selection';\nimport { Label } from '@/components/ui/label';\nimport { Switch } from '@/components/ui/switch';\nimport { Loader2 } from 'lucide-react';\n\nexport default function AdminSettings() {\n  const [settings, setSettings] = useState<VoiceProviderSettings>({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSaving, setIsSaving] = useState(false);\n  const [providers, setProviders] = useState<string[]>([]);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    async function fetchSettings() {\n      setIsLoading(true);\n      try {\n        const availableProviders = getAllVoiceProviders();\n        setProviders(availableProviders);\n\n        const savedSettings = await getVoiceProviderSettings();\n        // Initialize settings for any provider not in the database\n        const initialSettings: VoiceProviderSettings = {};\n        availableProviders.forEach(provider => {\n            initialSettings[provider] = savedSettings[provider] ?? true; // Default to true if not set\n        });\n        setSettings(initialSettings);\n      } catch (error) {\n        toast({\n          variant: 'destructive',\n          title: 'Error',\n          description: error instanceof Error ? error.message : 'Failed to fetch settings.',\n        });\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchSettings();\n  }, [toast]);\n\n  const handleToggle = (provider: string, checked: boolean) => {\n    setSettings(prev => ({ ...prev, [provider]: checked }));\n  };\n\n  const handleSaveChanges = async () => {\n    setIsSaving(true);\n    try {\n      const result = await saveVoiceProviderSettings(settings);\n      if (result.success) {\n        toast({ title: 'Success', description: 'Settings have been saved.' });\n      } else {\n        throw new Error(result.message);\n      }\n    } catch (error) {\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: error instanceof Error ? error.message : 'Failed to save settings.',\n      });\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex justify-center items-center p-8\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid gap-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Voice Provider Management</CardTitle>\n          <CardDescription>\n            Enable or disable text-to-speech providers for all users. Changes take effect immediately.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {providers.map(provider => (\n            <div key={provider} className=\"flex items-center justify-between p-4 border rounded-lg\">\n              <Label htmlFor={`provider-${provider}`} className=\"text-lg capitalize\">\n                {provider}\n              </Label>\n              <Switch\n                id={`provider-${provider}`}\n                checked={settings[provider]}\n                onCheckedChange={(checked) => handleToggle(provider, checked)}\n              />\n            </div>\n          ))}\n        </CardContent>\n      </Card>\n\n      <div className=\"flex justify-end\">\n        <Button onClick={handleSaveChanges} disabled={isSaving}>\n          {isSaving && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n          Save Changes\n        </Button>\n      </div>\n    </div>\n  );\n}\n\n    ","size_bytes":3825},"src/components/ai-dialog.tsx":{"content":"\n'use client';\n\nimport React, { useState } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n} from '@/components/ui/dialog';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Button } from '@/components/ui/button';\nimport { Loader2, Pause, Volume2 } from 'lucide-react';\nimport type { SummarizePdfOutput } from '@/ai/flows/summarize-pdf';\nimport type { GenerateGlossaryOutput } from '@/ai/flows/glossary-flow';\nimport type { GenerateQuizOutput, QuizQuestion } from '@/ai/schemas/quiz';\nimport { ScrollArea } from './ui/scroll-area';\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from './ui/accordion';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';\nimport { RadioGroup, RadioGroupItem } from './ui/radio-group';\nimport { Label } from './ui/label';\nimport { cn } from '@/lib/utils';\nimport ReactMarkdown from 'react-markdown';\nimport { QuizAttempt } from '@/lib/db';\n\nexport type AiDialogType = 'summary' | 'key-points' | 'glossary' | 'quiz';\n\ntype AiDialogProps = {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  type: AiDialogType;\n  isLoading: boolean;\n  summaryOutput: SummarizePdfOutput | null;\n  glossaryOutput: GenerateGlossaryOutput | null;\n  quizOutput: GenerateQuizOutput | null;\n  quizAttempt: QuizAttempt | null;\n  onQuizSubmit: (questions: QuizQuestion[], answers: Record<number, string>) => void;\n  onPlayAudio: (text: string) => void;\n  isPlaying: boolean;\n};\n\nconst AiDialog: React.FC<AiDialogProps> = ({\n  open,\n  onOpenChange,\n  type,\n  isLoading,\n  summaryOutput,\n  glossaryOutput,\n  quizOutput,\n  quizAttempt,\n  onQuizSubmit,\n  onPlayAudio,\n  isPlaying,\n}) => {\n\n  const renderLoading = (text: string) => (\n    <div className=\"flex items-center justify-center space-x-2 h-full p-8\">\n      <Loader2 className=\"animate-spin\" />\n      <span>{text}</span>\n    </div>\n  )\n\n  const renderSummaryContent = () => (\n    <>\n      <DialogHeader>\n        <DialogTitle>AI Analysis</DialogTitle>\n        <DialogDescription>\n          Here's a summary and key points generated by the AI based on the document's content.\n        </DialogDescription>\n      </DialogHeader>\n      <Tabs defaultValue={type === 'key-points' ? 'key-points' : 'summary'} className=\"w-full pt-4\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"summary\">Summary</TabsTrigger>\n          <TabsTrigger value=\"key-points\">Key Points</TabsTrigger>\n        </TabsList>\n        <ScrollArea className=\"h-96\">\n          <TabsContent value=\"summary\" className=\"p-4\">\n              <div className=\"flex justify-between items-center mb-2\">\n                <h3 className=\"text-lg font-semibold\">Summary</h3>\n                <Button variant=\"ghost\" size=\"icon\" onClick={() => onPlayAudio(summaryOutput?.summary || '')} disabled={!summaryOutput?.summary}>\n                    {isPlaying ? <Pause className=\"h-5 w-5\" /> : <Volume2 className=\"h-5 w-5\" />}\n                </Button>\n              </div>\n            {isLoading ? renderLoading('Generating summary...') : (\n              <p className=\"text-sm text-muted-foreground whitespace-pre-wrap\">\n                {summaryOutput?.summary || 'No summary available.'}\n              </p>\n            )}\n          </TabsContent>\n          <TabsContent value=\"key-points\" className=\"p-4\">\n            <div className=\"flex justify-between items-center mb-2\">\n                <h3 className=\"text-lg font-semibold\">Key Points</h3>\n                <Button variant=\"ghost\" size=\"icon\" onClick={() => onPlayAudio(summaryOutput?.keyPoints?.join('. ') || '')} disabled={!summaryOutput?.keyPoints}>\n                    {isPlaying ? <Pause className=\"h-5 w-5\" /> : <Volume2 className=\"h-5 w-5\" />}\n                </Button>\n            </div>\n            {isLoading ? renderLoading('Extracting key points...') : (\n              <ul className=\"list-disc pl-5 space-y-2 text-sm text-muted-foreground\">\n                {summaryOutput?.keyPoints?.map((point, index) => (\n                  <li key={index}>{point}</li>\n                )) || <li>No key points available.</li>}\n              </ul>\n            )}\n          </TabsContent>\n        </ScrollArea>\n      </Tabs>\n    </>\n  );\n\n  const renderGlossaryContent = () => (\n    <>\n        <DialogHeader>\n            <DialogTitle>Glossary</DialogTitle>\n            <DialogDescription>Key terms and concepts identified from the document by the AI.</DialogDescription>\n        </DialogHeader>\n        <ScrollArea className=\"h-96 pr-4\">\n            {isLoading ? renderLoading('Creating glossary...') : (\n                 <Accordion type=\"single\" collapsible className=\"w-full\">\n                    {glossaryOutput?.glossary?.map((item, index) => (\n                        <AccordionItem value={`item-${index}`} key={index}>\n                            <AccordionTrigger>{item.term}</AccordionTrigger>\n                            <AccordionContent>\n                                <div className=\"flex justify-between items-start\">\n                                    <p className=\"flex-1 pr-4\">{item.definition}</p>\n                                    <Button variant=\"ghost\" size=\"icon\" onClick={() => onPlayAudio(item.definition)} disabled={!item.definition}>\n                                        {isPlaying ? <Pause className=\"h-5 w-5\" /> : <Volume2 className=\"h-5 w-5\" />}\n                                    </Button>\n                                </div>\n                            </AccordionContent>\n                        </AccordionItem>\n                    ))}\n                </Accordion>\n            )}\n        </ScrollArea>\n    </>\n  );\n  \n  const QuizView: React.FC<{ questions: QuizQuestion[] }> = ({ questions }) => {\n    const [answers, setAnswers] = useState<Record<number, string>>(quizAttempt?.answers || {});\n    const [submitted, setSubmitted] = useState(!!quizAttempt);\n  \n    const handleAnswerChange = (questionIndex: number, value: string) => {\n      setAnswers(prev => ({ ...prev, [questionIndex]: value }));\n    };\n  \n    const handleSubmit = () => {\n      onQuizSubmit(questions, answers);\n      setSubmitted(true);\n    };\n\n    const getResultColor = (index: number, option?: string) => {\n        if (!submitted) return '';\n        const question = questions[index];\n        const userAnswer = quizAttempt?.answers[index] || answers[index];\n        const isCorrect = question.answer === userAnswer;\n        \n        if (option) { \n            if (option === question.answer) return 'text-green-700 font-bold';\n            if (option === userAnswer && !isCorrect) return 'text-red-700 font-bold';\n        } else {\n            return isCorrect ? 'text-green-700' : 'text-red-700';\n        }\n        return '';\n    }\n  \n    return (\n      <div className=\"space-y-6\">\n        {questions.map((q, index) => (\n          <Card key={index}>\n            <CardHeader>\n              <div className=\"flex justify-between items-center\">\n                <CardTitle>Question {index + 1}</CardTitle>\n                 <Button variant=\"ghost\" size=\"icon\" onClick={() => onPlayAudio(q.question)} disabled={!q.question}>\n                    {isPlaying ? <Pause className=\"h-5 w-5\" /> : <Volume2 className=\"h-5 w-5\" />}\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p>{q.question}</p>\n              {q.type === 'multiple-choice' && (\n                <RadioGroup \n                    onValueChange={(value) => handleAnswerChange(index, value)}\n                    disabled={submitted}\n                    value={answers[index]}\n                >\n                  {q.options?.map((option, i) => (\n                    <div key={i} className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value={option} id={`q${index}-o${i}`} />\n                      <Label htmlFor={`q${index}-o${i}`} className={cn(getResultColor(index, option))}>\n                        {option}\n                      </Label>\n                    </div>\n                  ))}\n                </RadioGroup>\n              )}\n              {q.type === 'true-false' && (\n                 <RadioGroup \n                    onValueChange={(value) => handleAnswerChange(index, value)}\n                    disabled={submitted}\n                    value={answers[index]}\n                >\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"True\" id={`q${index}-true`} />\n                      <Label htmlFor={`q${index}-true`} className={cn(getResultColor(index, \"True\"))}>True</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"False\" id={`q${index}-false`} />\n                      <Label htmlFor={`q${index}-false`} className={cn(getResultColor(index, \"False\"))}>False</Label>\n                    </div>\n                </RadioGroup>\n              )}\n              {submitted && (\n                 <div className={cn(\"p-4 rounded-md text-sm bg-muted prose dark:prose-invert max-w-none\", getResultColor(index))}>\n                    <div className=\"flex justify-between items-start\">\n                        <div className=\"flex-1 pr-4\">\n                            <p className=\"font-bold\">Correct Answer: {q.answer}</p>\n                            <ReactMarkdown>{q.explanation}</ReactMarkdown>\n                        </div>\n                         <Button variant=\"ghost\" size=\"icon\" onClick={() => onPlayAudio(`Correct answer: ${q.answer}. ${q.explanation}`)} disabled={!q.explanation}>\n                            {isPlaying ? <Pause className=\"h-5 w-5\" /> : <Volume2 className=\"h-5 w-5\" />}\n                        </Button>\n                    </div>\n                 </div>\n              )}\n            </CardContent>\n          </Card>\n        ))}\n        {!submitted && (\n            <Button onClick={handleSubmit} className=\"w-full\">Submit Answers</Button>\n        )}\n        {submitted && quizAttempt && (\n            <Card>\n                <CardHeader>\n                     <div className=\"flex justify-between items-center\">\n                        <div>\n                            <CardTitle>Quiz Results & Suggestions</CardTitle>\n                            <CardDescription>Your Score: {quizAttempt.score.toFixed(0)}%</CardDescription>\n                        </div>\n                        <Button variant=\"ghost\" size=\"icon\" onClick={() => onPlayAudio(quizAttempt.suggestions)} disabled={!quizAttempt.suggestions}>\n                            {isPlaying ? <Pause className=\"h-5 w-5\" /> : <Volume2 className=\"h-5 w-5\" />}\n                        </Button>\n                    </div>\n                </CardHeader>\n                <CardContent className=\"prose dark:prose-invert max-w-none\">\n                    <ReactMarkdown>{quizAttempt.suggestions}</ReactMarkdown>\n                </CardContent>\n            </Card>\n        )}\n      </div>\n    );\n  };\n  \n  const renderQuizContent = () => (\n    <>\n        <DialogHeader>\n            <DialogTitle>AI-Generated Quiz</DialogTitle>\n            <DialogDescription>Test your knowledge with these questions based on the document.</DialogDescription>\n        </DialogHeader>\n        <ScrollArea className=\"h-[32rem] pr-4 mt-4\">\n            {isLoading ? renderLoading('Generating your quiz...') : (\n                (quizOutput?.quiz || quizAttempt?.questions) && <QuizView questions={quizOutput?.quiz || quizAttempt!.questions} />\n            )}\n        </ScrollArea>\n    </>\n  );\n\n  const renderContent = () => {\n    switch (type) {\n        case 'summary':\n        case 'key-points':\n            return renderSummaryContent();\n        case 'glossary':\n            return renderGlossaryContent();\n        case 'quiz':\n            return renderQuizContent();\n        default:\n            return null;\n    }\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-3xl\">\n        {renderContent()}\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default AiDialog;\n","size_bytes":12172},"src/components/audio-player.tsx":{"content":"\n'use client';\n\nimport React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Play, Pause, Loader2, Download, Wind, FastForward, Rewind, ZoomIn, ZoomOut, Maximize, Minimize, Save, AlertCircle } from 'lucide-react';\nimport { Card } from './ui/card';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from './ui/dropdown-menu';\nimport { Slider } from './ui/slider';\nimport { Separator } from './ui/separator';\nimport { Tooltip, TooltipContent, TooltipTrigger } from './ui/tooltip';\nimport { useMediaQuery } from '@/hooks/use-media-query';\nimport type { AudioGenerationStatus } from '@/lib/db';\nimport { cn } from '@/lib/utils';\n\n\ntype AudioPlayerProps = {\n  isSpeaking: boolean;\n  docStatus: AudioGenerationStatus;\n  onPlayPause: () => void;\n  canPlay: boolean;\n  playbackRate: number;\n  onPlaybackRateChange: (rate: number) => void;\n  showDownload: boolean;\n  downloadUrl: string;\n  downloadFileName: string;\n  progress: number;\n  duration: number;\n  currentTime: number;\n  onSeek: (value: number) => void;\n  onForward: () => void;\n  onRewind: () => void;\n  isPdfLoaded: boolean;\n  zoomLevel: number;\n  onZoomIn: () => void;\n  onZoomOut: () => void;\n  isFullScreen: boolean;\n  onFullScreenToggle: () => void;\n  onSaveZoom: () => void;\n  isSavingZoom: boolean;\n};\n\nconst playbackRates = [0.75, 1.0, 1.25, 1.5, 2.0];\n\nconst formatTime = (seconds: number): string => {\n    if (isNaN(seconds) || seconds < 0) return '00:00';\n    const floorSeconds = Math.floor(seconds);\n    const min = Math.floor(floorSeconds / 60);\n    const sec = floorSeconds % 60;\n    return `${min.toString().padStart(2, '0')}:${sec.toString().padStart(2, '0')}`;\n};\n\nconst AudioPlayer: React.FC<AudioPlayerProps> = ({\n  isSpeaking,\n  docStatus,\n  onPlayPause,\n  canPlay,\n  playbackRate,\n  onPlaybackRateChange,\n  showDownload,\n  downloadUrl,\n  downloadFileName,\n  progress,\n  duration,\n  currentTime,\n  onSeek,\n  onForward,\n  onRewind,\n  isPdfLoaded,\n  zoomLevel,\n  onZoomIn,\n  onZoomOut,\n  isFullScreen,\n  onFullScreenToggle,\n  onSaveZoom,\n  isSavingZoom,\n}) => {\n  const isGeneratingSpeech = docStatus === 'processing';\n  const hasAudio = duration > 0;\n  const isDesktop = useMediaQuery('(min-width: 768px)');\n  \n  const handleDownload = async () => {\n    if (!showDownload || !downloadUrl) return;\n    try {\n      const response = await fetch(downloadUrl);\n      if (!response.ok) throw new Error('Network response was not ok.');\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      a.download = downloadFileName;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      a.remove();\n    } catch (error) {\n      console.error('Download failed:', error);\n      window.open(downloadUrl, '_blank');\n    }\n  };\n  \n  const getProcessingMessage = () => {\n    switch(docStatus) {\n        case 'processing': return 'Generating audio...';\n        case 'failed': return 'Audio generation failed.';\n        default: return '';\n    }\n  }\n\n\n  return (\n    <div className=\"p-2 md:p-4 w-full\">\n      <Card className=\"max-w-3xl mx-auto p-4 shadow-2xl bg-card/90 backdrop-blur-sm\">\n        <div className=\"flex items-center gap-2 md:gap-4\">\n            <div className=\"flex items-center gap-1 md:gap-2\">\n                <Tooltip>\n                    <TooltipTrigger asChild>\n                        <Button variant=\"ghost\" size=\"icon\" onClick={onRewind} disabled={!hasAudio}>\n                            <Rewind className=\"h-5 w-5\" />\n                        </Button>\n                    </TooltipTrigger>\n                    <TooltipContent><p>Rewind 10s</p></TooltipContent>\n                </Tooltip>\n                <Button \n                    onClick={onPlayPause} \n                    size=\"lg\" \n                    className=\"rounded-full w-14 h-14 bg-primary hover:bg-primary/90 text-primary-foreground\"\n                    aria-label={isSpeaking ? 'Pause' : 'Play'}\n                    disabled={isGeneratingSpeech || !canPlay}\n                >\n                    {isGeneratingSpeech ? (\n                        <Loader2 className=\"h-6 w-6 animate-spin\" />\n                    ) : (\n                        isSpeaking ? <Pause className=\"h-6 w-6\" /> : <Play className=\"h-6 w-6 ml-1\" />\n                    )}\n                </Button>\n                 <Tooltip>\n                    <TooltipTrigger asChild>\n                        <Button variant=\"ghost\" size=\"icon\" onClick={onForward} disabled={!hasAudio}>\n                            <FastForward className=\"h-5 w-5\" />\n                        </Button>\n                    </TooltipTrigger>\n                    <TooltipContent><p>Forward 10s</p></TooltipContent>\n                </Tooltip>\n            </div>\n            \n            <div className=\"flex-1 flex flex-col gap-2\">\n                 <Slider\n                    value={[currentTime]}\n                    max={duration || 1}\n                    step={1}\n                    onValueChange={(value) => onSeek(value[0])}\n                    disabled={!hasAudio}\n                    className=\"w-full\"\n                />\n                <div className=\"flex justify-between items-center text-xs text-muted-foreground\">\n                    <span>{formatTime(currentTime)}</span>\n                    <span className={cn(\"text-xs font-medium flex items-center gap-1\", docStatus === 'failed' && \"text-destructive\")}>\n                      {docStatus === 'failed' && <AlertCircle className=\"h-4 w-4\" />}\n                      {getProcessingMessage()}\n                    </span>\n                    <span>{formatTime(duration)}</span>\n                </div>\n            </div>\n            \n            {isDesktop && <Separator orientation=\"vertical\" className=\"h-10\" />}\n\n            <div className=\"hidden md:flex items-center gap-1\">\n                <Tooltip>\n                    <TooltipTrigger asChild>\n                        <Button variant=\"ghost\" size=\"icon\" onClick={onZoomOut} disabled={!isPdfLoaded || zoomLevel <= 0.4}>\n                            <ZoomOut className=\"h-5 w-5\" />\n                        </Button>\n                    </TooltipTrigger>\n                    <TooltipContent><p>Zoom Out</p></TooltipContent>\n                </Tooltip>\n                <span className=\"text-sm font-semibold w-16 text-center\">{(zoomLevel * 100).toFixed(0)}%</span>\n                <Tooltip>\n                    <TooltipTrigger asChild>\n                        <Button variant=\"ghost\" size=\"icon\" onClick={onZoomIn} disabled={!isPdfLoaded || zoomLevel >= 3}>\n                            <ZoomIn className=\"h-5 w-5\" />\n                        </Button>\n                    </TooltipTrigger>\n                    <TooltipContent><p>Zoom In</p></TooltipContent>\n                </Tooltip>\n                 <Tooltip>\n                    <TooltipTrigger asChild>\n                        <Button variant=\"ghost\" size=\"icon\" onClick={onSaveZoom} disabled={!isPdfLoaded || isSavingZoom}>\n                            {isSavingZoom ? <Loader2 className=\"h-5 w-5 animate-spin\" /> : <Save className=\"h-5 w-5\" />}\n                        </Button>\n                    </TooltipTrigger>\n                    <TooltipContent><p>Save Zoom Level</p></TooltipContent>\n                </Tooltip>\n                <Tooltip>\n                    <TooltipTrigger asChild>\n                        <Button variant=\"ghost\" size=\"icon\" onClick={onFullScreenToggle} disabled={!isPdfLoaded}>\n                            {isFullScreen ? <Minimize className=\"h-5 w-5\" /> : <Maximize className=\"h-5 w-5\" />}\n                        </Button>\n                    </TooltipTrigger>\n                    <TooltipContent><p>{isFullScreen ? 'Exit Fullscreen' : 'Fullscreen'}</p></TooltipContent>\n                </Tooltip>\n            </div>\n            \n            <Separator orientation=\"vertical\" className=\"h-10\" />\n            \n             <div className=\"flex items-center gap-1\">\n                <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                    <Tooltip>\n                        <TooltipTrigger asChild>\n                            <Button variant=\"ghost\" size={isDesktop ? 'sm' : 'icon'} className={isDesktop ? 'w-20' : ''} disabled={!hasAudio}>\n                                <Wind className={isDesktop ? 'mr-2 h-4 w-4' : 'h-5 w-5'} />\n                                {isDesktop && `${playbackRate.toFixed(2)}x`}\n                            </Button>\n                        </TooltipTrigger>\n                        <TooltipContent><p>Playback Speed</p></TooltipContent>\n                    </Tooltip>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"center\">\n                    {playbackRates.map(rate => (\n                        <DropdownMenuItem key={rate} onClick={() => onPlaybackRateChange(rate)}>\n                            {rate.toFixed(2)}x {rate === 1.0 && \"(Normal)\"}\n                        </DropdownMenuItem>\n                    ))}\n                    </DropdownMenuContent>\n                </DropdownMenu>\n                <Tooltip>\n                    <TooltipTrigger asChild>\n                        <Button variant=\"ghost\" size=\"icon\" disabled={!showDownload} onClick={handleDownload}>\n                            <Download className=\"h-5 w-5\"/>\n                        </Button>\n                    </TooltipTrigger>\n                    <TooltipContent><p>Download Audio</p></TooltipContent>\n                </Tooltip>\n            </div>\n        </div>\n      </Card>\n    </div>\n  );\n};\n\nexport default AudioPlayer;\n","size_bytes":9708},"src/components/audio-settings-panel.tsx":{"content":"\n'use client';\n\nimport React, { useMemo } from 'react';\nimport { Select, SelectContent, SelectGroup, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Label } from '@/components/ui/label';\nimport { Slider } from '@/components/ui/slider';\nimport { Button } from '@/components/ui/button';\nimport { Volume2 } from 'lucide-react';\nimport type { AvailableVoice } from '@/ai/flows/voice-selection';\n\ntype AudioSettingsPanelProps = {\n  availableVoices: AvailableVoice[];\n  selectedVoice: string;\n  onSelectedVoiceChange: (voice: string) => void;\n  speakingRate: number;\n  onSpeakingRateChange: (rate: number) => void;\n  isAudioGenerating: boolean;\n  isSpeaking: boolean;\n  onPreviewVoice: (voice: string) => void;\n};\n\nexport default function AudioSettingsPanel({\n  availableVoices,\n  selectedVoice,\n  onSelectedVoiceChange,\n  speakingRate,\n  onSpeakingRateChange,\n  isAudioGenerating,\n  isSpeaking,\n  onPreviewVoice,\n}: AudioSettingsPanelProps) {\n\n  const groupedVoices = useMemo(() => {\n    return availableVoices.reduce((acc, voice) => {\n      const provider = voice.provider;\n      if (!acc[provider]) {\n        acc[provider] = [];\n      }\n      acc[provider].push(voice);\n      return acc;\n    }, {} as Record<string, AvailableVoice[]>);\n  }, [availableVoices]);\n\n  return (\n    <div className=\"p-2 space-y-4\">\n      <div className='space-y-2'>\n        <Label>Voice</Label>\n        <Select value={selectedVoice} onValueChange={onSelectedVoiceChange} disabled={isSpeaking || isAudioGenerating}>\n          <SelectTrigger>\n            <SelectValue placeholder=\"Select a voice\" />\n          </SelectTrigger>\n          <SelectContent>\n            {Object.entries(groupedVoices).map(([provider, voices]) => (\n              <SelectGroup key={provider}>\n                <Label className=\"px-2 py-1.5 text-xs font-semibold text-muted-foreground\">{provider.toUpperCase()}</Label>\n                {voices.map((voice) => (\n                  <div key={voice.name} className=\"flex items-center justify-between pr-2\">\n                    <SelectItem value={voice.name} className=\"flex-1\">\n                      {voice.displayName} ({voice.gender})\n                    </SelectItem>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      className=\"h-7 w-7 ml-2 shrink-0\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        onPreviewVoice(voice.name);\n                      }}\n                      aria-label={`Preview voice ${voice.name}`}\n                    >\n                      <Volume2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                ))}\n              </SelectGroup>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n      <div className='space-y-2'>\n        <Label htmlFor=\"speaking-rate\">Speaking Rate: {speakingRate.toFixed(2)}x</Label>\n        <Slider id=\"speaking-rate\" min={0.25} max={4.0} step={0.25} value={[speakingRate]} onValueChange={(v) => onSpeakingRateChange(v[0])} disabled={isSpeaking || isAudioGenerating} />\n      </div>\n    </div>\n  );\n}\n","size_bytes":3173},"src/components/chat-window.tsx":{"content":"\n'use client';\n\nimport React, { useState, useRef, useEffect, forwardRef } from 'react';\nimport { Card, CardHeader, CardTitle, CardContent, CardFooter } from './ui/card';\nimport { Button } from './ui/button';\nimport { ScrollArea } from './ui/scroll-area';\nimport { Loader2, Minus, Send, X, Volume2, Trash2, Pause } from 'lucide-react';\nimport { type ChatMessage } from '@/lib/db';\nimport ReactMarkdown from 'react-markdown';\nimport { DraggableCore } from 'react-draggable';\nimport { Textarea } from './ui/textarea';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\"\n\ntype ChatWindowProps = {\n  chatHistory: ChatMessage[];\n  isLoading: boolean;\n  onSendMessage: (message: string) => void;\n  onClose: () => void;\n  onPlayAudio: (text: string) => void;\n  onClearChat: () => void;\n  isPlaying: boolean;\n};\n\n// Use forwardRef to get a ref to the underlying DOM element for react-draggable\nexport const ChatWindow = forwardRef<HTMLDivElement, ChatWindowProps>(\n    ({ chatHistory, isLoading, onSendMessage, onClose, onPlayAudio, onClearChat, isPlaying }, ref) => {\n  const [message, setMessage] = useState('');\n  const [isMinimized, setIsMinimized] = useState(false);\n  const scrollAreaRef = useRef<HTMLDivElement>(null);\n  \n  useEffect(() => {\n    if (scrollAreaRef.current) {\n        const scrollableView = scrollAreaRef.current.querySelector('div[data-radix-scroll-area-viewport]');\n        if(scrollableView) {\n            scrollableView.scrollTop = scrollableView.scrollHeight;\n        }\n    }\n  }, [chatHistory]);\n\n  const handleSubmit = (e?: React.FormEvent) => {\n    e?.preventDefault();\n    if (message.trim()) {\n      onSendMessage(message);\n      setMessage('');\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSubmit();\n    }\n  };\n\n  if (isMinimized) {\n    return (\n      <div className=\"fixed bottom-4 right-4 z-50\">\n        <Button onClick={() => setIsMinimized(false)}>Chat ({chatHistory.length})</Button>\n      </div>\n    );\n  }\n\n  return (\n    // Pass the ref to the div so DraggableCore can use it.\n    <div ref={ref}>\n        <DraggableCore \n            handle=\".handle\"\n            nodeRef={ref as React.RefObject<HTMLDivElement>}\n        >\n          <div\n            className=\"fixed bottom-4 right-4 z-50\"\n          >\n            <Card className=\"w-[450px] h-[600px] flex flex-col shadow-2xl\">\n              <CardHeader className=\"handle cursor-move flex flex-row items-center justify-between p-4\">\n                <CardTitle>Chat with Document</CardTitle>\n                <div className=\"flex items-center gap-1\">\n                    <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                             <Button variant=\"ghost\" size=\"icon\" className=\"h-7 w-7\"><Trash2 /></Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                            <AlertDialogHeader>\n                            <AlertDialogTitle>Clear Chat History?</AlertDialogTitle>\n                            <AlertDialogDescription>\n                                This will permanently delete the chat history for this document. This action cannot be undone.\n                            </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n                            <AlertDialogAction onClick={onClearChat}>Clear History</AlertDialogAction>\n                            </AlertDialogFooter>\n                        </AlertDialogContent>\n                    </AlertDialog>\n                    <Button variant=\"ghost\" size=\"icon\" className=\"h-7 w-7\" onClick={() => setIsMinimized(true)}><Minus /></Button>\n                    <Button variant=\"ghost\" size=\"icon\" className=\"h-7 w-7\" onClick={onClose}><X /></Button>\n                </div>\n              </CardHeader>\n              <CardContent className=\"flex-1 overflow-hidden p-0\">\n                <ScrollArea className=\"h-full p-4\" ref={scrollAreaRef}>\n                  <div className=\"space-y-4\">\n                    {chatHistory.map((chat) => (\n                      <div key={chat.id} className={`flex ${chat.role === 'user' ? 'justify-end' : 'justify-start'}`}>\n                        <div className={`max-w-[80%] p-3 rounded-lg ${chat.role === 'user' ? 'bg-primary text-primary-foreground' : 'bg-muted'}`}>\n                           <div className=\"prose dark:prose-invert text-sm\">\n                             <ReactMarkdown>{chat.content}</ReactMarkdown>\n                           </div>\n                           {chat.role === 'assistant' && (\n                               <Button variant=\"ghost\" size=\"icon\" className=\"h-6 w-6 mt-2\" onClick={() => onPlayAudio(chat.content)}>\n                                   {isPlaying ? <Pause className=\"h-4 w-4\" /> : <Volume2 className=\"h-4 w-4\" />}\n                               </Button>\n                           )}\n                        </div>\n                      </div>\n                    ))}\n                     {isLoading && (\n                        <div className=\"flex justify-start\">\n                            <div className=\"bg-muted p-3 rounded-lg\">\n                                <Loader2 className=\"animate-spin\" />\n                            </div>\n                        </div>\n                    )}\n                  </div>\n                </ScrollArea>\n              </CardContent>\n              <CardFooter className=\"p-4\">\n                <form onSubmit={handleSubmit} className=\"flex w-full gap-2 items-start\">\n                  <Textarea\n                    value={message}\n                    onChange={(e) => setMessage(e.target.value)}\n                    onKeyDown={handleKeyDown}\n                    placeholder=\"Ask a question... (Shift + Enter for new line)\"\n                    disabled={isLoading}\n                    className=\"min-h-[40px] max-h-48 resize-y\"\n                    rows={1}\n                  />\n                  <Button type=\"submit\" disabled={isLoading || !message.trim()} className=\"self-end\">\n                    {isLoading ? <Loader2 className=\"animate-spin\" /> : <Send />}\n                  </Button>\n                </form>\n              </CardFooter>\n            </Card>\n          </div>\n        </DraggableCore>\n    </div>\n  );\n});\nChatWindow.displayName = \"ChatWindow\";\n","size_bytes":6668},"src/components/document-library.tsx":{"content":"\n'use client';\n\nimport React, { useState } from 'react';\nimport { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip';\nimport { Button } from '@/components/ui/button';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';\nimport { Mic, Trash2, FileText, Library, PlusCircle, Cloud, Folder as FolderIcon, FolderPlus, ChevronRight, UploadCloud, Loader2 } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport type { Document, Folder } from '@/lib/db';\nimport { Input } from './ui/input';\nimport { useToast } from '@/hooks/use-toast';\n\ntype DocumentLibraryProps = {\n  documents: Document[];\n  folders: Folder[];\n  activeDocId: string | null;\n  onSelect: (doc: Document) => void;\n  onDelete: (docId: string) => void;\n  onGenerateAudio: (doc: Document) => void;\n  onUploadNew: (folderId?: string) => void;\n  onCreateFolder: (name: string) => Promise<void>;\n  onDeleteFolder: (folderId: string) => Promise<void>;\n  onMoveDocument: (docId: string, folderId: string | null) => Promise<void>;\n};\n\nexport default function DocumentLibrary({\n  documents,\n  folders,\n  activeDocId,\n  onSelect,\n  onDelete,\n  onGenerateAudio,\n  onUploadNew,\n  onCreateFolder,\n  onDeleteFolder,\n  onMoveDocument,\n}: DocumentLibraryProps) {\n  const [expandedFolders, setExpandedFolders] = useState<Record<string, boolean>>({});\n  const [isCreatingFolder, setIsCreatingFolder] = useState(false);\n  const [newFolderName, setNewFolderName] = useState('');\n  const [draggedDocId, setDraggedDocId] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const handleToggleFolder = (folderId: string) => {\n    setExpandedFolders(prev => ({ ...prev, [folderId]: !prev[folderId] }));\n  };\n\n  const handleCreateFolder = async () => {\n    if (!newFolderName.trim()) return;\n    try {\n        await onCreateFolder(newFolderName.trim());\n        setNewFolderName('');\n        setIsCreatingFolder(false);\n    } catch(e) {\n        toast({ variant: 'destructive', title: 'Error', description: 'Could not create folder.'})\n    }\n  };\n  \n  const handleDragStart = (e: React.DragEvent<HTMLDivElement>, docId: string) => {\n    e.dataTransfer.effectAllowed = 'move';\n    setDraggedDocId(docId);\n  };\n  \n  const handleDrop = (e: React.DragEvent<HTMLDivElement>, folderId: string | null) => {\n    e.preventDefault();\n    if (draggedDocId) {\n        onMoveDocument(draggedDocId, folderId);\n        setDraggedDocId(null);\n    }\n  };\n\n  const rootDocuments = documents.filter(d => !d.folderId);\n\n  return (\n    <div>\n      <div className=\"flex justify-between items-center p-2 text-sm font-semibold text-muted-foreground\">\n        <div className=\"flex items-center gap-2\">\n          <Library />\n          My Documents\n        </div>\n        <div className='flex items-center gap-1'>\n            <Tooltip>\n                <TooltipTrigger asChild>\n                    <Button variant=\"ghost\" size=\"icon\" className=\"h-7 w-7\" onClick={() => setIsCreatingFolder(true)}>\n                        <FolderPlus className=\"h-5 w-5\" />\n                    </Button>\n                </TooltipTrigger>\n                <TooltipContent><p>New Folder</p></TooltipContent>\n            </Tooltip>\n            <Tooltip>\n                <TooltipTrigger asChild>\n                    <Button variant=\"ghost\" size=\"icon\" className=\"h-7 w-7\" onClick={() => onUploadNew()}>\n                        <PlusCircle className=\"h-5 w-5\" />\n                    </Button>\n                </TooltipTrigger>\n                <TooltipContent><p>New Document</p></TooltipContent>\n            </Tooltip>\n        </div>\n      </div>\n      <div className=\"px-2 space-y-1\">\n        {isCreatingFolder && (\n            <div className='flex gap-2 p-1'>\n                <Input \n                    value={newFolderName} \n                    onChange={e => setNewFolderName(e.target.value)}\n                    placeholder=\"Folder Name\"\n                    className=\"h-8\"\n                    onKeyDown={e => e.key === 'Enter' && handleCreateFolder()}\n                    autoFocus\n                />\n                <Button size=\"sm\" onClick={handleCreateFolder}>Create</Button>\n                <Button size=\"sm\" variant=\"ghost\" onClick={() => setIsCreatingFolder(false)}>Cancel</Button>\n            </div>\n        )}\n        {folders.map(folder => (\n            <div key={folder.id} onDragOver={e => e.preventDefault()} onDrop={(e) => handleDrop(e, folder.id)}>\n                <div className=\"flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm group bg-muted/50\">\n                    <button onClick={() => handleToggleFolder(folder.id)} className=\"flex items-center flex-1 gap-2\">\n                        <ChevronRight className={cn(\"h-4 w-4 transition-transform\", expandedFolders[folder.id] && \"rotate-90\")}/>\n                        <FolderIcon />\n                        <span className=\"truncate max-w-[120px] font-medium\">{folder.name}</span>\n                    </button>\n                    <div className=\"flex items-center ml-auto opacity-0 group-hover:opacity-100\">\n                        <Tooltip>\n                            <TooltipTrigger asChild>\n                                <Button variant=\"ghost\" size=\"icon\" className=\"h-7 w-7\" onClick={() => onUploadNew(folder.id)}>\n                                    <UploadCloud className=\"h-4 w-4\" />\n                                </Button>\n                            </TooltipTrigger>\n                            <TooltipContent><p>Upload to folder</p></TooltipContent>\n                        </Tooltip>\n                        <AlertDialog>\n                            <Tooltip>\n                                <TooltipTrigger asChild>\n                                    <AlertDialogTrigger asChild>\n                                        <Button variant=\"ghost\" size=\"icon\" className=\"h-7 w-7\">\n                                            <Trash2 className=\"h-4 w-4 text-destructive\" />\n                                        </Button>\n                                    </AlertDialogTrigger>\n                                </TooltipTrigger>\n                                <TooltipContent><p>Delete folder</p></TooltipContent>\n                            </Tooltip>\n                            <AlertDialogContent>\n                                <AlertDialogHeader>\n                                <AlertDialogTitle>Delete \"{folder.name}\"?</AlertDialogTitle>\n                                <AlertDialogDescription>\n                                    This will permanently delete the folder and ALL documents inside it. This action cannot be undone.\n                                </AlertDialogDescription>\n                                </AlertDialogHeader>\n                                <AlertDialogFooter>\n                                <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                <AlertDialogAction onClick={() => onDeleteFolder(folder.id)} className=\"bg-destructive hover:bg-destructive/90\">Delete</AlertDialogAction>\n                                </AlertDialogFooter>\n                            </AlertDialogContent>\n                        </AlertDialog>\n                    </div>\n                </div>\n                {expandedFolders[folder.id] && (\n                    <div className=\"pl-6 pt-1 space-y-1\">\n                        {documents.filter(d => d.folderId === folder.id).map(doc => <DocumentItem key={doc.id} {...{doc, activeDocId, onSelect, onDelete, onGenerateAudio, onDragStart: handleDragStart}} />)}\n                    </div>\n                )}\n            </div>\n        ))}\n         <div onDragOver={e => e.preventDefault()} onDrop={(e) => handleDrop(e, null)}>\n            {rootDocuments.map(doc => <DocumentItem key={doc.id} {...{doc, activeDocId, onSelect, onDelete, onGenerateAudio, onDragStart: handleDragStart}} />)}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst DocumentItem = ({ doc, activeDocId, onSelect, onDelete, onGenerateAudio, onDragStart }: { doc: Document; activeDocId: string | null; onSelect: (doc: Document) => void; onDelete: (docId: string) => void; onGenerateAudio: (doc: Document) => void; onDragStart: (e: React.DragEvent<HTMLDivElement>, docId: string) => void; }) => (\n    <div \n        draggable \n        onDragStart={(e) => onDragStart(e, doc.id)}\n        className={cn(\n            \"flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm group cursor-move\",\n            activeDocId === doc.id && \"bg-sidebar-accent font-medium text-sidebar-accent-foreground\"\n    )}>\n        <FileText />\n        <div className=\"flex-1 flex items-center justify-between\">\n            <Tooltip>\n            <TooltipTrigger asChild>\n                <button onClick={() => onSelect(doc)} className=\"truncate max-w-[150px] text-left hover:underline\">\n                {doc.fileName}\n                </button>\n            </TooltipTrigger>\n            <TooltipContent><p>{doc.fileName}</p></TooltipContent>\n            </Tooltip>\n            <div className=\"flex items-center opacity-0 group-hover:opacity-100 transition-opacity\">\n            {doc.audioGenerationStatus === 'processing' ? (\n                <Tooltip>\n                    <TooltipTrigger asChild><Loader2 className=\"h-4 w-4 animate-spin text-primary mr-1\" /></TooltipTrigger>\n                    <TooltipContent><p>Audio is generating...</p></TooltipContent>\n                </Tooltip>\n            ) : doc.audioGenerationStatus === 'completed' && doc.audioUrl ? (\n                <Tooltip>\n                    <TooltipTrigger asChild><Cloud className=\"h-4 w-4 text-primary mr-1\" /></TooltipTrigger>\n                    <TooltipContent><p>Audio is ready</p></TooltipContent>\n                </Tooltip>\n            ) : (\n                <Tooltip>\n                    <TooltipTrigger asChild>\n                        <Button variant=\"ghost\" size=\"icon\" className=\"h-7 w-7\" onClick={() => onGenerateAudio(doc)}>\n                            <Mic className=\"h-4 w-4\" />\n                        </Button>\n                    </TooltipTrigger>\n                    <TooltipContent><p>Generate Audio</p></TooltipContent>\n                </Tooltip>\n            )}\n            <AlertDialog>\n                <Tooltip>\n                <TooltipTrigger asChild>\n                    <AlertDialogTrigger asChild>\n                    <Button variant=\"ghost\" size=\"icon\" className=\"h-7 w-7\">\n                        <Trash2 className=\"h-4 w-4 text-destructive\" />\n                    </Button>\n                    </AlertDialogTrigger>\n                </TooltipTrigger>\n                <TooltipContent><p>Delete document</p></TooltipContent>\n                </Tooltip>\n                <AlertDialogContent>\n                <AlertDialogHeader>\n                    <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n                    <AlertDialogDescription>\n                    This will permanently delete \"{doc.fileName}\" and its generated audio. This action cannot be undone.\n                    </AlertDialogDescription>\n                </AlertDialogHeader>\n                <AlertDialogFooter>\n                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n                    <AlertDialogAction onClick={() => onDelete(doc.id)} className=\"bg-destructive hover:bg-destructive/90\">Delete</AlertDialogAction>\n                </AlertDialogFooter>\n                </AlertDialogContent>\n            </AlertDialog>\n            </div>\n        </div>\n    </div>\n);\n","size_bytes":11627},"src/components/impersonation-banner.tsx":{"content":"\n'use client';\n\nimport { useRouter } from 'next/navigation';\nimport { Button } from './ui/button';\nimport { UserX } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function ImpersonationBanner() {\n  const router = useRouter();\n  const { toast } = useToast();\n\n  const handleStopImpersonating = async () => {\n    const response = await fetch('/api/admin/stop-impersonating', { method: 'POST' });\n    if (response.ok) {\n      // Refresh the page to get the new session\n      router.push('/admin');\n      router.refresh();\n    } else {\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: 'Could not stop impersonating. Please try logging out.',\n      });\n    }\n  };\n\n  return (\n    <div className=\"bg-yellow-400 text-yellow-900 text-center p-2 flex items-center justify-center gap-4\">\n      <p className=\"font-semibold\">You are currently impersonating a user.</p>\n      <Button\n        variant=\"secondary\"\n        size=\"sm\"\n        className=\"bg-yellow-500 hover:bg-yellow-600 text-yellow-900\"\n        onClick={handleStopImpersonating}\n      >\n        <UserX className=\"mr-2\" />\n        Return to Admin\n      </Button>\n    </div>\n  );\n}\n","size_bytes":1208},"src/components/main-content.tsx":{"content":"\n'use client';\n\nimport React from 'react';\nimport dynamic from 'next/dynamic';\nimport { Loader2, UploadCloud } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport type { Document } from '@/lib/db';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport TextToSpeechTab from './text-to-speech-tab';\nimport type { SpeechMark } from '@/hooks/use-read-page';\n\nconst PdfViewer = dynamic(() => import('@/components/pdf-viewer'), { \n  ssr: false,\n  loading: () => (\n    <div className=\"w-full h-full flex flex-col items-center justify-center text-center p-4 bg-muted/50 rounded-lg\">\n      <Loader2 className=\"h-12 w-12 animate-spin text-primary mb-4\" />\n      <p className=\"text-xl font-semibold\">Loading Document Viewer...</p>\n    </div>\n  )\n});\n\ntype MainContentProps = {\n  activeDoc: Document | null;\n  isUploading: boolean;\n  uploadStage: 'idle' | 'uploading' | 'extracting' | 'cleaning' | 'saving' | 'error';\n  pdfZoomLevel: number;\n  onFileChange: (files: FileList | null) => void;\n  fileInputRef: React.RefObject<HTMLInputElement>;\n  onGenerateTextAudio: (text: string) => Promise<{ success: boolean; audioUrl?: string; error?: string }>;\n  highlightedSentence: SpeechMark | null;\n  highlightColor: string;\n  highlightStyle: 'background' | 'underline';\n};\n\nexport default function MainContent({\n  activeDoc,\n  isUploading,\n  uploadStage,\n  pdfZoomLevel,\n  onFileChange,\n  fileInputRef,\n  onGenerateTextAudio,\n  highlightedSentence,\n  highlightColor,\n  highlightStyle,\n}: MainContentProps) {\n  \n  const getUploadMessage = () => {\n    switch (uploadStage) {\n      case 'uploading': return 'Uploading file...';\n      case 'extracting': return 'Extracting text...';\n      case 'cleaning': return 'Cleaning up content...';\n      case 'saving': return 'Saving document...';\n      case 'error': return 'An error occurred during upload.';\n      default: return 'Drag & drop PDF here or click to upload';\n    }\n  };\n\n  if (activeDoc) {\n    return (\n      <PdfViewer\n        file={activeDoc.pdfUrl}\n        zoomLevel={pdfZoomLevel}\n        highlightedSentence={highlightedSentence}\n        pageCharacterOffsets={activeDoc.pageCharacterOffsets}\n        highlightColor={highlightColor}\n        highlightStyle={highlightStyle}\n        key={activeDoc.id} // Add key to force re-mount on doc change\n      />\n    );\n  }\n\n  if (isUploading) {\n    return (\n      <div className=\"w-full h-full flex flex-col items-center justify-center text-center p-4 bg-muted/50 rounded-lg\">\n        <Loader2 className=\"h-12 w-12 animate-spin text-primary mb-4\" />\n        <p className=\"text-xl font-semibold\">{getUploadMessage()}</p>\n        <p className=\"text-muted-foreground\">Please wait while we process your document.</p>\n      </div>\n    );\n  }\n  \n  return (\n    <div\n      className=\"w-full h-full flex items-center justify-center p-4\"\n      onDragOver={(e) => e.preventDefault()}\n      onDrop={(e) => {\n        e.preventDefault();\n        onFileChange(e.dataTransfer.files);\n      }}\n    >\n      <Tabs defaultValue=\"document\" className=\"w-full max-w-2xl\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"document\">Document Reader</TabsTrigger>\n          <TabsTrigger value=\"tts\">Text-to-Speech</TabsTrigger>\n        </TabsList>\n        <TabsContent value=\"document\">\n            <div className=\"text-center mt-6 p-8 border-2 border-dashed border-muted-foreground/30 rounded-xl\">\n                <UploadCloud className=\"mx-auto h-16 w-16 text-muted-foreground/50\" />\n                <h3 className=\"mt-4 text-2xl font-headline\">Prepare a New Document</h3>\n                <p className=\"mt-2 text-sm text-muted-foreground\">\n                Drag and drop a PDF file here, or click the button below to select one.\n                </p>\n                <Button className=\"mt-6\" onClick={() => fileInputRef.current?.click()}>\n                Select PDF File\n                </Button>\n                <input\n                type=\"file\"\n                ref={fileInputRef}\n                onChange={(e) => onFileChange(e.target.files)}\n                accept=\"application/pdf\"\n                className=\"hidden\"\n                />\n            </div>\n        </TabsContent>\n        <TabsContent value=\"tts\">\n            <TextToSpeechTab onGenerate={onGenerateTextAudio} />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":4386},"src/components/pdf-viewer.tsx":{"content":"\n'use client';\n\nimport React, { useState } from 'react';\nimport { Document, Page, pdfjs } from 'react-pdf';\nimport 'react-pdf/dist/esm/Page/AnnotationLayer.css';\nimport 'react-pdf/dist/esm/Page/TextLayer.css';\nimport { useToast } from '@/hooks/use-toast';\nimport { Loader2 } from 'lucide-react';\n\npdfjs.GlobalWorkerOptions.workerSrc = `/static/pdf.worker.min.js`;\n\ntype PdfViewerProps = {\n  file: string;\n  zoomLevel: number;\n  highlightedSentence: any;\n};\n\nconst PdfViewer: React.FC<PdfViewerProps> = ({ \n    file, \n    zoomLevel,\n    highlightedSentence,\n}) => {\n  const [numPages, setNumPages] = useState<number | null>(null);\n  const { toast } = useToast();\n\n  const onDocumentLoadSuccess = ({ numPages }: { numPages: number }) => {\n    setNumPages(numPages);\n  };\n\n  const onDocumentLoadError = (error: Error) => {\n    if (error.name === 'AbortException') return;\n    console.error(\"PDF Load Error:\", error);\n    toast({\n      variant: 'destructive',\n      title: 'Error loading PDF',\n      description: error.message || 'Failed to load the document.',\n    });\n  };\n  \n  return (\n    <div className=\"flex flex-col h-full w-full bg-muted\">\n      <div className=\"flex-1 overflow-auto relative flex items-start justify-center pt-4\" id=\"pdf-viewer-container\">\n        <Document\n          file={file}\n          onLoadSuccess={onDocumentLoadSuccess}\n          onLoadError={onDocumentLoadError}\n          loading={\n            <div className=\"flex items-center space-x-2 pt-20\">\n              <Loader2 className=\"animate-spin\" />\n              <span>Loading document...</span>\n            </div>\n          }\n          className=\"flex flex-col items-center\"\n        >\n          {numPages && Array.from(new Array(numPages), (el, index) => (\n            <div \n              key={`page_container_${index + 1}`} \n              className=\"my-2 shadow-lg relative\"\n            >\n              <Page\n                pageNumber={index + 1}\n                scale={zoomLevel}\n                renderTextLayer={true}\n                renderAnnotationLayer={true}\n              />\n            </div>\n          ))}\n        </Document>\n      </div>\n    </div>\n  );\n};\n\nexport default PdfViewer;\n\n    ","size_bytes":2181},"src/components/profile-dialog.tsx":{"content":"\n'use client';\n\nimport { useState, useEffect, useMemo } from 'react';\nimport { useForm, useFormState } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { useToast } from '@/hooks/use-toast';\nimport { changeUserPassword, updateUserProfile, deleteUserAccount } from '@/lib/user-actions';\nimport { Loader2, Trash2, Eye, EyeOff } from 'lucide-react';\nimport { useRouter } from 'next/navigation';\nimport { getUserSession, type Document, type UserSession } from '@/lib/db';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectGroup, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { getAvailableVoices, AvailableVoice } from '@/ai/flows/voice-selection';\nimport { Slider } from '@/components/ui/slider';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';\nimport { ScrollArea } from './ui/scroll-area';\nimport { RadioGroup, RadioGroupItem } from './ui/radio-group';\nimport { cn } from '@/lib/utils';\n\nconst passwordFormSchema = z.object({\n  currentPassword: z.string().min(1, 'Current password is required.'),\n  newPassword: z.string().min(8, 'New password must be at least 8 characters.'),\n});\ntype PasswordFormValues = z.infer<typeof passwordFormSchema>;\n\nconst profileFormSchema = z.object({\n  name: z.string().min(2, 'Name must be at least 2 characters.'),\n  defaultVoice: z.string(),\n  defaultSpeakingRate: z.number().min(0.25).max(4.0),\n  defaultZoomLevel: z.number().min(0.4).max(3.0),\n  highlightColor: z.string(),\n  highlightStyle: z.enum(['background', 'underline']),\n});\ntype ProfileFormValues = z.infer<typeof profileFormSchema>;\n\ntype ProfileDialogProps = {\n  session: UserSession;\n  onOpenChange: (open: boolean) => void;\n  onUpdate: () => void; // To refresh session data on parent\n};\n\nconst highlightColors = [\n    { name: 'Yellow', value: 'highlight-yellow' },\n    { name: 'Green', value: 'highlight-green' },\n    { name: 'Blue', value: 'highlight-blue' },\n    { name: 'Pink', value: 'highlight-pink' },\n    { name: 'Purple', value: 'highlight-purple' },\n];\n\nexport default function ProfileDialog({ session, onOpenChange, onUpdate }: ProfileDialogProps) {\n  const { toast } = useToast();\n  const router = useRouter();\n  const [availableVoices, setAvailableVoices] = useState<AvailableVoice[]>([]);\n  const [avatarPreview, setAvatarPreview] = useState<string | null>(null);\n  const [isPasswordLoading, setIsPasswordLoading] = useState(false);\n  const [isProfileLoading, setIsProfileLoading] = useState(false);\n  const [isDeleteLoading, setIsDeleteLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [deleteConfirmation, setDeleteConfirmation] = useState('');\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n\n  useEffect(() => {\n    async function fetchData() {\n      const voices = await getAvailableVoices();\n      setAvailableVoices(voices);\n\n      if (session) {\n        profileForm.reset({\n            name: session.name || '',\n            defaultVoice: session.defaultVoice || 'openai/alloy',\n            defaultSpeakingRate: session.defaultSpeakingRate || 1.0,\n            defaultZoomLevel: session.defaultZoomLevel || 1.0,\n            highlightColor: session.highlightColor || 'highlight-yellow',\n            highlightStyle: session.highlightStyle || 'background',\n        });\n      }\n    }\n    fetchData();\n  }, [session]);\n\n  const passwordForm = useForm<PasswordFormValues>({\n    resolver: zodResolver(passwordFormSchema),\n    defaultValues: { currentPassword: '', newPassword: '' },\n  });\n\n  const profileForm = useForm<ProfileFormValues>({\n    resolver: zodResolver(profileFormSchema),\n    defaultValues: {\n      name: session.name || '',\n      defaultVoice: session.defaultVoice || 'openai/alloy',\n      defaultSpeakingRate: session.defaultSpeakingRate || 1.0,\n      defaultZoomLevel: session.defaultZoomLevel || 1.0,\n      highlightColor: session.highlightColor || 'highlight-yellow',\n      highlightStyle: session.highlightStyle || 'background',\n    }\n  });\n\n  const { isDirty: isProfileDirty } = useFormState({ control: profileForm.control });\n\n  const onPasswordSubmit = async (values: PasswordFormValues) => {\n    setIsPasswordLoading(true);\n    try {\n      const result = await changeUserPassword(values);\n      if (result.success) {\n        toast({ title: 'Success', description: 'Your password has been changed.' });\n        passwordForm.reset();\n      } else {\n        throw new Error(result.message || 'Failed to change password.');\n      }\n    } catch (error) {\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: error instanceof Error ? error.message : 'An unexpected error occurred.',\n      });\n    } finally {\n      setIsPasswordLoading(false);\n    }\n  };\n  \n  const onProfileSubmit = async (values: ProfileFormValues) => {\n    setIsProfileLoading(true);\n    const formData = new FormData();\n    const avatarInput = document.querySelector('input[name=\"avatar\"]') as HTMLInputElement;\n\n    formData.append('name', values.name);\n    formData.append('defaultVoice', values.defaultVoice);\n    formData.append('defaultSpeakingRate', values.defaultSpeakingRate.toString());\n    formData.append('defaultZoomLevel', values.defaultZoomLevel.toString());\n    formData.append('highlightColor', values.highlightColor);\n    formData.append('highlightStyle', values.highlightStyle);\n    \n    if (avatarInput?.files?.[0]) {\n      formData.append('avatar', avatarInput.files[0]);\n    }\n\n    try {\n      const result = await updateUserProfile(formData);\n      if (result.success) {\n        toast({ title: 'Success', description: 'Your profile has been updated.' });\n        profileForm.reset(values); // Re-sync form state with new values\n        onUpdate(); // Trigger parent to refetch session\n      } else {\n        throw new Error(result.message || 'Failed to update profile.');\n      }\n    } catch (error) {\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: error instanceof Error ? error.message : 'An unexpected error occurred.',\n      });\n    } finally {\n      setIsProfileLoading(false);\n    }\n  };\n\n  const handleDeleteAccount = async () => {\n    if (deleteConfirmation !== session?.email) {\n      toast({ variant: 'destructive', title: 'Confirmation failed', description: 'Please type your email correctly to confirm.' });\n      return;\n    }\n    setIsDeleteLoading(true);\n    try {\n        const result = await deleteUserAccount(passwordForm.getValues('currentPassword'));\n        if (result.success) {\n            toast({ title: 'Account Deleted', description: 'Your account has been permanently deleted.' });\n            router.push('/');\n        } else {\n            throw new Error(result.message || 'Failed to delete account.');\n        }\n    } catch (error) {\n        toast({\n            variant: 'destructive',\n            title: 'Error',\n            description: error instanceof Error ? error.message : 'An unexpected error occurred.',\n        });\n    } finally {\n        setIsDeleteLoading(false);\n        setIsDeleteDialogOpen(false);\n        onOpenChange(false);\n    }\n  }\n\n  const groupedVoices = useMemo(() => {\n    return availableVoices.reduce((acc, voice) => {\n        const provider = voice.provider;\n        if (!acc[provider]) acc[provider] = [];\n        acc[provider].push(voice);\n        return acc;\n    }, {} as Record<string, AvailableVoice[]>);\n  }, [availableVoices]);\n\n  if (!session) return null;\n\n  return (\n    <DialogContent className=\"max-w-2xl\">\n      <DialogHeader>\n        <DialogTitle>My Account</DialogTitle>\n        <DialogDescription>Manage your profile, preferences, and security settings.</DialogDescription>\n      </DialogHeader>\n      <Tabs defaultValue=\"profile\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"profile\">Profile</TabsTrigger>\n          <TabsTrigger value=\"security\">Security</TabsTrigger>\n          <TabsTrigger value=\"danger\">Danger Zone</TabsTrigger>\n        </TabsList>\n        <TabsContent value=\"profile\" className=\"py-4\">\n          <Form {...profileForm}>\n            <form onSubmit={profileForm.handleSubmit(onProfileSubmit)}>\n              <ScrollArea className=\"h-[60vh] pr-6\">\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-center gap-6\">\n                    <Avatar className=\"h-20 w-20\">\n                      <AvatarImage src={avatarPreview || session.avatarUrl} data-ai-hint=\"user avatar\" />\n                      <AvatarFallback>{session.name?.charAt(0).toUpperCase()}</AvatarFallback>\n                    </Avatar>\n                    <FormField\n                      control={profileForm.control}\n                      name=\"name\"\n                      render={({ field }) => (\n                      <FormItem className=\"flex-1\">\n                          <FormLabel>Display Name</FormLabel>\n                          <FormControl><Input {...field} /></FormControl>\n                          <FormMessage />\n                      </FormItem>\n                      )}\n                    />\n                  </div>\n                  <FormItem>\n                    <FormLabel>Profile Picture</FormLabel>\n                    <FormControl>\n                      <Input name=\"avatar\" type=\"file\" accept=\"image/*\" onChange={(e) => {\n                          if (e.target.files?.[0]) {\n                              setAvatarPreview(URL.createObjectURL(e.target.files[0]));\n                          }\n                      }} />\n                    </FormControl>\n                    <FormDescription>Upload a new avatar. Max 2MB.</FormDescription>\n                  </FormItem>\n                  \n                  <h3 className=\"pt-4 border-t text-lg font-medium\">Reading Preferences</h3>\n                  \n                  <FormField\n                    control={profileForm.control}\n                    name=\"defaultVoice\"\n                    render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Default Voice</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl><SelectTrigger><SelectValue/></SelectTrigger></FormControl>\n                          <SelectContent>\n                              {Object.entries(groupedVoices).map(([provider, voices]) => (\n                                  <SelectGroup key={provider}>\n                                      <Label className=\"px-2 py-1.5 text-xs font-semibold text-muted-foreground\">{provider.toUpperCase()}</Label>\n                                      {voices.map(v => <SelectItem key={v.name} value={v.name}>{v.displayName} ({v.gender})</SelectItem>)}\n                                  </SelectGroup>\n                              ))}\n                          </SelectContent>\n                      </Select>\n                      <FormDescription>Your default voice for new documents.</FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={profileForm.control}\n                    name=\"defaultSpeakingRate\"\n                    render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Default Speaking Rate: {field.value?.toFixed(2)}x</FormLabel>\n                      <FormControl>\n                          <Slider min={0.25} max={4.0} step={0.25} value={[field.value]} onValueChange={(v) => field.onChange(v[0])} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={profileForm.control}\n                    name=\"defaultZoomLevel\"\n                    render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Default PDF Zoom: {(field.value * 100).toFixed(0)}%</FormLabel>\n                      <FormControl>\n                          <Slider min={0.4} max={3.0} step={0.1} value={[field.value]} onValueChange={(v) => field.onChange(v[0])} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                    )}\n                  />\n\n                <FormField\n                    control={profileForm.control}\n                    name=\"highlightColor\"\n                    render={({ field }) => (\n                        <FormItem>\n                            <FormLabel>Highlight Color</FormLabel>\n                            <FormControl>\n                                <RadioGroup onValueChange={field.onChange} value={field.value} className=\"flex flex-wrap gap-4\">\n                                    {highlightColors.map(color => (\n                                        <FormItem key={color.value} className=\"flex items-center space-x-2\">\n                                            <FormControl>\n                                                <RadioGroupItem value={color.value} id={color.value} />\n                                            </FormControl>\n                                            <Label htmlFor={color.value} className=\"flex items-center gap-2 font-normal\">\n                                                <span className={cn(\"w-4 h-4 rounded-full border\", `bg-${color.value}`)}></span>\n                                                {color.name}\n                                            </Label>\n                                        </FormItem>\n                                    ))}\n                                </RadioGroup>\n                            </FormControl>\n                        </FormItem>\n                    )}\n                />\n                <FormField\n                    control={profileForm.control}\n                    name=\"highlightStyle\"\n                    render={({ field }) => (\n                        <FormItem>\n                            <FormLabel>Highlight Style</FormLabel>\n                             <FormControl>\n                                <RadioGroup onValueChange={field.onChange} value={field.value} className=\"flex gap-4\">\n                                     <FormItem className=\"flex items-center space-x-2\">\n                                        <FormControl><RadioGroupItem value=\"background\" id=\"style-bg\" /></FormControl>\n                                        <Label htmlFor=\"style-bg\" className=\"font-normal\">Background</Label>\n                                    </FormItem>\n                                    <FormItem className=\"flex items-center space-x-2\">\n                                        <FormControl><RadioGroupItem value=\"underline\" id=\"style-ul\" /></FormControl>\n                                        <Label htmlFor=\"style-ul\" className=\"font-normal\">Underline</Label>\n                                    </FormItem>\n                                </RadioGroup>\n                            </FormControl>\n                        </FormItem>\n                    )}\n                />\n\n                </div>\n              </ScrollArea>\n              <DialogFooter className=\"pt-6\">\n                <Button type=\"submit\" disabled={isProfileLoading || !isProfileDirty}>\n                    {isProfileLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                    Save Changes\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </TabsContent>\n        <TabsContent value=\"security\" className=\"py-4\">\n             <Form {...passwordForm}>\n                <form onSubmit={passwordForm.handleSubmit(onPasswordSubmit)} className=\"space-y-6\">\n                    <FormField control={passwordForm.control} name=\"currentPassword\" render={({ field }) => (\n                        <FormItem><FormLabel>Current Password</FormLabel><FormControl><Input type=\"password\" {...field} /></FormControl><FormMessage /></FormItem>\n                    )} />\n                    <FormField control={passwordForm.control} name=\"newPassword\" render={({ field }) => (\n                        <FormItem><FormLabel>New Password</FormLabel><FormControl><Input type=\"password\" {...field} /></FormControl><FormMessage /></FormItem>\n                    )} />\n                    <DialogFooter>\n                      <Button type=\"submit\" disabled={isPasswordLoading}>\n                          {isPasswordLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                          Update Password\n                      </Button>\n                    </DialogFooter>\n                </form>\n            </Form>\n        </TabsContent>\n        <TabsContent value=\"danger\" className=\"py-4\">\n            <p className=\"text-sm text-destructive mb-4\">This action is permanent and cannot be undone.</p>\n            <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\n                <DialogTrigger asChild>\n                    <Button variant=\"destructive\"><Trash2 className=\"mr-2\"/>Delete My Account</Button>\n                </DialogTrigger>\n                <DialogContent>\n                    <DialogHeader>\n                        <DialogTitle>Are you absolutely sure?</DialogTitle>\n                        <DialogDescription>\n                            This will permanently delete your account and all associated data. To confirm, please type your email address (`{session.email}`) and current password below.\n                        </DialogDescription>\n                    </DialogHeader>\n                    <div className=\"space-y-4 py-4\">\n                         <Input \n                            placeholder=\"Enter your email to confirm\"\n                            value={deleteConfirmation}\n                            onChange={(e) => setDeleteConfirmation(e.target.value)}\n                        />\n                        <div className=\"space-y-2 relative\">\n                            <Label htmlFor=\"delete-password\">Enter Your Current Password</Label>\n                            <Input {...passwordForm.register(\"currentPassword\")} id=\"delete-password\" type={showPassword ? 'text' : 'password'} required />\n                            <Button type=\"button\" variant=\"ghost\" size=\"icon\" className=\"absolute bottom-1 right-1 h-7 w-7\" onClick={() => setShowPassword(!showPassword)}>\n                            {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                            </Button>\n                        </div>\n                    </div>\n                    <DialogFooter>\n                        <Button variant=\"ghost\" onClick={() => setIsDeleteDialogOpen(false)}>Cancel</Button>\n                        <Button variant=\"destructive\" onClick={handleDeleteAccount} disabled={isDeleteLoading || deleteConfirmation !== session.email}>\n                            {isDeleteLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\"/>}\n                            I understand, delete my account\n                        </Button>\n                    </DialogFooter>\n                </DialogContent>\n            </Dialog>\n        </TabsContent>\n      </Tabs>\n    </DialogContent>\n  );\n}\n","size_bytes":19744},"src/components/text-to-speech-tab.tsx":{"content":"\n'use client';\n\nimport { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Button } from '@/components/ui/button';\nimport { Download, Loader2, Mic } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ntype TextToSpeechTabProps = {\n  onGenerate: (text: string) => Promise<{ success: boolean; audioUrl?: string; error?: string }>;\n};\n\nexport default function TextToSpeechTab({ onGenerate }: TextToSpeechTabProps) {\n  const [text, setText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [audioUrl, setAudioUrl] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const handleGenerate = async () => {\n    if (!text.trim()) {\n      toast({ variant: 'destructive', title: 'Error', description: 'Please enter some text to generate audio.' });\n      return;\n    }\n    setIsLoading(true);\n    setAudioUrl(null);\n    try {\n      const result = await onGenerate(text);\n      if (result.success && result.audioUrl) {\n        setAudioUrl(result.audioUrl);\n        toast({ title: 'Success', description: 'Audio generated and will play automatically.' });\n      } else {\n        throw new Error(result.error || 'Failed to generate audio.');\n      }\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'An unknown error occurred.';\n      toast({ variant: 'destructive', title: 'Error', description: message });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleDownload = () => {\n    if (!audioUrl) return;\n    const a = document.createElement('a');\n    a.href = audioUrl;\n    a.download = 'speech.mp3';\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n  };\n\n  return (\n    <Card className=\"mt-6 border-0 shadow-none\">\n      <CardHeader className=\"text-center px-0\">\n        <CardTitle className=\"text-2xl font-headline\">Freestyle Text-to-Speech</CardTitle>\n        <CardDescription>Type or paste any text below to convert it into audio.</CardDescription>\n      </CardHeader>\n      <CardContent className=\"px-0\">\n        <div className=\"grid w-full gap-4\">\n          <Textarea\n            placeholder=\"Type your text here...\"\n            rows={10}\n            value={text}\n            onChange={(e) => setText(e.target.value)}\n            disabled={isLoading}\n          />\n          <div className=\"flex gap-2 justify-center\">\n            <Button onClick={handleGenerate} disabled={isLoading || !text.trim()} className=\"w-48\">\n              {isLoading ? <Loader2 className=\"animate-spin\" /> : <Mic />}\n              {isLoading ? 'Generating...' : 'Generate Audio'}\n            </Button>\n            <Button\n              onClick={handleDownload}\n              disabled={!audioUrl || isLoading}\n              variant=\"outline\"\n              className=\"w-48\"\n            >\n              <Download />\n              Download Audio\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3088},"src/components/theme-provider.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { ThemeProvider as NextThemesProvider } from \"next-themes\"\nimport { type ThemeProviderProps } from \"next-themes/dist/types\"\n\nexport function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}\n","size_bytes":327},"src/components/theme-toggle.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Moon, Sun } from \"lucide-react\"\nimport { useTheme } from \"next-themes\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\n\nexport function ThemeToggle() {\n  const { setTheme } = useTheme()\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" size=\"icon\">\n          <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n          <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n          <span className=\"sr-only\">Toggle theme</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem onClick={() => setTheme(\"light\")}>\n          Light\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(\"dark\")}>\n          Dark\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(\"system\")}>\n          System\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n","size_bytes":1235},"src/components/user-panel.tsx":{"content":"\n'use client';\n\nimport React, { useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { Button } from '@/components/ui/button';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Settings, LogOut, User as UserIcon } from 'lucide-react';\nimport { Separator } from '@/components/ui/separator';\nimport { SidebarMenu, SidebarMenuItem, SidebarMenuButton } from '@/components/ui/sidebar';\nimport type { UserSession } from '@/lib/db';\nimport ProfileDialog from './profile-dialog';\nimport { Dialog, DialogTrigger } from './ui/dialog';\n\ntype UserPanelProps = {\n    session: UserSession;\n    onLogout: () => void;\n    onUpdate: () => void;\n};\n\nconst UserPanel: React.FC<UserPanelProps> = ({ session, onLogout, onUpdate }) => {\n    const router = useRouter();\n    const [isProfileOpen, setIsProfileOpen] = useState(false);\n\n    return (\n        <>\n            {session.isAdmin && (\n                <>\n                    <Separator />\n                    <SidebarMenu>\n                    <SidebarMenuItem>\n                        <SidebarMenuButton onClick={() => router.push('/admin')}>\n                            <Settings />\n                            Admin Dashboard\n                        </SidebarMenuButton>\n                    </SidebarMenuItem>\n                    </SidebarMenu>\n                </>\n            )}\n            <Separator />\n            <Dialog open={isProfileOpen} onOpenChange={setIsProfileOpen}>\n                <div className=\"flex items-center gap-3 p-2\">\n                    <DialogTrigger asChild>\n                        <SidebarMenuButton className=\"flex-1 justify-start\">\n                           <UserIcon />\n                           Account\n                        </SidebarMenuButton>\n                    </DialogTrigger>\n                    <Button onClick={onLogout} variant=\"ghost\" size=\"icon\">\n                        <LogOut className=\"h-5 w-5\"/>\n                        <span className=\"sr-only\">Log out</span>\n                    </Button>\n                </div>\n                {isProfileOpen && (\n                    <ProfileDialog \n                        session={session} \n                        onOpenChange={setIsProfileOpen}\n                        onUpdate={() => {\n                            onUpdate(); // Call parent's update function\n                            setIsProfileOpen(false); // Close dialog on success\n                        }}\n                    />\n                )}\n            </Dialog>\n        </>\n    );\n};\n\nexport default UserPanel;\n","size_bytes":2570},"src/hooks/use-media-query.ts":{"content":"\"use client\"\n\nimport * as React from \"react\"\n\nexport function useMediaQuery(query: string) {\n  const [value, setValue] = React.useState(false)\n\n  React.useEffect(() => {\n    function onChange(event: MediaQueryListEvent) {\n      setValue(event.matches)\n    }\n\n    const result = matchMedia(query)\n    result.addEventListener(\"change\", onChange)\n    setValue(result.matches)\n\n    return () => result.removeEventListener(\"change\", onChange)\n  }, [query])\n\n  return value\n}\n","size_bytes":470},"src/hooks/use-read-page.ts":{"content":"\n'use client';\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useToast } from \"@/hooks/use-toast\";\nimport { getAvailableVoices, AvailableVoice } from '@/ai/flows/voice-selection';\nimport { previewSpeech } from '@/ai/flows/preview-speech';\nimport { summarizePdf, SummarizePdfOutput } from '@/ai/flows/summarize-pdf';\nimport { chatWithPdf } from '@/ai/flows/chat-with-pdf';\nimport { generateGlossary, GenerateGlossaryOutput } from '@/ai/flows/glossary-flow';\nimport { generateQuiz, type GenerateQuizOutput } from '@/ai/flows/quiz-flow';\nimport { getDocuments, saveDocument, Document, getUserSession, ChatMessage, deleteDocument, clearChatHistory, UserSession, getFolders, Folder, createFolder, deleteFolder, moveDocumentToFolder } from '@/lib/db';\nimport { AiDialogType } from '@/components/ai-dialog';\nimport { generateQuizFeedback } from '@/ai/flows/quiz-feedback-flow';\nimport { cleanPdfText } from '@/ai/flows/clean-text-flow';\nimport { identifyUnwantedText } from '@/ai/flows/identify-unwanted-text';\nimport { generateSpeech } from '@/ai/flows/generate-speech';\nimport { mergeAudio } from '@/lib/audio-utils';\nimport { checkAmazonVoiceGeneration } from '@/ai/flows/speech-generation/amazon-async';\n\ntype UploadStage = 'idle' | 'uploading' | 'extracting' | 'cleaning' | 'saving' | 'error';\n\nexport type SpeechMark = {\n  time: number;\n  type: 'sentence' | 'word';\n  start: number;\n  end: number;\n  value: string;\n};\n\nexport function useReadPage() {\n    const [activeDoc, setActiveDoc] = useState<Document | null>(null);\n    const [documentText, setDocumentText] = useState('');\n    const [isSpeaking, setIsSpeaking] = useState(false);\n    const [audioProgress, setAudioProgress] = useState(0);\n    const [audioDuration, setAudioDuration] = useState(0);\n    const [audioCurrentTime, setAudioCurrentTime] = useState(0);\n    const [availableVoices, setAvailableVoices] = useState<AvailableVoice[]>([]);\n    const [selectedVoice, setSelectedVoice] = useState('openai/alloy');\n    const [speakingRate, setSpeakingRate] = useState(1);\n    const [playbackRate, setPlaybackRate] = useState(1);\n    const [userDocuments, setUserDocuments] = useState<Document[]>([]);\n    const [userFolders, setUserFolders] = useState<Folder[]>([]);\n    const [isAiDialogOpen, setIsAiDialogOpen] = useState(false);\n    const [aiDialogType, setAiDialogType] = useState<AiDialogType>('summary');\n    const [aiIsLoading, setAiIsLoading] = useState(false);\n    const [aiSummaryOutput, setAiSummaryOutput] = useState<SummarizePdfOutput | null>(null);\n    const [aiQuizOutput, setAiQuizOutput] = useState<GenerateQuizOutput | null>(null);\n    const [aiGlossaryOutput, setAiGlossaryOutput] = useState<GenerateGlossaryOutput | null>(null);\n    const [session, setSession] = useState<UserSession | null>(null);\n    const [isChatOpen, setIsChatOpen] = useState(false);\n    const [isChatLoading, setIsChatLoading] = useState(false);\n    const [uploadStage, setUploadStage] = useState<UploadStage>('idle');\n    const [isUploading, setIsUploading] = useState(false);\n    const [isFullScreen, setIsFullScreen] = useState(false);\n    const [pdfZoomLevel, setPdfZoomLevel] = useState(1);\n    const [isSavingZoom, setIsSavingZoom] = useState(false);\n    const [localAudioUrl, setLocalAudioUrl] = useState<string | null>(null);\n    const [isPreviewAudioPlaying, setIsPreviewAudioPlaying] = useState(false);\n    const [speechMarks, setSpeechMarks] = useState<SpeechMark[] | null>(null);\n    const [highlightedSentence, setHighlightedSentence] = useState<SpeechMark | null>(null);\n    const [highlightColor, setHighlightColor] = useState('highlight-yellow');\n    const [highlightStyle, setHighlightStyle] = useState<'background' | 'underline'>('background');\n\n\n    const { toast } = useToast();\n    const router = useRouter();\n    const audioRef = useRef<HTMLAudioElement | null>(null);\n    const previewAudioRef = useRef<HTMLAudioElement | null>(null);\n    const fileInputRef = useRef<HTMLInputElement | null>(null);\n    const pollerRef = useRef<NodeJS.Timeout | null>(null);\n    const localAudioUrlRef = useRef<string | null>(null);\n    const chatWindowRef = useRef<HTMLDivElement | null>(null);\n    const uploadTargetFolderId = useRef<string | null>(null);\n    \n    const fetchUserDocumentsAndFolders = useCallback(async () => {\n        try {\n          const [docs, folders] = await Promise.all([getDocuments(), getFolders()]);\n          setUserDocuments(docs);\n          setUserFolders(folders);\n\n          // If there's an active document, find its updated version in the new list\n          if (activeDoc) {\n            const updatedActiveDoc = docs.find(d => d.id === activeDoc.id);\n            if (updatedActiveDoc) {\n                setActiveDoc(updatedActiveDoc);\n            } else {\n                // The active doc was deleted, clear it\n                clearActiveDoc();\n            }\n          }\n        } catch (error) {\n          console.error('Failed to fetch data', error);\n          toast({ variant: \"destructive\", title: \"Error\", description: \"Could not load your library.\" });\n        }\n    }, [toast, activeDoc]);\n\n    const fetchSession = useCallback(async () => {\n        const sessionData = await getUserSession();\n        setSession(sessionData);\n        if (sessionData) {\n          setSelectedVoice(sessionData.defaultVoice || 'openai/alloy');\n          setSpeakingRate(sessionData.defaultSpeakingRate || 1);\n          setPlaybackRate(sessionData.defaultSpeakingRate || 1);\n          setPdfZoomLevel(activeDoc?.zoomLevel || sessionData.defaultZoomLevel || 1);\n          setHighlightColor(sessionData.highlightColor || 'highlight-yellow');\n          setHighlightStyle(sessionData.highlightStyle || 'background');\n        }\n    }, [activeDoc]);\n\n    useEffect(() => {\n        fetchSession();\n        fetchUserDocumentsAndFolders();\n        async function fetchVoices() {\n          try {\n            const voices = await getAvailableVoices();\n            setAvailableVoices(voices);\n          } catch (error) {\n            toast({ variant: \"destructive\", title: \"Error\", description: \"Could not fetch available voices.\" });\n          }\n        }\n        fetchVoices();\n        \n        return () => {\n            if (pollerRef.current) clearInterval(pollerRef.current);\n            if (localAudioUrlRef.current) {\n                URL.revokeObjectURL(localAudioUrlRef.current);\n            }\n        }\n\n    }, []);\n\n    useEffect(() => {\n        if (!audioRef.current) return;\n        \n        if (localAudioUrl) {\n            // Autoplay for temporary, newly generated audio\n            const handleAutoplay = async () => {\n                if (!audioRef.current) return;\n                try {\n                    await audioRef.current.play();\n                } catch (e) {\n                    console.error(\"Autoplay failed:\", e);\n                    setIsSpeaking(false);\n                    toast({\n                        variant: \"destructive\",\n                        title: \"Autoplay Blocked\",\n                        description: \"Could not auto-play audio due to browser restrictions. Please press play manually.\"\n                    });\n                }\n            };\n            audioRef.current.src = localAudioUrl;\n            handleAutoplay();\n        } else if (activeDoc?.audioUrl && audioRef.current.src !== activeDoc.audioUrl) {\n            // Load but do NOT autoplay for existing documents\n            audioRef.current.src = activeDoc.audioUrl;\n            audioRef.current.load();\n            setIsSpeaking(false); // Ensure we start in a paused state\n        }\n\n    }, [activeDoc?.audioUrl, localAudioUrl, toast]);\n\n\n    useEffect(() => {\n        // Fetch speech marks when a document is selected\n        const fetchSpeechMarks = async () => {\n            if (activeDoc?.speechMarksUrl) {\n                try {\n                    const response = await fetch(activeDoc.speechMarksUrl);\n                    if (!response.ok) throw new Error('Failed to fetch speech marks');\n                    const marksText = await response.text();\n                    // The file is a series of JSON objects, one per line. We need to parse it.\n                    const marks = marksText.trim().split('\\n').map(line => JSON.parse(line));\n                    setSpeechMarks(marks);\n                } catch (error) {\n                    console.error(\"Error fetching or parsing speech marks:\", error);\n                    setSpeechMarks(null);\n                    toast({\n                        variant: \"destructive\",\n                        title: \"Highlighting Error\",\n                        description: \"Could not load the data needed for text highlighting.\"\n                    });\n                }\n            } else {\n                setSpeechMarks(null);\n                setHighlightedSentence(null);\n            }\n        };\n\n        fetchSpeechMarks();\n    }, [activeDoc, toast]);\n\n\n    const handleLogout = async () => {\n        await fetch('/api/auth/logout', { method: 'POST' });\n        router.push('/login');\n    };\n\n    const clearActiveDoc = () => {\n        setActiveDoc(null);\n        setDocumentText('');\n        setIsChatOpen(false);\n        if (audioRef.current) {\n            audioRef.current.pause();\n            audioRef.current.src = \"\";\n            audioRef.current.removeAttribute('src');\n        }\n        if (localAudioUrlRef.current) {\n          URL.revokeObjectURL(localAudioUrlRef.current);\n          localAudioUrlRef.current = null;\n        }\n        setLocalAudioUrl(null);\n        setAudioDuration(0);\n        setAudioCurrentTime(0);\n        setAudioProgress(0);\n        setSpeechMarks(null);\n        setHighlightedSentence(null);\n        if (pollerRef.current) clearInterval(pollerRef.current);\n    };\n\n    const handleUploadNewDocumentClick = (folderId?: string) => {\n        clearActiveDoc();\n        uploadTargetFolderId.current = folderId || null;\n        if (!activeDoc) {\n             fileInputRef.current?.click();\n        }\n    };\n    \nconst handleGenerateAudioForDoc = useCallback(async (doc: Document) => {\n    if (doc.audioGenerationStatus === 'processing' || !doc.textContent || !doc.id) return;\n    try {\n        await saveDocument({ id: doc.id, audioGenerationStatus: 'processing' });\n        await fetchUserDocumentsAndFolders();\n        toast({ title: \"Starting Audio Generation\", description: \"This may take a few moments...\" });\n\n        const result = await generateSpeech({ \n            text: doc.textContent, \n            voice: selectedVoice, \n            speakingRate: speakingRate, \n            docId: doc.id,\n            fileName: doc.fileName,\n        });\n        \n        if (result.pollyAudioTaskId && result.pollyMarksTaskId) {\n            toast({ title: \"Processing Audio & Timestamps\", description: \"Amazon Polly is working in the background.\" });\n            \n            // Simultaneously identify unwanted text\n            const unwantedTextPromise = identifyUnwantedText({ rawText: doc.textContent });\n\n            // Start polling for both Polly tasks\n            pollerRef.current = setInterval(async () => {\n                try {\n                    const [audioStatus, marksStatus] = await Promise.all([\n                        checkAmazonVoiceGeneration(result.pollyAudioTaskId!),\n                        checkAmazonVoiceGeneration(result.pollyMarksTaskId!)\n                    ]);\n\n                    if (audioStatus.status === 'completed' && marksStatus.status === 'completed') {\n                        if (pollerRef.current) clearInterval(pollerRef.current);\n\n                        const { unwantedText } = await unwantedTextPromise;\n\n                        const finalDoc = await saveDocument({ \n                            id: doc.id!, \n                            audioUrl: audioStatus.outputUrl, \n                            speechMarksUrl: marksStatus.outputUrl,\n                            unwantedText: unwantedText,\n                            audioGenerationStatus: 'completed' \n                        });\n                        \n                        setActiveDoc(finalDoc);\n                        await fetchUserDocumentsAndFolders();\n                        toast({ title: \"Success\", description: \"Audio and timestamps are ready.\" });\n                    } else if (audioStatus.status === 'failed' || marksStatus.status === 'failed') {\n                        if (pollerRef.current) clearInterval(pollerRef.current);\n                        await saveDocument({ id: doc.id!, audioGenerationStatus: 'failed' });\n                        toast({ variant: \"destructive\", title: \"Audio Error\", description: \"Amazon Polly failed to process the request.\" });\n                    }\n                } catch (pollError) {\n                    if (pollerRef.current) clearInterval(pollerRef.current);\n                    await saveDocument({ id: doc.id!, audioGenerationStatus: 'failed' });\n                    toast({ variant: \"destructive\", title: \"Polling Error\", description: \"Could not check audio generation status.\" });\n                }\n            }, 10000); // Poll every 10 seconds\n        } else if (result.audioDataUris && result.audioDataUris.length > 0) {\n            // Handle non-Amazon providers\n            const mergedAudioBlob = await mergeAudio(result.audioDataUris);\n            const audioFileName = `${doc.fileName.replace(/\\.pdf$/i, '') || 'audio'}.mp3`;\n            const uploadAudioResponse = await fetch('/api/upload', {\n                method: 'POST',\n                headers: { 'Content-Type': 'audio/mp3', 'x-vercel-filename': audioFileName, 'x-doc-id': doc.id },\n                body: mergedAudioBlob,\n            });\n            if (!uploadAudioResponse.ok) throw new Error('Audio Upload failed');\n            const audioBlobResult = await uploadAudioResponse.json();\n            \n            const finalDoc = await saveDocument({ id: doc.id, audioUrl: audioBlobResult.url, audioGenerationStatus: 'completed' });\n            setActiveDoc(finalDoc);\n            await fetchUserDocumentsAndFolders();\n            toast({ title: \"Success\", description: \"Audio generated and saved.\" });\n        } else {\n            throw new Error(\"Audio generation resulted in no valid output.\");\n        }\n    } catch (error: any) {\n        console.error('Speech generation error', error);\n        await saveDocument({ id: doc.id!, audioGenerationStatus: 'failed' });\n        toast({ variant: \"destructive\", title: \"Audio Error\", description: `Could not generate audio: ${error.message}` });\n    } finally {\n        await fetchUserDocumentsAndFolders();\n    }\n}, [selectedVoice, speakingRate, toast, fetchUserDocumentsAndFolders]);\n\n    const handleSelectDocument = useCallback(async (doc: Document) => {\n        clearActiveDoc();\n        setActiveDoc(doc);\n        setAiSummaryOutput(null);\n        setAiQuizOutput(null);\n        setAiGlossaryOutput(null);\n        setPdfZoomLevel(doc.zoomLevel);\n        \n        if (!doc.textContent) {\n        console.log(\"Document text is missing, AI tools will be limited.\");\n        setDocumentText(\"\");\n        } else {\n        setDocumentText(doc.textContent);\n        }\n    }, []);\n\n\n    const handlePlayPause = async () => {\n        if (!audioRef.current) return;\n        if (isSpeaking) {\n          audioRef.current.pause();\n        } else if (audioRef.current.src && audioRef.current.src !== window.location.href) { \n          try {\n            await audioRef.current.play();\n          } catch (error) {\n            console.error(\"Error playing audio:\", error);\n            toast({ variant: \"destructive\", title: \"Playback Error\", description: \"Could not play the audio file. It might be invalid or a network issue occurred.\"});\n            setIsSpeaking(false);\n            if (audioRef.current) {\n                audioRef.current.src = '';\n                audioRef.current.removeAttribute('src');\n            }\n          }\n        }\n    };\n    \n    const handleDeleteDocument = async (docId: string | null) => {\n        if (!docId) return;\n        try {\n            const result = await deleteDocument(docId);\n            if (result.success) {\n                toast({ title: \"Success\", description: \"Document deleted successfully.\" });\n                if (activeDoc?.id === docId) clearActiveDoc();\n                fetchUserDocumentsAndFolders();\n            } else {\n                throw new Error(result.message);\n            }\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : \"An unknown error occurred\";\n            toast({ variant: \"destructive\", title: \"Deletion Error\", description: `Could not delete document: ${errorMessage}` });\n        }\n    };\n    \n    const handleAudioTimeUpdate = () => {\n        if (!audioRef.current) return;\n        const currentTimeMs = audioRef.current.currentTime * 1000;\n        setAudioCurrentTime(audioRef.current.currentTime);\n        if (audioDuration > 0) setAudioProgress((audioRef.current.currentTime / audioDuration) * 100);\n\n        if (!speechMarks) return;\n        \n        // Find the current sentence\n        const currentSentence = speechMarks.findLast(\n            (mark): mark is SpeechMark => mark.type === 'sentence' && currentTimeMs >= mark.time\n        );\n        \n        if (currentSentence && currentSentence.value !== highlightedSentence?.value) {\n            setHighlightedSentence(currentSentence);\n\n             // Auto-scroll logic\n            const highlightElement = document.querySelector(`span[data-sentence-id=\"${currentSentence.time}\"]`);\n            if (highlightElement) {\n                highlightElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n            }\n        }\n    };\n    \n    const handlePreviewVoice = async (voice: string) => {\n        try {\n          if (previewAudioRef.current?.src && !previewAudioRef.current.paused) {\n            previewAudioRef.current.pause();\n            return;\n          }\n          const result = await previewSpeech({ voice: voice });\n          if (result.audioDataUri && previewAudioRef.current) {\n            previewAudioRef.current.src = result.audioDataUri;\n            previewAudioRef.current.play();\n          }\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : \"An unknown error occurred\";\n          toast({ variant: \"destructive\", title: \"Audio Error\", description: `Could not preview voice: ${errorMessage}` });\n        }\n    };\n\n    const handlePlayAiResponse = async (text: string) => {\n        if (previewAudioRef.current?.src && !previewAudioRef.current.paused) {\n            previewAudioRef.current.pause();\n            return;\n        }\n        try {\n          const result = await generateSpeech({ text, voice: selectedVoice, speakingRate: speakingRate });\n          if (!result.audioDataUris) throw new Error(\"No audio data returned\");\n          const mergedAudioBlob = await mergeAudio(result.audioDataUris);\n          const audioUrl = URL.createObjectURL(mergedAudioBlob);\n          if (previewAudioRef.current) {\n              previewAudioRef.current.src = audioUrl;\n              previewAudioRef.current.play();\n              previewAudioRef.current.onended = () => {\n                  URL.revokeObjectURL(audioUrl);\n                  setIsPreviewAudioPlaying(false);\n              };\n              previewAudioRef.current.onplay = () => setIsPreviewAudioPlaying(true);\n              previewAudioRef.current.onpause = () => setIsPreviewAudioPlaying(false);\n          }\n        } catch (error) {\n          const errorMessage = error instanceof Error ? 'An unknown error occurred' : 'An unknown error occurred';\n          toast({ variant: \"destructive\", title: \"Audio Error\", description: `Could not play response: ${errorMessage}` });\n        }\n    };\n    \n    const handleGenerateTextAudio = async (text: string) => {\n      try {\n        const result = await generateSpeech({ text, voice: selectedVoice, speakingRate: speakingRate });\n        if (!result.audioDataUris) throw new Error(\"No audio data returned\");\n        const mergedAudioBlob = await mergeAudio(result.audioDataUris);\n        if (localAudioUrlRef.current) {\n          URL.revokeObjectURL(localAudioUrlRef.current);\n        }\n        const newLocalUrl = URL.createObjectURL(mergedAudioBlob);\n        localAudioUrlRef.current = newLocalUrl;\n        setLocalAudioUrl(newLocalUrl);\n        return { success: true, audioUrl: newLocalUrl };\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'An unknown error occurred';\n        console.error('Error generating text audio:', message);\n        return { success: false, error: message };\n      }\n    };\n\n    useEffect(() => {\n        if(audioRef.current) audioRef.current.playbackRate = playbackRate;\n    }, [playbackRate]);\n\n    const handleSeek = (value: number) => {\n        if (audioRef.current) {\n          audioRef.current.currentTime = value;\n          setAudioCurrentTime(value);\n        }\n    };\n    const handleForward = () => {\n        if (audioRef.current && audioRef.current.duration > 0) handleSeek(Math.min(audioRef.current.currentTime + 10, audioRef.current.duration));\n    };\n    const handleRewind = () => {\n        if (audioRef.current && audioRef.current.duration > 0) handleSeek(Math.max(audioRef.current.currentTime - 10, 0));\n    };\n    \n    const handleAiAction = async (type: AiDialogType) => {\n        if (!documentText) {\n            toast({ variant: 'destructive', title: 'No Text', description: 'Please select a document with text content to use AI tools.' });\n            return;\n        }\n        setAiDialogType(type);\n        setIsAiDialogOpen(true);\n        setAiIsLoading(true);\n        setAiSummaryOutput(null);\n        setAiQuizOutput(null);\n        setAiGlossaryOutput(null);\n    \n        try {\n          if (type === 'summary' || type === 'key-points') {\n            const result = await summarizePdf({ pdfText: documentText });\n            setAiSummaryOutput(result);\n          } else if (type === 'glossary') {\n              const result = await generateGlossary({ documentText });\n              setAiGlossaryOutput(result);\n          } else if (type === 'quiz') {\n              if (activeDoc?.quizAttempt) {\n                setAiQuizOutput({ quiz: activeDoc.quizAttempt.questions });\n              } else {\n                const result = await generateQuiz({ documentText });\n                setAiQuizOutput(result);\n              }\n          }\n        } catch (error) {\n          console.error(`AI Error (${type}):`, error);\n          toast({ variant: \"destructive\", title: \"AI Error\", description: `Could not perform AI action: ${type}.` });\n        } finally {\n          setAiIsLoading(false);\n        }\n    };\n    \n    const handleQuizSubmit = async (questions: any[], answers: Record<number, string>) => {\n        if (!activeDoc || !activeDoc.id) return;\n        \n        let correctCount = 0;\n        const failedQuestions: any[] = [];\n        questions.forEach((q, index) => {\n            if(q.answer === answers[index]) correctCount++;\n            else failedQuestions.push({ question: q.question, userAnswer: answers[index] || \"Not answered\", correctAnswer: q.answer });\n        });\n        const score = (correctCount / questions.length) * 100;\n        let feedback = 'Great job! You got all the questions right!';\n        if(failedQuestions.length > 0) {\n            toast({ title: \"Generating Feedback\", description: \"Analyzing your answers...\" });\n            const feedbackResult = await generateQuizFeedback({ documentText, failedQuestions });\n            feedback = feedbackResult.feedback;\n        }\n        const quizAttempt = { questions, answers, score, suggestions: feedback, completedAt: new Date().toISOString() };\n        const updatedDoc = await saveDocument({ id: activeDoc.id, quizAttempt });\n        setActiveDoc(updatedDoc);\n        toast({ title: `Quiz Complete! Score: ${score.toFixed(0)}%`, description: \"You can review your results and suggestions.\" });\n    };\n\n    const handleSendMessage = async (message: string) => {\n        if(!activeDoc || !activeDoc.id || !documentText) return;\n        const userMessage: ChatMessage = { id: crypto.randomUUID(), role: 'user', content: message, createdAt: new Date().toISOString() };\n        const updatedHistory = [...(activeDoc.chatHistory || []), userMessage];\n        setActiveDoc(prev => prev ? {...prev, chatHistory: updatedHistory} : null);\n        setIsChatLoading(true);\n        try {\n            const result = await chatWithPdf({ pdfText: documentText, question: message, chatHistory: updatedHistory.slice(-10) });\n            const assistantMessage: ChatMessage = { id: crypto.randomUUID(), role: 'assistant', content: result.answer, createdAt: new Date().toISOString() };\n            const finalHistory = [...updatedHistory, assistantMessage];\n            const updatedDoc = await saveDocument({ id: activeDoc.id, chatHistory: finalHistory });\n            setActiveDoc(updatedDoc);\n        } catch (error) {\n            toast({ variant: \"destructive\", title: \"Chat Error\", description: \"Could not get an answer.\" });\n            setActiveDoc(prev => prev ? {...prev, chatHistory: updatedHistory} : null);\n        } finally {\n            setIsChatLoading(false);\n        }\n    };\n    \n    const handleClearChat = async () => {\n        if (!activeDoc || !activeDoc.id) return;\n        try {\n            const updatedDoc = await clearChatHistory(activeDoc.id);\n            setActiveDoc(updatedDoc);\n            toast({ title: \"Success\", description: \"Chat history has been cleared.\" });\n        } catch (error) {\n            const message = error instanceof Error ? error.message : \"Could not clear chat history.\";\n            toast({ variant: \"destructive\", title: \"Error\", description: message });\n        }\n    };\n\n    const handleFileChange = (files: FileList | null) => {\n        if (files && files[0]) handleFileUpload(files[0]);\n    };\n    \n    const handleFileUpload = async (file: File) => {\n        if (!file.type.includes('pdf')) {\n          toast({ variant: \"destructive\", title: \"Invalid File Type\", description: \"Please upload a PDF file.\" });\n          return;\n        }\n        setIsUploading(true);\n        setUploadStage('uploading');\n        try {\n            if (typeof window === 'undefined' || !(window as any).pdfjsLib) {\n                toast({ variant: \"destructive\", title: \"Library not ready\", description: \"PDF processing library is not loaded yet. Please try again in a moment.\" });\n                setUploadStage('error');\n                setIsUploading(false);\n                return;\n            }\n            const uploadResponse = await fetch('/api/upload', { method: 'POST', headers: { 'x-vercel-filename': file.name }, body: file });\n            if (!uploadResponse.ok) throw new Error('Failed to upload file.');\n            const blob = await uploadResponse.json();\n            setUploadStage('extracting');\n            (window as any).pdfjsLib.GlobalWorkerOptions.workerSrc = '/static/pdf.worker.min.js';\n            const pdf = await (window as any).pdfjsLib.getDocument(blob.url).promise;\n            \n            let rawText = '';\n            const pageCharacterOffsets: number[] = [0]; // Start with 0 for the first page\n            let runningOffset = 0;\n\n            for (let i = 1; i <= pdf.numPages; i++) {\n                const page = await pdf.getPage(i);\n                const textContent = await page.getTextContent();\n                const pageText = textContent.items.map((item: any) => item.str).join(' ');\n                rawText += pageText + ' ';\n                runningOffset += pageText.length + 1;\n                if (i < pdf.numPages) {\n                    pageCharacterOffsets.push(runningOffset);\n                }\n            }\n\n            setUploadStage('saving');\n            const newDoc = await saveDocument({ \n                fileName: file.name, \n                pdfUrl: blob.url, \n                textContent: rawText,\n                pageCharacterOffsets,\n                zoomLevel: 1,\n                folderId: uploadTargetFolderId.current || null\n            });\n            uploadTargetFolderId.current = null; // Reset after use\n            await fetchUserDocumentsAndFolders();\n            handleSelectDocument(newDoc);\n            toast({ title: \"Success\", description: \"Your document has been prepared.\" });\n        } catch (error) {\n            setUploadStage('error');\n            console.error(\"File upload process failed:\", error);\n            const message = error instanceof Error ? error.message : \"An unknown error occurred during upload.\";\n            toast({ variant: \"destructive\", title: \"Upload Failed\", description: message });\n        } finally {\n            setIsUploading(false);\n            setUploadStage('idle');\n            setDocumentText(''); // Clear any old text\n        }\n    };\n\n    const handleZoomIn = () => setPdfZoomLevel(Math.min(pdfZoomLevel + 0.2, 3));\n    const handleZoomOut = () => setPdfZoomLevel(Math.max(pdfZoomLevel - 0.2, 0.4));\n    const handleSaveZoom = async () => {\n      if (!activeDoc) return;\n      setIsSavingZoom(true);\n      try {\n          await saveDocument({ id: activeDoc.id, zoomLevel: pdfZoomLevel });\n          await fetchUserDocumentsAndFolders();\n          toast({ title: 'Zoom level saved' });\n      } catch (e) {\n          toast({ variant: 'destructive', title: 'Error', description: 'Could not save zoom level.'});\n      } finally {\n          setIsSavingZoom(false);\n      }\n    };\n\n    // Folder actions\n    const handleCreateFolder = async (name: string) => {\n        await createFolder(name);\n        await fetchUserDocumentsAndFolders();\n    };\n\n    const handleDeleteFolder = async (folderId: string) => {\n        await deleteFolder(folderId);\n        await fetchUserDocumentsAndFolders();\n    };\n    \n    const handleMoveDocument = async (docId: string, folderId: string | null) => {\n        await moveDocumentToFolder(docId, folderId);\n        await fetchUserDocumentsAndFolders();\n    };\n\n    return {\n        activeDoc, setActiveDoc, documentText, setDocumentText,\n        isSpeaking, setIsSpeaking, audioProgress, setAudioProgress, audioDuration, setAudioDuration, audioCurrentTime, setAudioCurrentTime,\n        availableVoices, setAvailableVoices, selectedVoice, setSelectedVoice, speakingRate, setSpeakingRate, playbackRate, setPlaybackRate,\n        userDocuments, setUserDocuments, userFolders, isAiDialogOpen, setIsAiDialogOpen, aiDialogType, setAiDialogType, aiIsLoading, setAiIsLoading,\n        aiSummaryOutput, setAiSummaryOutput, aiQuizOutput, setAiQuizOutput, aiGlossaryOutput, setAiGlossaryOutput, session, setSession,\n        isChatOpen, setIsChatOpen, isChatLoading, setIsChatLoading, uploadStage, setUploadStage,\n        isUploading, setIsUploading, isFullScreen, setIsFullScreen, pdfZoomLevel, setPdfZoomLevel, isSavingZoom, setIsSavingZoom, localAudioUrl,\n        toast, audioRef, previewAudioRef, localAudioUrlRef, router, chatWindowRef, fileInputRef, isPreviewAudioPlaying,\n        fetchSession, fetchUserDocumentsAndFolders, handleLogout, clearActiveDoc, handleUploadNewDocumentClick, handleSelectDocument, handleGenerateAudioForDoc,\n        handlePlayPause, handleDeleteDocument, handleAudioTimeUpdate, handlePreviewVoice, handlePlayAiResponse,\n        handleSeek, handleForward, handleRewind, handleAiAction, handleQuizSubmit, handleSendMessage, handleClearChat,\n        handleFileChange, handleFileUpload, handleZoomIn, handleZoomOut, handleSaveZoom, handleGenerateTextAudio,\n        handleCreateFolder, handleDeleteFolder, handleMoveDocument,\n        highlightedSentence,\n        highlightColor,\n        highlightStyle,\n    };\n}\n","size_bytes":31750},"src/hooks/use-toast.ts":{"content":"\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3948},"src/lib/actions.ts":{"content":"\n'use server';\n\nimport { kv } from '@vercel/kv';\nimport { revalidatePath } from 'next/cache';\nimport { getSession, createSession } from './session';\nimport type { User, Submission } from './db';\nimport bcrypt from 'bcrypt';\nimport { z } from 'zod';\nimport { sendContactFormEmail, sendGeneralEmail } from './email';\nimport { randomUUID } from 'crypto';\n\nconst SetupAccountSchema = z.object({\n  username: z.string()\n    .min(3, 'Username must be at least 3 characters.')\n    .max(20, 'Username cannot be longer than 20 characters.')\n    .regex(/^[a-z0-9_.]+$/, 'Username can only contain lowercase letters, numbers, underscores, and periods.'),\n  password: z.string().min(8, 'Password must be at least 8 characters.'),\n  token: z.string().uuid('Invalid token format.')\n});\n\nexport async function setupAccount(formData: z.infer<typeof SetupAccountSchema>): Promise<{ success: boolean; message?: string }> {\n    const validation = SetupAccountSchema.safeParse(formData);\n\n    if(!validation.success) {\n        return { success: false, message: validation.error.errors.map(e => e.message).join(', ') };\n    }\n\n    const { username, password, token } = validation.data;\n\n    try {\n        const userId: string | null = await kv.get(`readify:setup-token:${token}`);\n\n        if (!userId) {\n            return { success: false, message: 'Invalid or expired setup link. Please ask an admin to resend the invitation.' };\n        }\n        \n        const userToUpdate: User | null = await kv.get(`readify:user:id:${userId}`);\n        if (!userToUpdate || userToUpdate.setupToken !== token || !userToUpdate.setupTokenExpiry || new Date(userToUpdate.setupTokenExpiry) < new Date()) {\n            return { success: false, message: 'Invalid or expired setup link.' };\n        }\n\n        const existingUserByUsername: User | null = await kv.get(`readify:user:username:${username}`);\n        if (existingUserByUsername) {\n            return { success: false, message: 'Username is already taken.' };\n        }\n\n        const hashedPassword = await bcrypt.hash(password, 10);\n\n        const updatedUser: User = {\n            ...userToUpdate,\n            username,\n            password: hashedPassword,\n            setupToken: null, // Invalidate the token\n            setupTokenExpiry: null,\n        };\n        \n        const pipeline = kv.pipeline();\n        pipeline.set(`readify:user:id:${updatedUser.id}`, updatedUser);\n        pipeline.set(`readify:user:email:${updatedUser.email}`, updatedUser);\n        pipeline.set(`readify:user:username:${username}`, updatedUser);\n        pipeline.del(`readify:setup-token:${token}`);\n        \n        await pipeline.exec();\n        \n        await createSession(updatedUser.id, updatedUser.isAdmin, updatedUser.username);\n\n        revalidatePath('/read');\n        return { success: true };\n    } catch(error) {\n        const message = error instanceof Error ? error.message : 'An unexpected error occurred.';\n        console.error('Failed to set up account:', message);\n        return { success: false, message };\n    }\n}\n\n\nexport async function setUsername(username: string): Promise<{ success: boolean; message?: string }> {\n  const session = await getSession();\n  if (!session?.userId) {\n    return { success: false, message: 'Authentication required.' };\n  }\n\n  // Validate username format again on the server\n  if (!/^[a-z0-9_.]+$/.test(username) || username.length < 3 || username.length > 20) {\n    return { success: false, message: 'Invalid username format.' };\n  }\n\n  try {\n    const user: User | null = await kv.get(`readify:user:id:${session.userId}`);\n    if (!user) {\n      return { success: false, message: 'User not found.' };\n    }\n    if (user.username) {\n      return { success: false, message: 'Username is already set and cannot be changed.' };\n    }\n\n    // Check for username uniqueness\n    const existingUserByUsername: User | null = await kv.get(`readify:user:username:${username}`);\n    if (existingUserByUsername) {\n      return { success: false, message: 'Username is already taken.' };\n    }\n\n    const updatedUser: User = { ...user, username };\n\n    const pipeline = kv.pipeline();\n    pipeline.set(`readify:user:id:${user.id}`, updatedUser);\n    pipeline.set(`readify:user:email:${user.email}`, updatedUser);\n    pipeline.set(`readify:user:username:${username}`, updatedUser);\n    await pipeline.exec();\n    \n    // Re-create session with the new username\n    await createSession(user.id, user.isAdmin, updatedUser.username);\n    \n    revalidatePath('/read');\n\n    return { success: true };\n  } catch (error) {\n    const message = error instanceof Error ? error.message : 'An unexpected error occurred.';\n    console.error('Failed to set username:', message);\n    return { success: false, message };\n  }\n}\n\nconst contactFormSchema = z.object({\n  name: z.string().min(2),\n  email: z.string().email(),\n  message: z.string().min(10),\n});\n\nasync function saveSubmission(\n    type: 'Access Request' | 'General Inquiry',\n    data: { name: string, email: string, message: string }\n): Promise<Submission> {\n    const submission: Submission = {\n        id: randomUUID(),\n        type,\n        status: 'Pending',\n        ...data,\n        createdAt: new Date().toISOString(),\n    };\n    await kv.set(`readify:submission:${submission.id}`, submission);\n    await kv.lpush('readify:submissions', submission.id);\n    return submission;\n}\n\n\nexport async function sendContactMessage(formData: { name: string; email: string; message: string; }): Promise<{ success: boolean; message?: string }> {\n  const validation = contactFormSchema.safeParse(formData);\n\n  if (!validation.success) {\n    return { success: false, message: validation.error.errors.map(e => e.message).join(', ') };\n  }\n\n  const { name, email, message } = validation.data;\n  const appUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';\n  \n  try {\n    const submission = await saveSubmission('Access Request', { name, email, message });\n    \n    const rejectionToken = randomUUID();\n    await kv.set(`readify:rejection-token:${rejectionToken}`, submission.id, { ex: 7 * 24 * 60 * 60 });\n    \n    const approveUrl = `${appUrl}/admin?action=addUser&name=${encodeURIComponent(name)}&email=${encodeURIComponent(email)}&submissionId=${submission.id}`;\n    const rejectUrl = `${appUrl}/api/reject-request?token=${rejectionToken}`;\n\n    await sendContactFormEmail({ name, email, message, approveUrl, rejectUrl });\n\n    return { success: true };\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'An unexpected error occurred.';\n    console.error('Failed to send contact message:', errorMessage);\n    return { success: false, message: errorMessage };\n  }\n}\n\nexport async function sendGeneralContactMessage(formData: { name: string; email: string; message: string; }): Promise<{ success: boolean; message?: string }> {\n  const validation = contactFormSchema.safeParse(formData);\n\n  if (!validation.success) {\n    return { success: false, message: validation.error.errors.map(e => e.message).join(', ') };\n  }\n  \n  const { name, email, message } = validation.data;\n\n  try {\n    await saveSubmission('General Inquiry', { name, email, message });\n    await sendGeneralEmail({ name, email, message });\n    return { success: true };\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'An unexpected error occurred.';\n    console.error('Failed to send general contact message:', errorMessage);\n    return { success: false, message: errorMessage };\n  }\n}\n","size_bytes":7527},"src/lib/admin-actions.ts":{"content":"\n'use server';\n\nimport { kv } from '@vercel/kv';\nimport { getSession } from './session';\nimport type { User as DbUser, Document as DbDocument, Submission } from './db';\nimport { randomUUID } from 'crypto';\nimport { deleteDocument as dbDeleteDocument } from './db';\nimport { sendWelcomeEmail, sendAdminReplyEmail, sendRejectionEmail } from './email';\nimport { revalidatePath } from 'next/cache';\n\nexport interface Document extends DbDocument {}\nexport interface AdminSubmission extends Submission {}\n\nexport interface DocumentWithAuthorEmail extends Document {\n    ownerEmail: string;\n}\n\n// Re-export User type from db to ensure consistency\nexport type User = DbUser;\n\nexport interface AdminDashboardStats {\n    totalUsers: number;\n    totalDocuments: number;\n    newUsersLast30Days: number;\n    docsUploadedLast30Days: number;\n    userSignupsByWeek: { week: string; signups: number }[];\n    topUsersByDocs: { id: string; email: string; docCount: number }[];\n}\n\n\nasync function checkAdmin() {\n  const session = await getSession();\n  if (!session?.isAdmin) {\n    throw new Error('Unauthorized: Admin access required.');\n  }\n  return session;\n}\n\nexport async function getAllUsers(): Promise<User[]> {\n  await checkAdmin();\n  const userKeys = await kv.keys('readify:user:id:*');\n  if (userKeys.length === 0) return [];\n  \n  if(!userKeys.length) return [];\n  const users = await kv.mget<User[]>(...userKeys);\n\n  return users\n    .filter((u): u is User => u !== null)\n    .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n}\n\nexport async function getAllDocuments(): Promise<DocumentWithAuthorEmail[]> {\n    await checkAdmin();\n\n    const users = await getAllUsers();\n    const userEmailMap = new Map(users.map(u => [u.id, u.email]));\n\n    const allUserKeys = await kv.keys('readify:user:id:*');\n    if (allUserKeys.length === 0) {\n        return [];\n    }\n\n    const userIds = allUserKeys.map(key => key.replace('readify:user:id:', ''));\n    \n    if (userIds.length === 0) {\n        return [];\n    }\n    \n    const pipeline = kv.pipeline();\n    userIds.forEach(userId => pipeline.lrange(`readify:user:${userId}:docs`, 0, -1));\n    const allDocIdLists = await pipeline.exec() as string[][];\n    \n    const allDocIds = allDocIdLists.flat();\n\n    const uniqueDocIds = [...new Set(allDocIds.filter(id => id))];\n\n    if (uniqueDocIds.length === 0) {\n        return [];\n    }\n    \n    const docKeys = uniqueDocIds.map(id => `readify:doc:${id}`);\n    const allDocs = await kv.mget<Document[]>(...docKeys);\n    \n    const validDocs = allDocs.filter((d): d is Document => d !== null);\n\n    const docsWithAuthorEmail = validDocs.map(doc => ({\n        ...doc,\n        ownerEmail: userEmailMap.get(doc.userId) || 'Unknown User'\n    }));\n\n    return docsWithAuthorEmail.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n}\n\n\nexport async function deleteUser(userId: string): Promise<{ success: boolean; message?: string }> {\n  await checkAdmin();\n  \n  try {\n    const user: User | null = await kv.get(`readify:user:id:${userId}`);\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    if (user.isAdmin) {\n      throw new Error('Cannot delete an admin user.');\n    }\n\n    const pipeline = kv.pipeline();\n    const docListKey = `readify:user:${userId}:docs`;\n    const docIds: string[] | null = await kv.lrange(docListKey, 0, -1);\n    \n    if (docIds && docIds.length > 0) {\n      const validDocIds = docIds.filter(id => id);\n      if (validDocIds.length > 0) {\n        const docKeysToDelete = validDocIds.map(id => `readify:doc:${id}`);\n        pipeline.del(...docKeysToDelete);\n      }\n    }\n    \n    pipeline.del(docListKey);\n    pipeline.del(`readify:user:id:${userId}`);\n    if (user.username) {\n        pipeline.del(`readify:user:username:${user.username}`);\n    }\n    pipeline.del(`readify:user:email:${user.email}`);\n\n    await pipeline.exec();\n\n    return { success: true };\n  } catch (error) {\n    const message = error instanceof Error ? error.message : 'An unknown error occurred';\n    console.error('Failed to delete user:', message);\n    return { success: false, message };\n  }\n}\n\nexport async function createUser(userData: {\n    name: string;\n    email: string;\n    role: 'Admin' | 'User';\n}, submissionId?: string): Promise<{ success: boolean, message?: string }> {\n    await checkAdmin();\n\n    try {\n        const { name, email, role } = userData;\n\n        const existingUserByEmail: User | null = await kv.get(`readify:user:email:${email}`);\n        if (existingUserByEmail) {\n            return { success: false, message: 'User with this email already exists.' };\n        }\n        \n        const setupToken = randomUUID();\n        const setupTokenExpiry = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours\n\n        const userId = randomUUID();\n        const newUser: User = {\n            id: userId,\n            name,\n            email,\n            username: null,\n            password: '', // Password will be set by the user\n            isAdmin: role === 'Admin',\n            createdAt: new Date().toISOString(),\n            setupToken,\n            setupTokenExpiry: setupTokenExpiry.toISOString(),\n        };\n\n        const pipeline = kv.pipeline();\n        pipeline.set(`readify:user:email:${email}`, newUser);\n        pipeline.set(`readify:user:id:${userId}`, newUser);\n        pipeline.set(`readify:setup-token:${setupToken}`, userId, { ex: 24 * 60 * 60 });\n        \n        if (submissionId) {\n            const submission: Submission | null = await kv.get(`readify:submission:${submissionId}`);\n            if (submission) {\n                submission.status = 'Approved';\n                pipeline.set(`readify:submission:${submissionId}`, submission);\n            }\n        }\n        \n        await pipeline.exec();\n        \n        const appUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';\n        const setupLink = `${appUrl}/setup-account/${setupToken}`;\n        await sendWelcomeEmail(email, name, setupLink);\n\n        return { success: true };\n    } catch (error) {\n        const message = error instanceof Error ? error.message : 'An unknown error occurred';\n        console.error('Failed to create user:', message);\n        return { success: false, message };\n    }\n}\n\n\nexport async function deleteDocumentAsAdmin(docId: string): Promise<{ success: boolean; message?: string }> {\n    await checkAdmin();\n    try {\n        const result = await dbDeleteDocument(docId);\n        if (result.success) {\n             return { success: true };\n        }\n        return { success: false, message: 'Document not found.'};\n\n    } catch (error) {\n        const message = error instanceof Error ? error.message : 'An unknown error occurred';\n        console.error('Failed to delete document as admin:', message);\n        return { success: false, message };\n    }\n}\n\nexport async function getAdminDashboardStats(): Promise<AdminDashboardStats> {\n    await checkAdmin();\n    const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n    const users = await getAllUsers();\n    \n    // Fetch documents from both environments\n    const allDocs = await getAllDocuments();\n\n    const newUsersLast30Days = users.filter(u => new Date(u.createdAt) > thirtyDaysAgo).length;\n    const docsUploadedLast30Days = allDocs.filter(d => new Date(d.createdAt) > thirtyDaysAgo).length;\n\n    // User signups by week\n    const userSignupsByWeek: { [week: string]: number } = {};\n    users.forEach(user => {\n        const date = new Date(user.createdAt);\n        const year = date.getUTCFullYear();\n        const week = Math.ceil((((date.getTime() - new Date(year, 0, 1).getTime()) / 86400000) + 1) / 7);\n        const weekKey = `${year}-W${week.toString().padStart(2, '0')}`;\n        userSignupsByWeek[weekKey] = (userSignupsByWeek[weekKey] || 0) + 1;\n    });\n\n    const sortedWeeks = Object.keys(userSignupsByWeek).sort().slice(-8); // Get last 8 weeks\n    const formattedSignups = sortedWeeks.map(week => ({ week, signups: userSignupsByWeek[week] }));\n\n    // Top users by doc count\n    const docCounts: { [userId: string]: number } = {};\n    allDocs.forEach(doc => {\n        docCounts[doc.userId] = (docCounts[doc.userId] || 0) + 1;\n    });\n    \n    const topUsers = Object.entries(docCounts)\n        .sort(([, countA], [, countB]) => countB - countA)\n        .slice(0, 5)\n        .map(([userId, docCount]) => {\n            const user = users.find(u => u.id === userId);\n            return {\n                id: userId,\n                email: user?.email || 'Unknown User',\n                docCount,\n            };\n        });\n\n    return {\n        totalUsers: users.length,\n        totalDocuments: allDocs.length,\n        newUsersLast30Days,\n        docsUploadedLast30Days,\n        userSignupsByWeek: formattedSignups,\n        topUsersByDocs: topUsers,\n    };\n}\n\nexport async function resendInvitation(userId: string): Promise<{success: boolean, message?: string}> {\n    await checkAdmin();\n    try {\n        const user: User | null = await kv.get(`readify:user:id:${userId}`);\n        if (!user) {\n            return { success: false, message: 'User not found.' };\n        }\n        if (user.username) {\n            return { success: false, message: 'User account is already active.' };\n        }\n\n        const setupToken = randomUUID();\n        const setupTokenExpiry = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours\n\n        const updatedUser: User = {\n            ...user,\n            setupToken,\n            setupTokenExpiry: setupTokenExpiry.toISOString(),\n        };\n\n        const pipeline = kv.pipeline();\n        pipeline.set(`readify:user:id:${userId}`, updatedUser);\n        pipeline.set(`readify:user:email:${user.email}`, updatedUser);\n        pipeline.set(`readify:setup-token:${setupToken}`, userId, { ex: 24 * 60 * 60 });\n        await pipeline.exec();\n\n        const appUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';\n        const setupLink = `${appUrl}/setup-account/${setupToken}`;\n        await sendWelcomeEmail(user.email, user.name, setupLink);\n\n        return { success: true };\n    } catch (error) {\n        const message = error instanceof Error ? error.message : 'An unknown error occurred';\n        console.error('Failed to resend invitation:', message);\n        return { success: false, message };\n    }\n}\n\nexport async function getSubmissions(): Promise<Submission[]> {\n    await checkAdmin();\n    const submissionIds = await kv.lrange('readify:submissions', 0, -1);\n    if (!submissionIds || submissionIds.length === 0) return [];\n    \n    const submissions = await kv.mget<Submission[]>(...submissionIds.map(id => `readify:submission:${id}`));\n    return submissions.filter((s): s is Submission => s !== null)\n        .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n}\n\nexport async function sendReply(submissionId: string, replyMessage: string): Promise<{ success: boolean; message?: string }> {\n    const session = await checkAdmin();\n\n    try {\n        const submission: Submission | null = await kv.get(`readify:submission:${submissionId}`);\n        if (!submission) {\n            throw new Error('Submission not found.');\n        }\n\n        await sendAdminReplyEmail({\n            to: submission.email,\n            fromName: session.name,\n            originalMessage: submission.message,\n            replyMessage,\n        });\n\n        submission.status = 'Replied';\n        await kv.set(`readify:submission:${submissionId}`, submission);\n        \n        return { success: true };\n    } catch (error) {\n        const message = error instanceof Error ? error.message : 'An unknown error occurred';\n        console.error('Failed to send reply:', message);\n        return { success: false, message };\n    }\n}\n\nexport async function updateSubmissionStatus(submissionId: string, status: 'Approved' | 'Rejected' | 'Pending' | 'Replied'): Promise<{ success: boolean; message?: string }> {\n    // This function can be called by non-admins (e.g., via the rejection link), so no checkAdmin() here for that case.\n    // It's safe because it only updates the status.\n    try {\n        const submission: Submission | null = await kv.get(`readify:submission:${submissionId}`);\n        if (!submission) {\n            throw new Error('Submission not found.');\n        }\n        submission.status = status;\n        await kv.set(`readify:submission:${submissionId}`, submission);\n        return { success: true };\n    } catch(error) {\n        const message = error instanceof Error ? error.message : 'An unexpected error occurred';\n        console.error(`Failed to update status for ${submissionId}:`, message);\n        return { success: false, message };\n    }\n}\n\nexport async function rejectSubmission(submissionId: string): Promise<{ success: boolean; message?: string }> {\n    await checkAdmin();\n    const submission: Submission | null = await kv.get(`readify:submission:${submissionId}`);\n    if (!submission) {\n        return { success: false, message: 'Submission not found.' };\n    }\n\n    await sendRejectionEmail(submission.email);\n    return await updateSubmissionStatus(submissionId, 'Rejected');\n}\n\nexport async function deleteSubmission(submissionId: string): Promise<{ success: boolean; message?: string }> {\n    await checkAdmin();\n    try {\n        const pipeline = kv.pipeline();\n        pipeline.del(`readify:submission:${submissionId}`);\n        pipeline.lrem('readify:submissions', 1, submissionId);\n        await pipeline.exec();\n        return { success: true };\n    } catch (error) {\n        const message = error instanceof Error ? error.message : 'An unknown error occurred';\n        console.error(`Failed to delete submission ${submissionId}:`, message);\n        return { success: false, message };\n    }\n}\n\n// Settings Actions\nconst VOICE_SETTINGS_KEY = 'readify:settings:voice-providers';\nexport type VoiceProviderSettings = Record<string, boolean>;\n\nexport async function getVoiceProviderSettings(): Promise<VoiceProviderSettings> {\n    // No admin check here, so the main app can read the settings\n    const settings = await kv.get<VoiceProviderSettings>(VOICE_SETTINGS_KEY);\n    return settings || {};\n}\n\nexport async function saveVoiceProviderSettings(settings: VoiceProviderSettings): Promise<{ success: boolean; message?: string }> {\n    await checkAdmin();\n    try {\n        await kv.set(VOICE_SETTINGS_KEY, settings);\n        revalidatePath('/read'); // Ensure users get updated voice list\n        return { success: true };\n    } catch (error) {\n        const message = error instanceof Error ? error.message : 'An unknown error occurred';\n        console.error('Failed to save voice provider settings:', message);\n        return { success: false, message };\n    }\n}\n\n    ","size_bytes":14853},"src/lib/audio-utils.ts":{"content":"\n'use server';\n\nexport async function mergeAudio(audioDataUris: string[]): Promise<Blob> {\n    const audioBuffers = await Promise.all(\n        audioDataUris.map(async (uri) => {\n            const response = await fetch(uri);\n            return response.arrayBuffer();\n        })\n    );\n    // This simple concatenation works for MP3 files if they have the same encoding parameters.\n    // For a more robust solution, a server-side library like ffmpeg would be needed to\n    // properly merge MP3s with different headers, but this is a good starting point.\n    const totalLength = audioBuffers.reduce((acc, buffer) => acc + buffer.byteLength, 0);\n    const merged = new Uint8Array(totalLength);\n    let offset = 0;\n    audioBuffers.forEach((buffer) => {\n        merged.set(new Uint8Array(buffer), offset);\n        offset += buffer.byteLength;\n    });\n\n    const firstUri = audioDataUris[0] || '';\n    const mimeType = firstUri.substring(firstUri.indexOf(':') + 1, firstUri.indexOf(';')) || 'audio/mp3';\n\n    return new Blob([merged], { type: mimeType });\n}\n","size_bytes":1056},"src/lib/cleanup-actions.ts":{"content":"\n'use server';\n\nimport { kv } from '@vercel/kv';\nimport type { VoiceProviderSettings } from './admin-actions';\n\nconst CLEANUP_FLAG_KEY = 'readify:cleanup:lemonfox-setting-removed';\n\n/**\n * A one-time action to remove the 'lemonfox' provider from saved voice settings in KV.\n * It uses a flag to ensure it only runs once per environment.\n */\nexport async function removeLemonfoxFromSettings(): Promise<{ success: boolean; message: string }> {\n  try {\n    const hasRun = await kv.get(CLEANUP_FLAG_KEY);\n\n    if (hasRun) {\n      return { success: true, message: 'Cleanup has already been performed.' };\n    }\n\n    console.log('Running one-time cleanup to remove Lemonfox from voice settings...');\n\n    const VOICE_SETTINGS_KEY = 'readify:settings:voice-providers';\n    const settings = await kv.get<VoiceProviderSettings>(VOICE_SETTINGS_KEY);\n\n    if (settings && 'lemonfox' in settings) {\n      delete settings.lemonfox;\n      await kv.set(VOICE_SETTINGS_KEY, settings);\n      console.log('Successfully removed Lemonfox key from voice settings.');\n    } else {\n      console.log('No Lemonfox key found in voice settings. No action needed.');\n    }\n\n    // Set the flag to prevent this from running again.\n    await kv.set(CLEANUP_FLAG_KEY, true);\n\n    return { success: true, message: 'Cleanup completed successfully.' };\n  } catch (error) {\n    const message = error instanceof Error ? error.message : 'An unknown error occurred.';\n    console.error('Error during settings cleanup:', message);\n    return { success: false, message };\n  }\n}\n","size_bytes":1539},"src/lib/db.ts":{"content":"\n'use server';\n\nimport { kv } from '@vercel/kv';\nimport { del as deleteBlob } from '@vercel/blob';\nimport { getSession, type SessionPayload } from './session';\nimport { randomUUID } from 'crypto';\nimport { s3Client } from '@/ai/flows/speech-generation/amazon';\nimport { DeleteObjectCommand } from '@aws-sdk/client-s3';\n\nexport interface ChatMessage {\n  id: string;\n  role: 'user' | 'assistant';\n  content: string;\n  createdAt: string;\n}\n\nexport interface QuizAttempt {\n    questions: any[]; // Store the questions for review\n    answers: Record<number, string>;\n    score: number;\n    suggestions: string;\n    completedAt: string;\n}\n\nexport interface Folder {\n    id: string;\n    userId: string;\n    name: string;\n    createdAt: string;\n}\n\nexport type AudioGenerationStatus = 'idle' | 'processing' | 'completed' | 'failed';\n\nexport interface Document {\n  id: string; \n  userId: string;\n  fileName: string;\n  pdfUrl: string;\n  textContent: string;\n  audioUrl: string | null;\n  speechMarksUrl: string | null;\n  unwantedText: string[] | null;\n  audioGenerationStatus: AudioGenerationStatus;\n  audioGenerationError?: string | null;\n  zoomLevel: number;\n  createdAt: string;\n  folderId: string | null;\n  chatHistory?: ChatMessage[];\n  quizAttempt?: QuizAttempt | null;\n}\n\nexport interface User {\n    id: string;\n    name: string;\n    email: string;\n    username: string | null;\n    password: string; \n    isAdmin: boolean;\n    createdAt: string;\n    setupToken: string | null;\n    setupTokenExpiry: string | null;\n    avatarUrl?: string | null;\n    defaultVoice?: string | null;\n    defaultSpeakingRate?: number | null;\n    defaultZoomLevel?: number | null;\n}\n\nexport interface UserSession extends SessionPayload {\n    name: string;\n    email: string;\n    avatarUrl?: string | null;\n    defaultVoice?: string | null;\n    defaultSpeakingRate?: number | null;\n    defaultZoomLevel?: number | null;\n}\n\nexport interface Submission {\n    id: string;\n    type: 'Access Request' | 'General Inquiry';\n    name: string;\n    email: string;\n    message: string;\n    status: 'Pending' | 'Approved' | 'Rejected' | 'Replied';\n    createdAt: string;\n}\n\n\nexport async function getUserSession(): Promise<UserSession | null> {\n  const session = await getSession();\n  if (session?.userId) {\n    const user: User | null = await kv.get(`readify:user:id:${session.userId}`);\n    if (user) {\n        return {\n            ...session,\n            name: user.name,\n            email: user.email,\n            avatarUrl: user.avatarUrl,\n            defaultVoice: user.defaultVoice,\n            defaultSpeakingRate: user.defaultSpeakingRate,\n            defaultZoomLevel: user.defaultZoomLevel,\n        };\n    }\n  }\n  return null;\n}\n\nexport async function saveDocument(docData: Partial<Document>): Promise<Document> {\n  const session = await getSession();\n  if (!session?.userId) {\n    throw new Error('Authentication required.');\n  }\n  const userId = session.userId;\n  const prefix = 'readify';\n\n  let docId = docData.id;\n  const userDocListKey = `${prefix}:user:${userId}:docs`;\n\n  if (docId) {\n    const docKey = `${prefix}:doc:${docId}`;\n    const existingDocRaw: Document | null = await kv.get(docKey);\n    if (!existingDocRaw) {\n        throw new Error('Document not found.');\n    }\n    \n    if (!session.isAdmin && existingDocRaw.userId !== userId) {\n      throw new Error('Access denied.');\n    }\n    const updatedDoc: Document = {\n      ...existingDocRaw,\n      ...docData,\n      id: docId,\n    };\n    await kv.set(docKey, updatedDoc);\n    return updatedDoc;\n\n  } else {\n    if (!docData.fileName || !docData.pdfUrl || !docData.textContent) {\n      throw new Error(\"fileName, pdfUrl, and textContent are required for new documents.\");\n    }\n    docId = randomUUID();\n    const newDoc: Document = {\n      id: docId,\n      userId,\n      fileName: docData.fileName,\n      pdfUrl: docData.pdfUrl,\n      textContent: docData.textContent,\n      audioUrl: docData.audioUrl || null,\n      speechMarksUrl: null,\n      unwantedText: null,\n      audioGenerationStatus: 'idle',\n      zoomLevel: docData.zoomLevel || 1,\n      createdAt: new Date().toISOString(),\n      folderId: docData.folderId || null,\n      chatHistory: [],\n    };\n    \n    const docKey = `${prefix}:doc:${docId}`;\n    const pipeline = kv.pipeline();\n    pipeline.set(docKey, newDoc);\n    pipeline.lpush(userDocListKey, docId);\n    await pipeline.exec();\n\n    return newDoc;\n  }\n}\n\nexport async function getDocuments(): Promise<Document[]> {\n  const session = await getSession();\n  if (!session?.userId) {\n    return [];\n  }\n  const userId = session.userId;\n  const prefix = 'readify';\n  const userDocListKey = `${prefix}:user:${userId}:docs`;\n\n  const docIds = await kv.lrange<string[]>(userDocListKey, 0, -1);\n  if (docIds.length === 0) {\n    return [];\n  }\n\n  const validDocIds = docIds.filter(id => id);\n  if (validDocIds.length === 0) {\n    return [];\n  }\n\n  const docKeys = validDocIds.map(id => `${prefix}:doc:${id}`);\n  const docs = await kv.mget<Document[]>(...docKeys);\n\n  return docs\n    .filter((doc): doc is Document => doc !== null)\n    .sort((a,b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n}\n\nasync function deleteS3Object(url: string) {\n    try {\n        const urlObj = new URL(url);\n        // Extract bucket and key. Assumes standard S3 URL format.\n        const bucketName = urlObj.hostname.split('.')[0];\n        const objectKey = urlObj.pathname.substring(1); \n        \n        if (!bucketName || !objectKey) {\n            throw new Error(\"Could not parse S3 URL for deletion.\");\n        }\n\n        const command = new DeleteObjectCommand({\n            Bucket: bucketName,\n            Key: decodeURIComponent(objectKey),\n        });\n        \n        await s3Client.send(command);\n        console.log(`Successfully deleted ${objectKey} from S3 bucket ${bucketName}.`);\n\n    } catch (s3Error) {\n        // Log error but don't re-throw, as the object might have already been deleted\n        // or the URL might not have been an S3 URL.\n        console.error(\"Failed to delete object from S3, it may have already been removed:\", s3Error);\n    }\n}\n\nexport async function deleteDocument(docId: string): Promise<{ success: boolean, message?: string }> {\n    const session = await getSession();\n    if (!session?.userId) {\n        throw new Error('Authentication required.');\n    }\n    const prefix = 'readify';\n\n    try {\n        const docKey = `${prefix}:doc:${docId}`;\n        const doc: Document | null = await kv.get(docKey);\n\n        if (!doc) {\n            return { success: true, message: 'Document already deleted.' };\n        }\n\n        if (doc.userId !== session.userId && !session.isAdmin) {\n            throw new Error('You do not have permission to delete this document.');\n        }\n        \n        // Delete Vercel Blob assets\n        if (doc.pdfUrl && doc.pdfUrl.includes('.blob.vercel-storage.com')) {\n            await deleteBlob(doc.pdfUrl);\n        }\n        if (doc.audioUrl && doc.audioUrl.includes('.blob.vercel-storage.com')) {\n            await deleteBlob(doc.audioUrl);\n        }\n        \n        // Delete S3 assets\n        if (doc.audioUrl && doc.audioUrl.includes('s3.amazonaws.com')) {\n            await deleteS3Object(doc.audioUrl);\n        }\n         if (doc.speechMarksUrl && doc.speechMarksUrl.includes('s3.amazonaws.com')) {\n            await deleteS3Object(doc.speechMarksUrl);\n        }\n\n        const pipeline = kv.pipeline();\n        pipeline.del(docKey);\n        pipeline.lrem(`${prefix}:user:${doc.userId}:docs`, 1, docId);\n        await pipeline.exec();\n        \n        return { success: true };\n    } catch (error) {\n        const message = error instanceof Error ? error.message : 'An unknown error occurred';\n        console.error('Failed to delete document:', message);\n        return { success: false, message };\n    }\n}\n\nexport async function clearChatHistory(docId: string): Promise<Document> {\n    const session = await getSession();\n    if (!session?.userId) {\n        throw new Error('Authentication required.');\n    }\n    const prefix = 'readify';\n    const docKey = `${prefix}:doc:${docId}`;\n    const doc: Document | null = await kv.get(docKey);\n\n    if (!doc) {\n        throw new Error('Document not found.');\n    }\n\n    if (doc.userId !== session.userId && !session.isAdmin) {\n        throw new Error('You do not have permission to modify this document.');\n    }\n\n    const updatedDoc: Document = {\n        ...doc,\n        chatHistory: [],\n    };\n\n    await kv.set(docKey, updatedDoc);\n\n    return updatedDoc;\n}\n\nexport async function getFolders(): Promise<Folder[]> {\n    const session = await getSession();\n    if (!session?.userId) return [];\n    \n    const folderListKey = `readify:user:${session.userId}:folders`;\n    const folderIds = await kv.lrange<string[]>(folderListKey, 0, -1);\n    if (folderIds.length === 0) return [];\n\n    const validFolderIds = folderIds.filter(id => id);\n    if (validFolderIds.length === 0) return [];\n    \n    const folderKeys = validFolderIds.map(id => `readify:folder:${id}`);\n    const folders = await kv.mget<Folder[]>(...folderKeys);\n    \n    return folders\n        .filter((f): f is Folder => f !== null)\n        .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n}\n\nexport async function createFolder(name: string): Promise<Folder> {\n    const session = await getSession();\n    if (!session?.userId) throw new Error(\"Authentication required.\");\n\n    const newFolder: Folder = {\n        id: randomUUID(),\n        userId: session.userId,\n        name,\n        createdAt: new Date().toISOString()\n    };\n    \n    const pipeline = kv.pipeline();\n    pipeline.set(`readify:folder:${newFolder.id}`, newFolder);\n    pipeline.lpush(`readify:user:${session.userId}:folders`, newFolder.id);\n    await pipeline.exec();\n    \n    return newFolder;\n}\n\nexport async function deleteFolder(folderId: string): Promise<{ success: boolean, message?: string }> {\n    const session = await getSession();\n    if (!session?.userId) throw new Error(\"Authentication required.\");\n\n    const folder: Folder | null = await kv.get(`readify:folder:${folderId}`);\n    if (!folder || folder.userId !== session.userId) {\n        throw new Error(\"Folder not found or access denied.\");\n    }\n    \n    // Get all document IDs for the user\n    const userDocListKey = `readify:user:${session.userId}:docs`;\n    const docIds = await kv.lrange<string[]>(userDocListKey, 0, -1);\n    if (docIds.length > 0) {\n        const docKeys = docIds.map(id => `readify:doc:${id}`);\n        const docs = await kv.mget<Document[]>(...docKeys);\n        const docsToDelete = docs.filter((doc): doc is Document => doc !== null && doc.folderId === folderId);\n        \n        // Delete each document inside the folder\n        for (const doc of docsToDelete) {\n            await deleteDocument(doc.id);\n        }\n    }\n\n    // Delete the folder itself\n    const pipeline = kv.pipeline();\n    pipeline.del(`readify:folder:${folderId}`);\n    pipeline.lrem(`readify:user:${session.userId}:folders`, 1, folderId);\n    await pipeline.exec();\n    \n    return { success: true };\n}\n\nexport async function moveDocumentToFolder(docId: string, folderId: string | null): Promise<Document> {\n    const session = await getSession();\n    if (!session?.userId) throw new Error(\"Authentication required.\");\n\n    const doc: Document | null = await kv.get(`readify:doc:${docId}`);\n    if (!doc || doc.userId !== session.userId) {\n        throw new Error(\"Document not found or access denied.\");\n    }\n\n    if (folderId) {\n        const folder: Folder | null = await kv.get(`readify:folder:${folderId}`);\n        if (!folder || folder.userId !== session.userId) {\n            throw new Error(\"Target folder not found or access denied.\");\n        }\n    }\n\n    const updatedDoc = { ...doc, folderId };\n    await kv.set(`readify:doc:${doc.id}`, updatedDoc);\n    return updatedDoc;\n}\n","size_bytes":11910},"src/lib/email.ts":{"content":"\n'use server';\n\nimport { Resend } from 'resend';\nimport { WelcomeEmail } from '@/components/emails/welcome-email';\nimport { ContactFormEmail } from '@/components/emails/contact-form-email';\nimport { RejectionEmail } from '@/components/emails/rejection-email';\nimport { GeneralContactFormEmail } from '@/components/emails/general-contact-form-email';\nimport { AdminReplyEmail } from '@/components/emails/admin-reply-email';\n\n\nconst resend = new Resend(process.env.RESEND_API_KEY);\nconst fromEmail = process.env.FROM_EMAIL || 'onboarding@resend.dev';\nconst toEmail = process.env.ADMIN_EMAIL || process.env.FROM_EMAIL || 'onboarding@resend.dev';\n\nexport async function sendWelcomeEmail(\n  to: string,\n  name: string,\n  setupLink: string\n) {\n  try {\n    const { data, error } = await resend.emails.send({\n      from: `Readify <${fromEmail}>`,\n      to,\n      subject: 'Welcome to Readify! Complete Your Account Setup',\n      react: WelcomeEmail({ name, setupLink }),\n    });\n\n    if (error) {\n      console.error('Resend Error:', error);\n      // Throw a more specific error to be caught by the calling action\n      throw new Error(`Resend failed: ${error.message}`);\n    }\n\n    console.log('Welcome email sent successfully:', data?.id);\n    return data;\n  } catch (error) {\n    // Catch the error and re-throw it to ensure the calling function knows about it.\n    // This now includes our more specific error from above.\n    console.error('Error in sendWelcomeEmail:', error);\n    const message = error instanceof Error ? error.message : JSON.stringify(error);\n    throw new Error(`Failed to send welcome email: ${message}`);\n  }\n}\n\nexport async function sendContactFormEmail({ name, email, message, approveUrl, rejectUrl }: { name: string, email: string, message: string, approveUrl: string, rejectUrl: string }) {\n    try {\n        const { data, error } = await resend.emails.send({\n            from: `Readify Access Request <${fromEmail}>`,\n            to: toEmail,\n            subject: `New Readify Access Request from ${name}`,\n            reply_to: email,\n            react: ContactFormEmail({ name, email, message, approveUrl, rejectUrl }),\n        });\n\n        if (error) {\n            console.error('Resend Error:', error);\n            throw new Error(`Resend failed: ${error.message}`);\n        }\n\n        console.log('Access request email sent successfully:', data?.id);\n        return data;\n\n    } catch (error) {\n        console.error('Error in sendContactFormEmail:', error);\n        const message = error instanceof Error ? error.message : JSON.stringify(error);\n        throw new Error(`Failed to send access request email: ${message}`);\n    }\n}\n\nexport async function sendGeneralEmail({ name, email, message }: { name: string, email: string, message: string }) {\n    try {\n        const { data, error } = await resend.emails.send({\n            from: `Readify Contact <${fromEmail}>`,\n            to: toEmail,\n            subject: `General Inquiry from ${name}`,\n            reply_to: email,\n            react: GeneralContactFormEmail({ name, email, message }),\n        });\n\n        if (error) {\n            console.error('Resend Error:', error);\n            throw new Error(`Resend failed: ${error.message}`);\n        }\n\n        console.log('General contact email sent successfully:', data?.id);\n        return data;\n\n    } catch (error) {\n        console.error('Error in sendGeneralEmail:', error);\n        const message = error instanceof Error ? error.message : JSON.stringify(error);\n        throw new Error(`Failed to send general contact email: ${message}`);\n    }\n}\n\n\nexport async function sendRejectionEmail(to: string) {\n    try {\n      const { data, error } = await resend.emails.send({\n        from: `Readify <${fromEmail}>`,\n        to,\n        subject: 'Update on Your Readify Access Request',\n        react: RejectionEmail(),\n      });\n  \n      if (error) {\n        throw new Error(`Resend failed: ${error.message}`);\n      }\n  \n      console.log('Rejection email sent successfully:', data?.id);\n      return data;\n    } catch (error) {\n      console.error('Error in sendRejectionEmail:', error);\n      const message = error instanceof Error ? error.message : JSON.stringify(error);\n      throw new Error(`Failed to send rejection email: ${message}`);\n    }\n  }\n\n\nexport async function sendAdminReplyEmail({ to, fromName, originalMessage, replyMessage }: { to: string, fromName: string, originalMessage: string, replyMessage: string }) {\n    try {\n        const { data, error } = await resend.emails.send({\n            from: `${fromName} (Readify Admin) <${fromEmail}>`,\n            to,\n            subject: 'Re: Your Inquiry to Readify',\n            react: AdminReplyEmail({ originalMessage, replyMessage }),\n        });\n\n        if (error) {\n            throw new Error(`Resend failed: ${error.message}`);\n        }\n\n        console.log('Admin reply email sent successfully:', data?.id);\n        return data;\n    } catch (error) {\n        console.error('Error in sendAdminReplyEmail:', error);\n        const message = error instanceof Error ? error.message : JSON.stringify(error);\n        throw new Error(`Failed to send admin reply email: ${message}`);\n    }\n}\n\n","size_bytes":5194},"src/lib/session.ts":{"content":"\nimport { SignJWT, jwtVerify } from 'jose';\nimport { cookies } from 'next/headers';\nimport type { NextRequest } from 'next/server';\nimport type { ResponseCookie } from 'next/dist/compiled/@edge-runtime/cookies';\n\nconst secretKey = process.env.JWT_SECRET || 'your-secret-key-for-development';\nconst key = new TextEncoder().encode(secretKey);\n\nexport interface SessionPayload {\n    userId: string;\n    isAdmin: boolean;\n    username: string | null;\n    expires?: Date; // Expires is used on the client-side for cookie management\n}\n\nexport async function encrypt(payload: Omit<SessionPayload, 'expires'>) {\n  return await new SignJWT(payload)\n    .setProtectedHeader({ alg: 'HS256' })\n    .setIssuedAt()\n    .setExpirationTime('24h')\n    .sign(key);\n}\n\nexport async function decrypt(input: string): Promise<SessionPayload | null> {\n  try {\n    const { payload } = await jwtVerify<SessionPayload>(input, key, {\n      algorithms: ['HS256'],\n    });\n    return payload;\n  } catch (e: any) {\n    console.error('JWT Decryption Error:', e?.code || e?.message);\n    return null;\n  }\n}\n\nexport async function getSession(): Promise<SessionPayload | null> {\n  const sessionCookie = (await cookies()).get('session')?.value;\n  if (!sessionCookie) return null;\n  \n  const session = await decrypt(sessionCookie);\n  return session;\n}\n\n// Accept an optional cookie store for use in Route Handlers\nexport async function createSession(\n    userId: string, \n    isAdmin: boolean, \n    username: string | null,\n    cookieStore?: { set: (name: string, value: string, options: Partial<ResponseCookie>) => void }\n) {\n    const expires = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours\n    const sessionPayload = { userId, isAdmin, username };\n    \n    const session = await encrypt(sessionPayload);\n\n    // Use provided cookie store or default to await cookies()\n    const store = cookieStore || (await cookies());\n    store.set('session', session, {\n      expires,\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n      path: '/',\n    });\n}\n\nexport async function deleteSession() {\n  (await cookies()).set('session', '', { expires: new Date(0) });\n}\n","size_bytes":2185},"src/lib/types.ts":{"content":"// This is a new file you need to create.\n\nexport interface Document {\n    id: string;\n    userId: string;\n    fileName: string;\n    pdfUrl: string;\n    audioUrl: string | null;\n    zoomLevel: number;\n    createdAt: string; \n  }\n  \n  export interface User {\n    id: string;\n    name: string;\n    email: string;\n    password: string; // This is the hashed password\n    isAdmin: boolean;\n    createdAt: string; \n  }","size_bytes":413},"src/lib/user-actions.ts":{"content":"\n'use server';\n\nimport { kv } from '@vercel/kv';\nimport { del as deleteBlob, put as putBlob } from '@vercel/blob';\nimport { getSession, createSession, deleteSession } from './session';\nimport type { User } from './db';\nimport bcrypt from 'bcrypt';\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\n\nconst profileUpdateSchema = z.object({\n  name: z.string().min(2, 'Name must be at least 2 characters.').optional(),\n  defaultVoice: z.string().optional(),\n  defaultSpeakingRate: z.coerce.number().min(0.25).max(4.0).optional(),\n  defaultZoomLevel: z.coerce.number().min(0.4).max(3).optional(),\n});\n\nexport async function updateUserProfile(formData: FormData): Promise<{ success: boolean; message?: string }> {\n  const session = await getSession();\n  if (!session?.userId) {\n    return { success: false, message: 'Authentication required.' };\n  }\n  \n  const result = profileUpdateSchema.safeParse({\n    name: formData.get('name') || undefined,\n    defaultVoice: formData.get('defaultVoice') || undefined,\n    defaultSpeakingRate: formData.get('defaultSpeakingRate') || undefined,\n    defaultZoomLevel: formData.get('defaultZoomLevel') || undefined,\n  });\n\n  if(!result.success) {\n      return { success: false, message: result.error.errors.map(e => e.message).join(', ') };\n  }\n\n  try {\n    const user: User | null = await kv.get(`readify:user:id:${session.userId}`);\n    if (!user) {\n      return { success: false, message: 'User not found.' };\n    }\n    \n    let avatarUrl = user.avatarUrl;\n    const avatarFile = formData.get('avatar') as File;\n\n    if (avatarFile && avatarFile.size > 0) {\n        if (user.avatarUrl) {\n            try {\n                await deleteBlob(user.avatarUrl);\n            } catch (error) {\n                console.warn(\"Failed to delete old avatar, it might have been already removed:\", error);\n            }\n        }\n        \n        const blob = await putBlob(avatarFile.name, avatarFile, {\n          access: 'public',\n        });\n        \n        avatarUrl = blob.url;\n    }\n\n    const updatedUser: User = {\n        ...user,\n        name: result.data.name ?? user.name,\n        avatarUrl,\n        defaultVoice: result.data.defaultVoice ?? user.defaultVoice,\n        defaultSpeakingRate: result.data.defaultSpeakingRate ?? user.defaultSpeakingRate,\n        defaultZoomLevel: result.data.defaultZoomLevel ?? user.defaultZoomLevel,\n    };\n\n    const pipeline = kv.pipeline();\n    pipeline.set(`readify:user:id:${user.id}`, updatedUser);\n    pipeline.set(`readify:user:email:${user.email}`, updatedUser);\n    if(user.username) {\n        pipeline.set(`readify:user:username:${user.username}`, updatedUser);\n    }\n    await pipeline.exec();\n    \n    revalidatePath('/read'); // Revalidate to update the user panel\n\n    return { success: true };\n  } catch (error) {\n    const message = error instanceof Error ? error.message : 'An unknown error occurred.';\n    console.error('Failed to update profile:', message);\n    return { success: false, message: \"Failed to save avatar.\" };\n  }\n}\n\nexport async function changeUserPassword(data: {\n  currentPassword?: string;\n  newPassword?: string;\n}): Promise<{ success: boolean; message?: string }> {\n  const session = await getSession();\n  if (!session?.userId) {\n    return { success: false, message: 'Authentication required.' };\n  }\n\n  if (!data.currentPassword || !data.newPassword) {\n      return { success: false, message: 'All fields are required.'}\n  }\n\n  try {\n    const user: User | null = await kv.get(`readify:user:id:${session.userId}`);\n    if (!user) {\n      return { success: false, message: 'User not found.' };\n    }\n\n    const passwordsMatch = await bcrypt.compare(data.currentPassword, user.password);\n    if (!passwordsMatch) {\n      return { success: false, message: 'Incorrect current password.' };\n    }\n\n    const newHashedPassword = await bcrypt.hash(data.newPassword, 10);\n    \n    const updatedUser: User = {\n        ...user,\n        password: newHashedPassword,\n    };\n\n    const pipeline = kv.pipeline();\n    pipeline.set(`readify:user:email:${user.email}`, updatedUser);\n    pipeline.set(`readify:user:id:${user.id}`, updatedUser);\n    if(user.username) {\n        pipeline.set(`readify:user:username:${user.username}`, updatedUser);\n    }\n    await pipeline.exec();\n\n    await createSession(user.id, user.isAdmin, user.username);\n\n    return { success: true };\n  } catch (error) {\n    const message = error instanceof Error ? error.message : 'An unknown error occurred';\n    console.error('Failed to change password:', message);\n    return { success: false, message };\n  }\n}\n\nexport async function deleteUserAccount(password: string): Promise<{ success: boolean; message?: string }> {\n    const session = await getSession();\n    if (!session?.userId) {\n        return { success: false, message: 'Authentication required.' };\n    }\n\n    try {\n        const user: User | null = await kv.get(`readify:user:id:${session.userId}`);\n        if (!user) {\n            return { success: false, message: 'User not found.' };\n        }\n\n        const passwordsMatch = await bcrypt.compare(password, user.password);\n        if (!passwordsMatch) {\n            return { success: false, message: 'Incorrect password.' };\n        }\n\n        // Delete all user documents from blob storage and KV\n        const docListKey = `readify:user:${user.id}:docs`;\n        const docIds: string[] = await kv.lrange(docListKey, 0, -1);\n        if (docIds.length > 0) {\n            const validDocIds = docIds.filter(id => id);\n            const docKeys = validDocIds.map(id => `readify:doc:${id}`);\n            const docs: (User | null)[] = await kv.mget(...docKeys);\n            const urlsToDelete: string[] = [];\n            docs.forEach((doc: any) => {\n                if (doc?.pdfUrl) urlsToDelete.push(doc.pdfUrl);\n                if (doc?.audioUrl) urlsToDelete.push(doc.audioUrl);\n            });\n            if (urlsToDelete.length > 0) {\n                await deleteBlob(urlsToDelete);\n            }\n            if(docKeys.length > 0) {\n                // @ts-ignore\n                await kv.del(...docKeys);\n            }\n        }\n        \n        if (user.avatarUrl) {\n            await deleteBlob(user.avatarUrl);\n        }\n\n        const pipeline = kv.pipeline();\n        pipeline.del(docListKey);\n        pipeline.del(`readify:user:id:${user.id}`);\n        if (user.username) {\n            pipeline.del(`readify:user:username:${user.username}`);\n        }\n        pipeline.del(`readify:user:email:${user.email}`);\n        await pipeline.exec();\n\n        await deleteSession();\n\n        return { success: true };\n    } catch (error) {\n        const message = error instanceof Error ? error.message : 'An unknown error occurred.';\n        console.error('Failed to delete user account:', message);\n        return { success: false, message };\n    }\n}\n","size_bytes":6851},"src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"src/ai/flows/chat-with-pdf.ts":{"content":"\n'use server';\n\n/**\n * @fileOverview An AI agent for answering questions about a PDF document.\n *\n * - chatWithPdf - A function that handles the Q&A process.\n * - ChatWithPdfInput - The input type for the chatWithPdf function.\n * - ChatWithPdfOutput - The return type for the chatWithPdf function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst ChatWithPdfInputSchema = z.object({\n  pdfText: z.string().describe('The text content of the PDF document.'),\n  question: z.string().describe('The user\\'s question about the document.'),\n  chatHistory: z.array(z.object({\n      role: z.enum(['user', 'assistant']),\n      content: z.string(),\n  })).optional().describe('The history of the conversation so far.'),\n});\nexport type ChatWithPdfInput = z.infer<typeof ChatWithPdfInputSchema>;\n\nconst ChatWithPdfOutputSchema = z.object({\n  answer: z.string().describe('The answer to the user\\'s question, formatted in Markdown.'),\n});\nexport type ChatWithPdfOutput = z.infer<typeof ChatWithPdfOutputSchema>;\n\nexport async function chatWithPdf(input: ChatWithPdfInput): Promise<ChatWithPdfOutput> {\n  return chatWithPdfFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'chatWithPdfPrompt',\n  input: {schema: ChatWithPdfInputSchema},\n  output: {schema: ChatWithPdfOutputSchema},\n  prompt: `You are a helpful and knowledgeable assistant. Your primary task is to answer questions based on the provided document content.\nYour secondary task is to use your general knowledge if the document does not contain the answer.\n\nFollow these rules:\n1.  **Prioritize Document**: Base your answers *only* on the content of the text below.\n2.  **Use General Knowledge**: If the answer cannot be found in the text, use your own knowledge to answer, but you *must* state that the information is not from the document. For example, start your response with \"Based on my general knowledge...\"\n3.  **Format Responses**: Format your answers using Markdown. Use code blocks for code snippets and proper formatting for mathematical equations.\n4.  **Acknowledge History**: Use the provided chat history to understand the context of the conversation.\n\n  Chat History:\n  ---\n  {{#if chatHistory}}\n    {{#each chatHistory}}\n        **{{role}}**: {{content}}\n    {{/each}}\n  {{else}}\n    No chat history yet.\n  {{/if}}\n  ---\n\n  Document Text:\n  ---\n  {{{pdfText}}}\n  ---\n\n  New Question:\n  {{{question}}}\n  `,\n});\n\nconst chatWithPdfFlow = ai.defineFlow(\n  {\n    name: 'chatWithPdfFlow',\n    inputSchema: ChatWithPdfInputSchema,\n    outputSchema: ChatWithPdfOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n","size_bytes":2650},"src/ai/flows/clean-text-flow.ts":{"content":"\n'use server';\n\n/**\n * @fileOverview An AI agent for cleaning up extracted PDF text.\n *\n * - cleanPdfText - A function that removes headers, footers, and other artifacts.\n * - CleanPdfTextInput - The input type for the cleanPdfText function.\n * - CleanPdfTextOutput - The return type for the cleanPdfText function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst CleanPdfTextInputSchema = z.object({\n  rawText: z.string().describe('The raw text extracted from a PDF, including potential headers, footers, and page numbers.'),\n});\nexport type CleanPdfTextInput = z.infer<typeof CleanPdfTextInputSchema>;\n\nconst CleanPdfTextOutputSchema = z.object({\n  cleanedText: z.string().describe('The core content of the document, with headers, footers, and page numbers removed.'),\n});\nexport type CleanPdfTextOutput = z.infer<typeof CleanPdfTextOutputSchema>;\n\nexport async function cleanPdfText(input: CleanPdfTextInput): Promise<CleanPdfTextOutput> {\n  return cleanPdfTextFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'cleanPdfTextPrompt',\n  input: {schema: CleanPdfTextInputSchema},\n  output: {schema: CleanPdfTextOutputSchema},\n  prompt: `You are an expert document processor. Your task is to clean up raw text extracted from a PDF.\n  Analyze the following text and remove any content that appears to be a repetitive header, footer, or page number.\n  Preserve the main body of the text, ensuring paragraphs and formatting are respected as much as possible.\n  Return only the cleaned, primary content of the document.\n\n  Raw Document Text:\n  ---\n  {{{rawText}}}\n  ---\n  `,\n});\n\nconst cleanPdfTextFlow = ai.defineFlow(\n  {\n    name: 'cleanPdfTextFlow',\n    inputSchema: CleanPdfTextInputSchema,\n    outputSchema: CleanPdfTextOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n","size_bytes":1856},"src/ai/flows/format-text-for-speech.ts":{"content":"\n'use server';\n\n/**\n * @fileOverview An AI agent for formatting text for optimal text-to-speech (TTS) conversion.\n *\n * - formatTextForSpeech: Pre-processes text to make it sound more natural when read aloud.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\n\nconst FormatTextForSpeechInputSchema = z.object({\n  rawText: z.string().describe('The raw text to be formatted for speech.'),\n});\n\nconst FormatTextForSpeechOutputSchema = z.object({\n  formattedText: z.string().describe('The text, optimized for speech synthesis.'),\n});\n\nexport async function formatTextForSpeech(\n  input: z.infer<typeof FormatTextForSpeechInputSchema>\n): Promise<z.infer<typeof FormatTextForSpeechOutputSchema>> {\n  return formatTextForSpeechFlow(input);\n}\n\nconst formatTextForSpeechPrompt = ai.definePrompt({\n  name: 'formatTextForSpeechPrompt',\n  input: { schema: FormatTextForSpeechInputSchema },\n  output: { schema: FormatTextForSpeechOutputSchema },\n  prompt: `You are an expert text formatter for a text-to-speech (TTS) engine.\nYour task is to convert the given raw text into a clean, naturally-flowing version that is easy to read aloud.\n\nFollow these rules:\n1.  **Remove Artifacts**: Delete any repetitive headers, footers, page numbers, and irrelevant characters (like '>>>' from code blocks).\n2.  **Code Formatting**: Convert code blocks into a readable format. For example, \"const x = 10;\" should be read as \"const x equals 10 semicolon\". Do not spell out every symbol unless necessary for clarity.\n3.  **Mathematical Formatting**: Convert mathematical equations (like LaTeX) into descriptive English. For example, \"\\\\int x^2 dx\" should become \"the integral of x squared dx\".\n4.  **Currency Formatting**: Expand currency symbols into words. For example, \"$500\" should become \"five hundred dollars\" and \"€1,000\" should become \"one thousand euros\".\n5.  **General Flow**: Ensure the final text is grammatically correct and flows well for a listener. Preserve paragraph structure.\n\nRaw Text:\n---\n{{{rawText}}}\n---\n`,\n});\n\nconst formatTextForSpeechFlow = ai.defineFlow(\n  {\n    name: 'formatTextForSpeechFlow',\n    inputSchema: FormatTextForSpeechInputSchema,\n    outputSchema: FormatTextForSpeechOutputSchema,\n  },\n  async (input) => {\n    const { output } = await formatTextForSpeechPrompt(input);\n    return output!;\n  }\n);\n","size_bytes":2329},"src/ai/flows/generate-speech.ts":{"content":"\n'use server';\n\n/**\n * @fileOverview An text-to-speech AI agent using multiple providers.\n * This flow generates audio from text, supporting long inputs by splitting them into chunks.\n * It returns an array of audio data URIs to be concatenated on the client.\n *\n * - generateSpeech - A function that handles the text-to-speech process.\n */\nimport 'dotenv/config';\nimport { ai } from '@/ai/genkit';\nimport { GenerateSpeechInputSchema, GenerateSpeechOutputSchema, GenerateSpeechInput } from '@/ai/schemas';\nimport { formatTextForSpeech } from './format-text-for-speech';\nimport { generateOpenAIVoice } from './speech-generation/openai';\nimport { startAmazonVoiceGeneration } from './speech-generation/amazon-async';\nimport { generateAmazonVoiceSync } from './speech-generation/amazon-sync';\nimport { generateVibeVoiceSpeech } from './speech-generation/vibevoice';\nimport { generateLemonfoxVoice } from './speech-generation/lemonfox';\n\n\n// This function can be directly called from client components as a Server Action.\nexport async function generateSpeech(\n  input: GenerateSpeechInput\n): Promise<GenerateSpeechOutputSchema> {\n    \n    if (!input.text || !input.text.trim()) {\n        throw new Error(\"Input text cannot be empty.\");\n    }\n\n    try {\n        console.log('--- Starting speech generation ---');\n\n        // Note: For Amazon async, we use the raw text. For others, we format it first.\n        const textToUse = input.voice.startsWith('amazon') && input.docId\n            ? input.text\n            : (await formatTextForSpeech({ rawText: input.text })).formattedText;\n        \n        const [provider, voiceName] = input.voice.split('/');\n        const speakingRate = input.speakingRate || 1.0;\n        let audioDataUris: string[] = [];\n        let pollyAudioTaskId: string | undefined;\n        let pollyMarksTaskId: string | undefined;\n\n        switch (provider) {\n            case 'openai':\n                audioDataUris = await generateOpenAIVoice(textToUse, voiceName, speakingRate);\n                break;\n            case 'vibevoice':\n                audioDataUris = await generateVibeVoiceSpeech(textToUse, voiceName, speakingRate);\n                break;\n            case 'lemonfox':\n                audioDataUris = await generateLemonfoxVoice(textToUse, voiceName, speakingRate);\n                break;\n            case 'amazon':\n                // If a docId is present, we are generating audio for a full document\n                // and should use the asynchronous, S3-saving method.\n                if (input.docId) {\n                    const { audioTaskId, marksTaskId } = await startAmazonVoiceGeneration(textToUse, voiceName, speakingRate, input.docId, input.fileName);\n                    pollyAudioTaskId = audioTaskId;\n                    pollyMarksTaskId = marksTaskId;\n                } else {\n                    // Otherwise, it's a short, on-the-fly request (e.g., chat, TTS tab),\n                    // so we use the synchronous method that returns a data URI directly.\n                    audioDataUris = await generateAmazonVoiceSync(textToUse, voiceName, speakingRate);\n                }\n                break;\n            default:\n                throw new Error(`Unsupported voice provider: ${provider}`);\n        }\n\n        if (pollyAudioTaskId && pollyMarksTaskId) {\n            return { pollyAudioTaskId, pollyMarksTaskId };\n        }\n        \n        if (audioDataUris.length === 0) {\n            throw new Error(\"No audio was generated.\");\n        }\n\n        return { audioDataUris };\n\n    } catch (error: any) {\n        console.error(\"Error in generateSpeech action:\", error);\n        // Re-throw the error so the client can catch it.\n        throw new Error(`Failed to generate speech: ${error.message}`);\n    }\n}\n","size_bytes":3761},"src/ai/flows/glossary-flow.ts":{"content":"'use server';\n\n/**\n * @fileOverview An AI agent for creating a glossary from a document.\n *\n * - generateGlossary - A function that identifies key terms and defines them.\n * - GenerateGlossaryInput - The input type for the generateGlossary function.\n * - GenerateGlossaryOutput - The return type for the generateGlossary function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst GenerateGlossaryInputSchema = z.object({\n  documentText: z.string().describe('The full text content of the document.'),\n});\nexport type GenerateGlossaryInput = z.infer<typeof GenerateGlossaryInputSchema>;\n\nconst GlossaryItemSchema = z.object({\n    term: z.string().describe(\"The key term or phrase.\"),\n    definition: z.string().describe(\"A concise definition of the term.\")\n});\n\nconst GenerateGlossaryOutputSchema = z.object({\n  glossary: z.array(GlossaryItemSchema).describe('A list of key terms and their definitions from the document.'),\n});\nexport type GenerateGlossaryOutput = z.infer<typeof GenerateGlossaryOutputSchema>;\nexport type GlossaryItem = z.infer<typeof GlossaryItemSchema>;\n\nexport async function generateGlossary(input: GenerateGlossaryInput): Promise<GenerateGlossaryOutput> {\n  return generateGlossaryFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateGlossaryPrompt',\n  input: {schema: GenerateGlossaryInputSchema},\n  output: {schema: GenerateGlossaryOutputSchema},\n  prompt: `You are an expert analyst. Your task is to read the following document and create a glossary of important terms.\n  Identify key terms, concepts, and acronyms. For each item, provide a clear and concise definition based on its context within the document.\n\n  Document Text:\n  ---\n  {{{documentText}}}\n  ---\n  `,\n});\n\nconst generateGlossaryFlow = ai.defineFlow(\n  {\n    name: 'generateGlossaryFlow',\n    inputSchema: GenerateGlossaryInputSchema,\n    outputSchema: GenerateGlossaryOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n","size_bytes":2000},"src/ai/flows/identify-unwanted-text.ts":{"content":"\n'use server';\n\n/**\n * @fileOverview An AI agent for identifying unwanted text artifacts in a document.\n * This flow does not clean the text, but rather returns a list of phrases to be ignored.\n *\n * - identifyUnwantedText - A function that identifies headers, footers, etc.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst IdentifyUnwantedTextInputSchema = z.object({\n  rawText: z.string().describe('The raw, unmodified text extracted from a document.'),\n});\n\nconst IdentifyUnwantedTextOutputSchema = z.object({\n  unwantedText: z.array(z.string()).describe('A list of repetitive headers, footers, page numbers, and other artifacts found in the text.'),\n});\nexport type IdentifyUnwantedTextOutput = z.infer<typeof IdentifyUnwantedTextOutputSchema>;\n\nexport async function identifyUnwantedText(\n  input: z.infer<typeof IdentifyUnwantedTextInputSchema>\n): Promise<IdentifyUnwantedTextOutput> {\n  return identifyUnwantedTextFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'identifyUnwantedTextPrompt',\n  input: {schema: IdentifyUnwantedTextInputSchema},\n  output: {schema: IdentifyUnwantedTextOutputSchema},\n  prompt: `You are an expert document processor. Your task is to analyze the following raw text from a document and identify all repetitive content that appears to be a header, footer, or page number.\n\n  Follow these rules:\n  1.  **Identify Repetitions**: Look for text fragments that repeat on multiple pages or in a predictable pattern.\n  2.  **List Exact Phrases**: Return the exact phrases you identify. For example, if \"Chapter 3: The Journey\" is a header, return that exact string. If \"Page 12\" is a footer, return \"Page 12\".\n  3.  **Be Comprehensive**: Find all unique instances of such artifacts.\n  4.  **Do Not Modify**: Do not alter the main body of the text in any way. Your only output should be the list of unwanted text fragments.\n\n  Raw Document Text:\n  ---\n  {{{rawText}}}\n  ---\n  `,\n});\n\nconst identifyUnwantedTextFlow = ai.defineFlow(\n  {\n    name: 'identifyUnwantedTextFlow',\n    inputSchema: IdentifyUnwantedTextInputSchema,\n    outputSchema: IdentifyUnwantedTextOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n","size_bytes":2225},"src/ai/flows/preview-speech.ts":{"content":"\n'use server';\n/**\n * @fileOverview A text-to-speech AI agent for previewing voices from multiple providers.\n *\n * - previewSpeech - A function that handles the voice preview generation.\n */\nimport 'dotenv/config';\nimport { ai } from '@/ai/genkit';\nimport { PreviewSpeechInputSchema, PreviewSpeechOutputSchema } from '@/ai/schemas';\nimport { pollyClient, amazonVoices } from './speech-generation/amazon';\nimport { SynthesizeSpeechCommand } from '@aws-sdk/client-polly';\nimport { Client } from '@gradio/client';\n\nasync function handleOpenAIPreview(voice: string) {\n    const { media } = await ai.generate({\n      model: 'openai/tts-1',\n      prompt: \"Hello! This is a preview of my voice.\",\n      config: { voice: voice as any },\n      output: { format: 'url' }\n    });\n\n    if (!media || !media.url) {\n        throw new Error('No media URL returned from OpenAI.');\n    }\n    const audioResponse = await fetch(media.url);\n    if (!audioResponse.ok) throw new Error('Failed to fetch audio from OpenAI URL.');\n    \n    const audioBuffer = await audioResponse.arrayBuffer();\n    return `data:audio/mp3;base64,${Buffer.from(audioBuffer).toString('base64')}`;\n}\n\nasync function handleAmazonPreview(voiceId: string) {\n    const voiceConfig = amazonVoices.find(v => v.Id === voiceId);\n    if (!voiceConfig) throw new Error(`Amazon voice not found: ${voiceId}`);\n\n    const command = new SynthesizeSpeechCommand({\n        OutputFormat: 'mp3',\n        Text: \"Hello! This is a preview of my voice.\",\n        VoiceId: voiceId,\n        Engine: voiceConfig.SupportedEngines?.includes('neural') ? 'neural' : 'standard',\n    });\n\n    const response = await pollyClient.send(command);\n    if (!response.AudioStream) throw new Error('No audio stream from Amazon Polly.');\n    \n    const audioBytes = await response.AudioStream.transformToByteArray();\n    return `data:audio/mp3;base64,${Buffer.from(audioBytes).toString('base64')}`;\n}\n\nasync function handleVibeVoicePreview(voiceId: string) {\n    const client = await Client.connect(\"NeuralFalcon/VibeVoice-Colab\");\n    const result = await client.predict(\"/generate_podcast_with_timestamps\", { \t\t\n            num_speakers: 1, \t\t\n            script: \"Hello! This is a preview of my voice.\", \t\t\n            speaker_1: voiceId,\n    });\n\n    const audioOutput = result.data?.find((d: any) => d && typeof d === 'object' && d.url);\n\n    if (!audioOutput || !audioOutput.url) {\n        throw new Error('No audio URL returned from VibeVoice API for preview.');\n    }\n\n    const audioResponse = await fetch(audioOutput.url);\n    if (!audioResponse.ok) throw new Error(`Failed to fetch preview audio from VibeVoice: ${audioResponse.statusText}`);\n    \n    const audioBuffer = await audioResponse.arrayBuffer();\n    return `data:audio/wav;base64,${Buffer.from(audioBuffer).toString('base64')}`;\n}\n\n\nexport const previewSpeech = ai.defineFlow(\n  {\n    name: 'previewSpeech',\n    inputSchema: PreviewSpeechInputSchema,\n    outputSchema: PreviewSpeechOutputSchema,\n  },\n  async (input) => {\n    \n    const [provider, voiceName] = input.voice.split('/');\n    let audioDataUri = '';\n    \n    try {\n        switch (provider) {\n            case 'openai':\n                audioDataUri = await handleOpenAIPreview(voiceName);\n                break;\n            case 'amazon':\n                audioDataUri = await handleAmazonPreview(voiceName);\n                break;\n            case 'vibevoice':\n                audioDataUri = await handleVibeVoicePreview(voiceName);\n                break;\n            default:\n                throw new Error(`Unsupported voice provider: ${provider}`);\n        }\n        \n        return { audioDataUri };\n    } catch (error) {\n        console.error(\"Error in previewSpeech flow:\", error);\n        const message = error instanceof Error ? error.message : \"An unknown error occurred\";\n        throw new Error(`Could not process voice preview: ${message}`);\n    }\n  }\n);\n","size_bytes":3918},"src/ai/flows/quiz-feedback-flow.ts":{"content":"\n'use server';\n\n/**\n * @fileOverview An AI agent for generating personalized feedback after a quiz.\n *\n * - generateQuizFeedback - Creates personalized suggestions based on failed questions.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { QuizFeedbackInputSchema, QuizFeedbackOutputSchema, type QuizFeedbackInput } from '@/ai/schemas/quiz';\n\nexport async function generateQuizFeedback(input: QuizFeedbackInput): Promise<QuizFeedbackOutputSchema> {\n  return generateQuizFeedbackFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateQuizFeedbackPrompt',\n  input: { schema: QuizFeedbackInputSchema },\n  output: { schema: QuizFeedbackOutputSchema },\n  prompt: `You are an expert tutor. A student has just completed a quiz based on the provided document and answered some questions incorrectly.\nYour task is to provide personalized feedback and suggest topics for them to review.\n\n1.  Analyze the list of failed questions.\n2.  Identify the core concepts or topics the user is struggling with based on these questions and the original document text.\n3.  Generate a concise, encouraging, and helpful list of suggestions.\n4.  Format the response as Markdown.\n\nOriginal Document Text:\n---\n{{{documentText}}}\n---\n\nFailed Questions:\n---\n{{#each failedQuestions}}\n- Question: \"{{question}}\"\n  - User's Answer: \"{{userAnswer}}\"\n  - Correct Answer: \"{{correctAnswer}}\"\n---\n{{/each}}\n`,\n});\n\nconst generateQuizFeedbackFlow = ai.defineFlow(\n  {\n    name: 'generateQuizFeedbackFlow',\n    inputSchema: QuizFeedbackInputSchema,\n    outputSchema: QuizFeedbackOutputSchema,\n  },\n  async (input) => {\n    const { output } = await prompt(input);\n    return output!;\n  }\n);\n","size_bytes":1662},"src/ai/flows/quiz-flow.ts":{"content":"'use server';\n\n/**\n * @fileOverview An AI agent for generating quizzes from a document.\n *\n * - generateQuiz - A function that creates quiz questions.\n * - GenerateQuizInput - The input type for the generateQuiz function.\n * - GenerateQuizOutput - The return type for the generateQuiz function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport { GenerateQuizInputSchema, GenerateQuizOutputSchema, type GenerateQuizInput, type GenerateQuizOutput } from '@/ai/schemas/quiz';\n\n// This line explicitly re-exports the type so it can be imported by other files\nexport type { GenerateQuizOutput };\n\nexport async function generateQuiz(input: GenerateQuizInput): Promise<GenerateQuizOutput> {\n  return generateQuizFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateQuizPrompt',\n  input: {schema: GenerateQuizInputSchema},\n  output: {schema: GenerateQuizOutputSchema},\n  prompt: `You are an expert educator. Your task is to read the following document and create a quiz to test a user's understanding of the material.\n  Generate a mix of multiple-choice and true/false questions. For each question, provide the correct answer and a brief explanation.\n\n  Document Text:\n  ---\n  {{{documentText}}}\n  ---\n  `,\n});\n\nconst generateQuizFlow = ai.defineFlow(\n  {\n    name: 'generateQuizFlow',\n    inputSchema: GenerateQuizInputSchema,\n    outputSchema: GenerateQuizOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);","size_bytes":1464},"src/ai/flows/summarize-pdf.ts":{"content":"'use server';\n\n/**\n * @fileOverview An AI agent for PDF summarization and key point extraction.\n *\n * - summarizePdf - A function that handles the PDF analysis process.\n * - SummarizePdfInput - The input type for the summarizePdf function.\n * - SummarizePdfOutput - The return type for the summarizePdf function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst SummarizePdfInputSchema = z.object({\n  pdfText: z.string().describe('The text content extracted from the PDF file.'),\n});\nexport type SummarizePdfInput = z.infer<typeof SummarizePdfInputSchema>;\n\nconst SummarizePdfOutputSchema = z.object({\n  summary: z.string().describe('A concise summary of the PDF content.'),\n  keyPoints: z.array(z.string()).describe('A list of the most important key points from the document.'),\n});\nexport type SummarizePdfOutput = z.infer<typeof SummarizePdfOutputSchema>;\n\nexport async function summarizePdf(input: SummarizePdfInput): Promise<SummarizePdfOutput> {\n  return summarizePdfFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'summarizePdfPrompt',\n  input: {schema: SummarizePdfInputSchema},\n  output: {schema: SummarizePdfOutputSchema},\n  prompt: `You are an expert analyst. Please provide a concise summary and a list of the main key points from the following document text:\\n\\n{{{pdfText}}}`, \n});\n\nconst summarizePdfFlow = ai.defineFlow(\n  {\n    name: 'summarizePdfFlow',\n    inputSchema: SummarizePdfInputSchema,\n    outputSchema: SummarizePdfOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n","size_bytes":1580},"src/ai/flows/voice-selection.ts":{"content":"/**\n * @fileOverview Implements a Genkit flow for voice selection in a text-to-speech application.\n *\n * Exports:\n *   - `getAvailableVoices`: Retrieves a list of available voices based on admin settings.\n *   - `AvailableVoice`: The type for an available voice.\n */\n\nimport {ai} from '@/ai/genkit';\nimport { getVoiceProviderSettings } from '@/lib/admin-actions';\nimport {z} from 'zod';\n\nconst AvailableVoiceSchema = z.object({\n  name: z.string().describe('The unique identifier for the voice, including provider.'),\n  displayName: z.string().describe('The user-facing name for the voice.'),\n  gender: z.string().describe('The gender of the voice.'),\n  provider: z.enum(['openai', 'amazon', 'vibevoice', 'lemonfox']).describe('The TTS provider for the voice.'),\n});\nexport type AvailableVoice = z.infer<typeof AvailableVoiceSchema>;\n\nconst allVoices: AvailableVoice[] = [\n    // OpenAI\n    { name: 'openai/alloy', displayName: 'Alloy', gender: 'Neutral', provider: 'openai' },\n    { name: 'openai/echo', displayName: 'Echo', gender: 'Male', provider: 'openai' },\n    { name: 'openai/fable', displayName: 'Fable', gender: 'Male', provider: 'openai' },\n    { name: 'openai/onyx', displayName: 'Onyx', gender: 'Male', provider: 'openai' },\n    { name: 'openai/nova', displayName: 'Nova', gender: 'Female', provider: 'openai' },\n    { name: 'openai/shimmer', displayName: 'Shimmer', gender: 'Female', provider: 'openai' },\n    // Amazon Polly\n    { name: 'amazon/Matthew', displayName: 'Matthew', gender: 'Male', provider: 'amazon' },\n    { name: 'amazon/Joanna', displayName: 'Joanna', gender: 'Female', provider: 'amazon' },\n    { name: 'amazon/Ivy', displayName: 'Ivy', gender: 'Female', provider: 'amazon' },\n    { name: 'amazon/Justin', displayName: 'Justin', gender: 'Male', provider: 'amazon' },\n    { name: 'amazon/Brian', displayName: 'Brian', gender: 'Male', provider: 'amazon' },\n    { name: 'amazon/Amy', displayName: 'Amy', gender: 'Female', provider: 'amazon' },\n    { name: 'amazon/Nicole', displayName: 'Nicole', gender: 'Female', provider: 'amazon' },\n    // VibeVoice\n    { name: 'vibevoice/en-Alice_woman', displayName: 'Alice', gender: 'Female', provider: 'vibevoice' },\n    { name: 'vibevoice/en-Carter_man', displayName: 'Carter', gender: 'Male', provider: 'vibevoice' },\n    { name: 'vibevoice/en-Frank_man', displayName: 'Frank', gender: 'Male', provider: 'vibevoice' },\n    { name: 'vibevoice/en-Maya_woman', displayName: 'Maya', gender: 'Female', provider: 'vibevoice' },\n    // Lemonfox\n    { name: 'lemonfox/sarah', displayName: 'Sarah', gender: 'Female', provider: 'lemonfox' },\n    { name: 'lemonfox/michael', displayName: 'Michael', gender: 'Male', provider: 'lemonfox' },\n    { name: 'lemonfox/bella', displayName: 'Bella', gender: 'Female', provider: 'lemonfox' },\n    { name: 'lemonfox/liam', displayName: 'Liam', gender: 'Male', provider: 'lemonfox' },\n    { name: 'lemonfox/jessica', displayName: 'Jessica', gender: 'Female', provider: 'lemonfox' },\n];\n\nexport async function getAvailableVoices(): Promise<AvailableVoice[]> {\n  try {\n    const settings = await getVoiceProviderSettings();\n    const enabledProviders = Object.keys(settings).filter(provider => settings[provider]);\n    \n    // If no settings are stored, enable all providers by default.\n    if (enabledProviders.length === 0) {\n        return allVoices;\n    }\n\n    return allVoices.filter(voice => enabledProviders.includes(voice.provider));\n  } catch (error) {\n    console.error(\"Failed to fetch voice provider settings, returning all voices as a fallback:\", error);\n    // In case of an error (e.g., KV not available), return all voices to not break the app.\n    return allVoices;\n  }\n}\n\nexport function getAllVoiceProviders(): string[] {\n    const providers = new Set(allVoices.map(v => v.provider));\n    return Array.from(providers);\n}\n","size_bytes":3837},"src/ai/schemas/quiz.ts":{"content":"\nimport { z } from 'genkit';\n\nexport const GenerateQuizInputSchema = z.object({\n  documentText: z.string().describe('The full text content of the document.'),\n});\nexport type GenerateQuizInput = z.infer<typeof GenerateQuizInputSchema>;\n\nexport const QuizQuestionSchema = z.object({\n    question: z.string().describe(\"The quiz question.\"),\n    type: z.enum(['multiple-choice', 'true-false']).describe(\"The type of question.\"),\n    options: z.array(z.string()).optional().describe(\"A list of possible answers for multiple-choice questions.\"),\n    answer: z.string().describe(\"The correct answer.\"),\n    explanation: z.string().describe(\"A brief explanation for why the answer is correct.\")\n});\n\nexport const GenerateQuizOutputSchema = z.object({\n  quiz: z.array(QuizQuestionSchema).describe('A list of quiz questions with answers and explanations.'),\n});\nexport type GenerateQuizOutput = z.infer<typeof GenerateQuizOutputSchema>;\nexport type QuizQuestion = z.infer<typeof QuizQuestionSchema>;\n\n// Schemas for Personalized Feedback\nexport const QuizFeedbackInputSchema = z.object({\n    documentText: z.string().describe('The full text content of the original document.'),\n    failedQuestions: z.array(z.object({\n        question: z.string(),\n        userAnswer: z.string(),\n        correctAnswer: z.string(),\n    })).describe('An array of questions the user answered incorrectly.'),\n});\nexport type QuizFeedbackInput = z.infer<typeof QuizFeedbackInputSchema>;\n\nexport const QuizFeedbackOutputSchema = z.object({\n    feedback: z.string().describe('Personalized feedback and suggestions for the user, formatted as Markdown.'),\n});\nexport type QuizFeedbackOutput = z.infer<typeof QuizFeedbackOutputSchema>;\n","size_bytes":1701},"src/api/upload/route.ts":{"content":"\nimport { NextRequest, NextResponse } from 'next/server';\nimport { put } from '@vercel/blob';\nimport { getSession } from '@/lib/session';\nimport { randomUUID } from 'crypto';\n\nexport async function POST(request: NextRequest) {\n  const session = await getSession();\n  // Allow uploads even if username is not set yet (e.g., during initial document processing)\n  if (!session?.userId) {\n    return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });\n  }\n\n  const originalFilename = request.headers.get('x-vercel-filename');\n  if (!originalFilename) {\n    return NextResponse.json(\n      { message: 'Filename is missing' },\n      { status: 400 }\n    );\n  }\n  \n  if (!request.body) {\n    return NextResponse.json(\n      { message: 'Request body is missing' },\n      { status: 400 }\n    );\n  }\n  \n  // Use a unique identifier for the user folder, which is the userId.\n  const userIdentifier = session.userId;\n  const docId = request.headers.get('x-doc-id') || randomUUID();\n  const blobName = `readify/${userIdentifier}/${docId}-${originalFilename}`;\n\n  try {\n    const blob = await put(blobName, request.body, {\n      access: 'public',\n      addRandomSuffix: false,\n    });\n\n    return NextResponse.json(blob);\n\n  } catch (error) {\n    console.error('Error uploading file:', error);\n    return NextResponse.json(\n      { message: 'Error uploading file' },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":1400},"src/app/admin/page.tsx":{"content":"\n'use client';\n\nimport React, { useEffect, useState, Suspense } from 'react';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { Users, FileText, Trash2, LogOut, PlusCircle, User, File, TrendingUp, RefreshCcw, LogIn, Inbox, Loader2, Settings } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Button } from '@/components/ui/button';\nimport { useToast } from '@/hooks/use-toast';\nimport { getAllUsers, getAllDocuments, deleteUser, deleteDocumentAsAdmin, getAdminDashboardStats, resendInvitation } from '@/lib/admin-actions';\nimport { removeLemonfoxFromSettings } from '@/lib/cleanup-actions';\nimport type { User as UserType, DocumentWithAuthorEmail as Document, AdminDashboardStats } from '@/lib/admin-actions';\nimport AddUserDialog from '@/components/add-user-dialog';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { TooltipProvider, Tooltip as UiTooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip';\nimport AdminInbox from '@/components/admin-inbox';\nimport AdminSettings from '@/components/admin-settings';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\"\nimport dynamic from 'next/dynamic';\n\nconst BarChart = dynamic(() => import('recharts').then(mod => mod.BarChart), { ssr: false });\nconst Bar = dynamic(() => import('recharts').then(mod => mod.Bar), { ssr: false });\nconst XAxis = dynamic(() => import('recharts').then(mod => mod.XAxis), { ssr: false });\nconst YAxis = dynamic(() => import('recharts').then(mod => mod.YAxis), { ssr: false });\nconst CartesianGrid = dynamic(() => import('recharts').then(mod => mod.CartesianGrid), { ssr: false });\nconst RechartsTooltip = dynamic(() => import('recharts').then(mod => mod.Tooltip), { ssr: false });\nconst ResponsiveContainer = dynamic(() => import('recharts').then(mod => mod.ResponsiveContainer), { ssr: false });\n\n\nfunction AdminDashboard() {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const { toast } = useToast();\n  const [users, setUsers] = useState<UserType[]>([]);\n  const [documents, setDocuments] = useState<Document[]>([]);\n  const [stats, setStats] = useState<AdminDashboardStats | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isAddUserOpen, setIsAddUserOpen] = useState(false);\n  const [prefilledUserData, setPrefilledUserData] = useState<{name: string, email: string, submissionId?: string} | null>(null);\n\n  useEffect(() => {\n    // Run one-time cleanup action for old database settings.\n    removeLemonfoxFromSettings().then(result => {\n      if (result.success) {\n        console.log(result.message);\n      } else {\n        console.error(\"Cleanup failed:\", result.message);\n      }\n    });\n  }, []);\n\n  const fetchAdminData = async () => {\n    setIsLoading(true);\n    try {\n      const [usersData, documentsData, statsData] = await Promise.all([\n        getAllUsers(),\n        getAllDocuments(),\n        getAdminDashboardStats(),\n      ]);\n      setUsers(usersData);\n      setDocuments(documentsData);\n      setStats(statsData);\n    } catch (error) {\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: error instanceof Error ? error.message : 'Failed to fetch admin data.',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchAdminData();\n\n    const action = searchParams.get('action');\n    if (action === 'addUser') {\n        const name = searchParams.get('name');\n        const email = searchParams.get('email');\n        const submissionId = searchParams.get('submissionId') || undefined;\n        if (name && email) {\n            setPrefilledUserData({ name, email, submissionId });\n            setIsAddUserOpen(true);\n            // Clean up URL\n            router.replace('/admin', { scroll: false });\n        }\n    }\n\n  }, [searchParams, router]);\n\n  const handleDeleteUser = async (userId: string) => {\n    try {\n      const result = await deleteUser(userId);\n      if (result.success) {\n          toast({ title: 'Success', description: 'User deleted successfully.' });\n          fetchAdminData(); // Refresh data\n      } else {\n          throw new Error(result.message);\n      }\n    } catch (error) {\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: error instanceof Error ? error.message : 'Failed to delete user.',\n      });\n    }\n  };\n\n  const handleResendInvitation = async (userId: string) => {\n      try {\n        const result = await resendInvitation(userId);\n        if(result.success) {\n            toast({ title: 'Success', description: 'Invitation has been resent.' });\n            fetchAdminData();\n        } else {\n            throw new Error(result.message);\n        }\n      } catch (error) {\n           toast({\n                variant: 'destructive',\n                title: 'Error',\n                description: error instanceof Error ? error.message : 'Failed to resend invitation.',\n            });\n      }\n  }\n  \n  const handleImpersonate = async (userId: string) => {\n    const response = await fetch('/api/admin/impersonate', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ userId }),\n    });\n    if(response.ok) {\n        router.push('/read');\n    } else {\n        const data = await response.json();\n        toast({ variant: 'destructive', title: 'Error', description: data.message || 'Could not impersonate user.' });\n    }\n  }\n\n  const handleDeleteDocument = async (docId: string) => {\n    try {\n        const result = await deleteDocumentAsAdmin(docId);\n        if(result.success) {\n            toast({ title: 'Success', description: 'Document deleted successfully.' });\n            fetchAdminData(); // Refresh data\n        } else {\n            throw new Error(result.message);\n        }\n    } catch (error) {\n         toast({\n            variant: 'destructive',\n            title: 'Error',\n            description: error instanceof Error ? error.message : 'Failed to delete document.',\n        });\n    }\n  }\n  \n  const handleLogout = async () => {\n    await fetch('/api/auth/logout', { method: 'POST' });\n    router.push('/');\n  };\n\n  const handleAddUserClick = () => {\n    setPrefilledUserData(null);\n    setIsAddUserOpen(true);\n  }\n  \n\n  return (\n    <TooltipProvider>\n    <div className=\"flex min-h-screen w-full flex-col bg-muted/40\">\n       <header className=\"sticky top-0 z-30 flex h-14 items-center justify-between gap-4 border-b bg-background px-4 sm:static sm:h-auto sm:border-0 sm:bg-transparent sm:px-6\">\n          <h1 className=\"text-2xl font-headline text-primary\">Admin Panel</h1>\n          <div className=\"flex items-center gap-2\">\n            <Button onClick={() => router.push('/read')} variant=\"outline\">Go to App</Button>\n            <Button onClick={handleLogout} variant=\"ghost\" size=\"icon\">\n                <LogOut className=\"h-5 w-5\"/>\n                <span className=\"sr-only\">Log out</span>\n            </Button>\n          </div>\n      </header>\n      <main className=\"flex flex-1 flex-col gap-8 p-4 sm:px-6\">\n        <Tabs defaultValue=\"dashboard\">\n          <TabsList>\n            <TabsTrigger value=\"dashboard\">Dashboard</TabsTrigger>\n            <TabsTrigger value=\"users\">User Management</TabsTrigger>\n            <TabsTrigger value=\"documents\">Document Management</TabsTrigger>\n            <TabsTrigger value=\"inbox\">Inbox</TabsTrigger>\n            <TabsTrigger value=\"settings\">Settings</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"dashboard\" className=\"pt-6\">\n             <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\n                    <Users className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">{stats?.totalUsers}</div>\n                  </CardContent>\n                </Card>\n                 <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">New Users (30d)</CardTitle>\n                    <Users className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">+{stats?.newUsersLast30Days}</div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Documents</CardTitle>\n                    <File className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">{stats?.totalDocuments}</div>\n                  </CardContent>\n                </Card>\n                 <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Documents Uploaded (30d)</CardTitle>\n                    <File className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">+{stats?.docsUploadedLast30Days}</div>\n                  </CardContent>\n                </Card>\n            </div>\n            <div className='grid gap-4 md:grid-cols-2 mt-6'>\n                <Card>\n                    <CardHeader>\n                        <CardTitle className='flex items-center gap-2'><TrendingUp /> User Growth</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                        <ResponsiveContainer width=\"100%\" height={300}>\n                            <BarChart data={stats?.userSignupsByWeek}>\n                                <CartesianGrid strokeDasharray=\"3 3\" />\n                                <XAxis dataKey=\"week\" />\n                                <YAxis allowDecimals={false} />\n                                <RechartsTooltip contentStyle={{ background: 'hsl(var(--background))', border: '1px solid hsl(var(--border))' }}/>\n                                <Bar dataKey=\"signups\" fill=\"hsl(var(--primary))\" />\n                            </BarChart>\n                        </ResponsiveContainer>\n                    </CardContent>\n                </Card>\n                 <Card>\n                    <CardHeader>\n                        <CardTitle>Top Users by Documents</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                       <Table>\n                            <TableHeader>\n                                <TableRow>\n                                    <TableHead>User</TableHead>\n                                    <TableHead>Documents</TableHead>\n                                </TableRow>\n                            </TableHeader>\n                            <TableBody>\n                                {stats?.topUsersByDocs.map(user => (\n                                    <TableRow key={user.id}>\n                                        <TableCell>{user.email}</TableCell>\n                                        <TableCell>{user.docCount}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </CardContent>\n                </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"users\" className=\"pt-6\">\n            <Card>\n                <CardHeader className=\"flex justify-between items-center flex-row\">\n                <div className=\"flex items-center gap-2\">\n                    <Users />\n                    <CardTitle>User Management</CardTitle>\n                </div>\n                <Button onClick={handleAddUserClick}><PlusCircle className=\"mr-2\"/>Add User</Button>\n                </CardHeader>\n                <CardContent>\n                <Table>\n                    <TableHeader>\n                    <TableRow>\n                        <TableHead>Email</TableHead>\n                        <TableHead>Role</TableHead>\n                        <TableHead>Signed Up</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Actions</TableHead>\n                    </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                    {users.map(user => (\n                        <TableRow key={user.id}>\n                        <TableCell>{user.email}</TableCell>\n                        <TableCell>{user.isAdmin ? 'Admin' : 'User'}</TableCell>\n                        <TableCell>{new Date(user.createdAt).toLocaleDateString()}</TableCell>\n                        <TableCell>{user.username ? 'Active' : 'Pending Invitation'}</TableCell>\n                        <TableCell className='space-x-1'>\n                             {!user.username && (\n                                <UiTooltip>\n                                    <TooltipTrigger asChild>\n                                        <Button variant=\"outline\" size=\"icon\" onClick={() => handleResendInvitation(user.id)}>\n                                            <RefreshCcw className=\"h-4 w-4\" />\n                                        </Button>\n                                    </TooltipTrigger>\n                                    <TooltipContent><p>Resend Invitation</p></TooltipContent>\n                                </UiTooltip>\n                             )}\n                            <AlertDialog>\n                                <AlertDialogTrigger asChild>\n                                     <UiTooltip>\n                                        <TooltipTrigger asChild>\n                                            <Button variant=\"outline\" size=\"icon\" disabled={user.isAdmin}>\n                                                <LogIn className=\"h-4 w-4\" />\n                                            </Button>\n                                        </TooltipTrigger>\n                                        <TooltipContent><p>Log in as User</p></TooltipContent>\n                                     </UiTooltip>\n                                </AlertDialogTrigger>\n                                <AlertDialogContent>\n                                    <AlertDialogHeader>\n                                    <AlertDialogTitle>Log In as {user.email}?</AlertDialogTitle>\n                                    <AlertDialogDescription>\n                                        Your current admin session will be temporarily replaced. You can return to your admin account from a banner in the app.\n                                    </AlertDialogDescription>\n                                    </AlertDialogHeader>\n                                    <AlertDialogFooter>\n                                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                    <AlertDialogAction onClick={() => handleImpersonate(user.id)}>Continue</AlertDialogAction>\n                                    </AlertDialogFooter>\n                                </AlertDialogContent>\n                            </AlertDialog>\n                             <AlertDialog>\n                                <AlertDialogTrigger asChild>\n                                    <UiTooltip>\n                                        <TooltipTrigger asChild>\n                                            <Button variant=\"destructive\" size=\"icon\" disabled={user.isAdmin}>\n                                                <Trash2 className=\"h-4 w-4\" />\n                                            </Button>\n                                        </TooltipTrigger>\n                                        <TooltipContent><p>Delete User</p></TooltipContent>\n                                    </UiTooltip>\n                                </AlertDialogTrigger>\n                                <AlertDialogContent>\n                                    <AlertDialogHeader>\n                                    <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n                                    <AlertDialogDescription>\n                                        This will permanently delete the user and all their documents. This action cannot be undone.\n                                    </AlertDialogDescription>\n                                    </AlertDialogHeader>\n                                    <AlertDialogFooter>\n                                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                    <AlertDialogAction onClick={() => handleDeleteUser(user.id)} className=\"bg-destructive hover:bg-destructive/90\">Delete User</AlertDialogAction>\n                                    </AlertDialogFooter>\n                                </AlertDialogContent>\n                            </AlertDialog>\n                        </TableCell>\n                        </TableRow>\n                    ))}\n                    </TableBody>\n                </Table>\n                </CardContent>\n            </Card>\n          </TabsContent>\n          \n          <TabsContent value=\"documents\" className=\"pt-6\">\n            <Card>\n                <CardHeader className=\"flex items-center gap-2 flex-row\">\n                    <FileText />\n                    <CardTitle>Document Management</CardTitle>\n                </CardHeader>\n                <CardContent>\n                <Table>\n                    <TableHeader>\n                    <TableRow>\n                        <TableHead>File Name</TableHead>\n                        <TableHead>Owner (Email)</TableHead>\n                        <TableHead>Uploaded</TableHead>\n                        <TableHead>Actions</TableHead>\n                    </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                    {documents.map(doc => (\n                        <TableRow key={doc.id}>\n                        <TableCell>{doc.fileName}</TableCell>\n                        <TableCell>{doc.ownerEmail}</TableCell>\n                        <TableCell>{new Date(doc.createdAt).toLocaleDateString()}</TableCell>\n                        <TableCell className=\"space-x-2\">\n                            <a href={doc.pdfUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                                <Button variant=\"outline\">View PDF</Button>\n                            </a>\n                            <AlertDialog>\n                                <AlertDialogTrigger asChild>\n                                    <Button variant=\"destructive\">\n                                        <Trash2 className=\"mr-2 h-4 w-4\" />\n                                        Delete\n                                    </Button>\n                                </AlertDialogTrigger>\n                                <AlertDialogContent>\n                                    <AlertDialogHeader>\n                                        <AlertDialogTitle>Delete Document?</AlertDialogTitle>\n                                        <AlertDialogDescription>\n                                            This will permanently delete the document \"{doc.fileName}\". This action cannot be undone.\n                                        </AlertDialogDescription>\n                                    </AlertDialogHeader>\n                                    <AlertDialogFooter>\n                                        <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                        <AlertDialogAction onClick={() => handleDeleteDocument(doc.id)} className=\"bg-destructive hover:bg-destructive/90\">Delete</AlertDialogAction>\n                                    </AlertDialogFooter>\n                                </AlertDialogContent>\n                            </AlertDialog>\n                        </TableCell>\n                        </TableRow>\n                    ))}\n                    </TableBody>\n                </Table>\n                </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"inbox\" className=\"pt-6\">\n             <AdminInbox />\n          </TabsContent>\n          \n          <TabsContent value=\"settings\" className=\"pt-6\">\n             <AdminSettings />\n          </TabsContent>\n\n        </Tabs>\n      </main>\n    </div>\n    <AddUserDialog \n      isOpen={isAddUserOpen}\n      onClose={() => setIsAddUserOpen(false)}\n      onUserAdded={() => {\n        fetchAdminData();\n        setIsAddUserOpen(false);\n      }}\n      prefilledData={prefilledUserData}\n    />\n    </TooltipProvider>\n  );\n}\n\nexport default function AdminPage() {\n  return (\n    <Suspense fallback={\n        <div className=\"flex h-screen w-full items-center justify-center\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n        </div>\n    }>\n      <AdminDashboard />\n    </Suspense>\n  );\n}\n","size_bytes":21558},"src/app/contact/page.tsx":{"content":"\n'use client';\n\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from '@/hooks/use-toast';\nimport { useState, useEffect } from 'react';\nimport { Loader2, ArrowLeft, Send, CheckCircle } from 'lucide-react';\nimport Link from 'next/link';\nimport { sendGeneralContactMessage } from '@/lib/actions';\nimport { AlertDialog, AlertDialogContent, AlertDialogHeader, AlertDialogTitle, AlertDialogDescription } from '@/components/ui/alert-dialog';\nimport { useRouter } from 'next/navigation';\n\nconst contactFormSchema = z.object({\n  name: z.string().min(2, { message: 'Name must be at least 2 characters.' }),\n  email: z.string().email({ message: 'Please enter a valid email address.' }),\n  message: z.string().min(10, { message: 'Message must be at least 10 characters.' }),\n});\n\ntype ContactFormValues = z.infer<typeof contactFormSchema>;\n\nexport default function ContactPage() {\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const router = useRouter();\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout;\n    if (isSuccess) {\n      timer = setTimeout(() => {\n        router.push('/');\n      }, 5000);\n    }\n    return () => clearTimeout(timer);\n  }, [isSuccess, router]);\n\n  const form = useForm<ContactFormValues>({\n    resolver: zodResolver(contactFormSchema),\n    defaultValues: {\n      name: '',\n      email: '',\n      message: '',\n    },\n  });\n\n  const onSubmit = async (values: ContactFormValues) => {\n    setIsLoading(true);\n    try {\n      const result = await sendGeneralContactMessage(values);\n      if (result.success) {\n        setIsSuccess(true);\n        form.reset();\n      } else {\n        throw new Error(result.message || 'An unexpected error occurred.');\n      }\n    } catch (error) {\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: error instanceof Error ? error.message : 'Failed to send message.',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <main className=\"flex items-center justify-center min-h-screen bg-background relative\">\n       <AlertDialog open={isSuccess}>\n        <AlertDialogContent>\n          <AlertDialogHeader className=\"flex flex-col items-center text-center\">\n            <CheckCircle className=\"h-16 w-16 text-green-500 mb-4\" />\n            <AlertDialogTitle className=\"text-2xl\">Message Sent!</AlertDialogTitle>\n            <AlertDialogDescription>\n              Thanks for reaching out. We'll get back to you soon. You will be redirected to the homepage shortly.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      <div className=\"absolute top-4 left-4\">\n        <Button asChild variant=\"outline\">\n          <Link href=\"/\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Home\n          </Link>\n        </Button>\n      </div>\n      <Card className=\"w-full max-w-lg shadow-2xl\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-4xl font-headline text-primary\">Contact Us</CardTitle>\n          <CardDescription>Have a question or feedback? Let us know!</CardDescription>\n        </CardHeader>\n        <form onSubmit={form.handleSubmit(onSubmit)}>\n          <CardContent className=\"space-y-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Full Name</Label>\n              <Input id=\"name\" {...form.register('name')} />\n              {form.formState.errors.name && <p className=\"text-sm font-medium text-destructive\">{form.formState.errors.name.message}</p>}\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input id=\"email\" type=\"email\" {...form.register('email')} />\n               {form.formState.errors.email && <p className=\"text-sm font-medium text-destructive\">{form.formState.errors.email.message}</p>}\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"message\">Your Message</Label>\n              <Textarea id=\"message\" {...form.register('message')} rows={5} />\n               {form.formState.errors.message && <p className=\"text-sm font-medium text-destructive\">{form.formState.errors.message.message}</p>}\n            </div>\n          </CardContent>\n          <CardFooter>\n            <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n              {isLoading ? <Loader2 className=\"animate-spin\" /> : <Send className=\"mr-2\" />}\n              {isLoading ? 'Sending...' : 'Send Message'}\n            </Button>\n          </CardFooter>\n        </form>\n      </Card>\n    </main>\n  );\n}\n","size_bytes":5082},"src/app/login/page.tsx":{"content":"\n'use client';\n\nimport { useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from '@/hooks/use-toast';\nimport { Eye, EyeOff, ArrowLeft } from 'lucide-react';\nimport Link from 'next/link';\n\nexport default function AuthPage() {\n  const router = useRouter();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleLogin = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setLoading(true);\n    const form = event.currentTarget;\n    const formData = new FormData(form);\n    const email = formData.get('email');\n    const password = formData.get('password');\n\n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password }),\n      });\n      \n      const data = await response.json();\n\n      if (response.ok && data.success && data.redirectUrl) {\n        router.push(data.redirectUrl);\n      } else {\n        toast({\n          variant: \"destructive\",\n          title: \"Login Failed\",\n          description: data.message || \"Invalid credentials\",\n        });\n      }\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"An unexpected error occurred.\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <main className=\"flex items-center justify-center min-h-screen bg-background relative\">\n      <div className=\"absolute top-4 left-4\">\n        <Button asChild variant=\"outline\">\n          <Link href=\"/\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Home\n          </Link>\n        </Button>\n      </div>\n      <Card className=\"w-full max-w-sm shadow-2xl\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-4xl font-headline text-primary\">Readify</CardTitle>\n          <CardDescription>Your intelligent PDF reader</CardDescription>\n        </CardHeader>\n        <form onSubmit={handleLogin}>\n            <CardContent className=\"space-y-4 pt-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"login-email\">Email</Label>\n                <Input id=\"login-email\" name=\"email\" type=\"email\" required />\n              </div>\n              <div className=\"space-y-2 relative\">\n                <Label htmlFor=\"login-password\">Password</Label>\n                <Input id=\"login-password\" name=\"password\" type={showPassword ? 'text' : 'password'} required />\n                <Button \n                  type=\"button\" \n                  variant=\"ghost\" \n                  size=\"icon\" \n                  className=\"absolute bottom-1 right-1 h-7 w-7\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                </Button>\n              </div>\n            </CardContent>\n            <CardFooter className=\"flex-col gap-4\">\n              <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n                {loading ? 'Logging in...' : 'Login'}\n              </Button>\n              <p className=\"text-center text-sm text-muted-foreground\">\n                Don&apos;t have an account?{' '}\n                <Link href=\"/request-access\" className=\"underline hover:text-primary\">\n                  Request Access\n                </Link>\n              </p>\n            </CardFooter>\n        </form>\n      </Card>\n    </main>\n  );\n}\n","size_bytes":3877},"src/app/read/layout.tsx":{"content":"import React from 'react';\n\n/**\n * Layout for the /read route.\n * This file is necessary to resolve a Vercel deployment error where Next.js\n * requires each route to have its own layout file.\n */\nexport default function ReadLayout({\n    children,\n}: {\n    children: React.ReactNode;\n}) {\n    return <>{children}</>;\n}","size_bytes":317},"src/app/read/page.tsx":{"content":"'use client';\n\nimport React from 'react';\nimport { useReadPage } from '@/hooks/use-read-page';\nimport { Sidebar, SidebarHeader, SidebarContent, SidebarFooter } from '@/components/ui/sidebar';\nimport { Separator } from '@/components/ui/separator';\nimport { cn } from '@/lib/utils';\nimport UserPanel from '@/components/user-panel';\nimport AudioPlayer from '@/components/audio-player';\nimport AiDialog from '@/components/ai-dialog';\nimport { ThemeToggle } from '@/components/theme-toggle';\nimport { BarChart, BookOpenCheck, BrainCircuit, Lightbulb, MessageSquare, UploadCloud, Menu } from 'lucide-react';\nimport { SidebarMenuItem, SidebarMenuButton } from '@/components/ui/sidebar';\nimport AudioSettingsPanel from '@/components/audio-settings-panel';\nimport DocumentLibrary from '@/components/document-library';\nimport MainContent from '@/components/main-content';\nimport { ChatWindow } from '@/components/chat-window';\nimport { TooltipProvider } from '@/components/ui/tooltip';\nimport { useMediaQuery } from '@/hooks/use-media-query';\nimport { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';\nimport { Button } from '@/components/ui/button';\n\nexport default function ReadPage() {\n  const state = useReadPage();\n  const isDesktop = useMediaQuery(\"(min-width: 768px)\");\n  const [isSidebarOpen, setIsSidebarOpen] = React.useState(false);\n\n  const SidebarContentItems = () => (\n    <>\n      <SidebarHeader>\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-2xl font-headline text-primary flex items-center gap-2\"><BarChart /> Readify</h1>\n          <ThemeToggle />\n        </div>\n      </SidebarHeader>\n\n      <SidebarContent>\n        <SidebarMenuItem>\n          <SidebarMenuButton onClick={() => state.handleUploadNewDocumentClick()}>\n            <UploadCloud />\n            Upload New Document\n          </SidebarMenuButton>\n        </SidebarMenuItem>\n        \n        <Separator className=\"my-2\" />\n\n        <AudioSettingsPanel\n          availableVoices={state.availableVoices}\n          selectedVoice={state.selectedVoice}\n          onSelectedVoiceChange={state.setSelectedVoice}\n          speakingRate={state.speakingRate}\n          onSpeakingRateChange={state.setSpeakingRate}\n          isAudioGenerating={state.activeDoc?.audioGenerationStatus === 'processing'}\n          isSpeaking={state.isSpeaking}\n          onPreviewVoice={state.handlePreviewVoice}\n        />\n        \n        <Separator className=\"my-2\" />\n\n        <SidebarMenuItem>\n            <SidebarMenuButton onClick={() => state.handleAiAction('summary')} disabled={!state.documentText}>\n                <Lightbulb />\n                Summarize & Key Points\n            </SidebarMenuButton>\n        </SidebarMenuItem>\n        <SidebarMenuItem>\n        <SidebarMenuButton onClick={() => state.handleAiAction('glossary')} disabled={!state.documentText}>\n            <BookOpenCheck />\n            Create Glossary\n        </SidebarMenuButton>\n        </SidebarMenuItem>\n        <SidebarMenuItem>\n            <SidebarMenuButton onClick={() => state.handleAiAction('quiz')} disabled={!state.documentText}>\n                <BrainCircuit />\n                {state.activeDoc?.quizAttempt ? 'Review Quiz' : 'Generate Quiz'}\n            </SidebarMenuButton>\n        </SidebarMenuItem>\n        <SidebarMenuItem>\n        <SidebarMenuButton onClick={() => state.setIsChatOpen(true)} disabled={!state.documentText}>\n            <MessageSquare />\n            Chat with Document\n        </SidebarMenuButton>\n        </SidebarMenuItem>\n        \n        <Separator className=\"my-2\" />\n\n        <DocumentLibrary\n          documents={state.userDocuments}\n          folders={state.userFolders}\n          activeDocId={state.activeDoc?.id || null}\n          onSelect={state.handleSelectDocument}\n          onDelete={state.handleDeleteDocument}\n          onGenerateAudio={state.handleGenerateAudioForDoc}\n          onUploadNew={state.handleUploadNewDocumentClick}\n          onCreateFolder={state.handleCreateFolder}\n          onDeleteFolder={state.handleDeleteFolder}\n          onMoveDocument={state.handleMoveDocument}\n        />\n        \n      </SidebarContent>\n      <SidebarFooter>\n        {state.session && <UserPanel session={state.session} onLogout={state.handleLogout} onUpdate={state.fetchSession} />}\n      </SidebarFooter>\n    </>\n  );\n\n  return (\n    <TooltipProvider>\n      <div className={cn(\"flex h-screen w-full bg-background\", state.isFullScreen && \"fixed inset-0 z-50\")}>\n        {isDesktop ? (\n          <Sidebar className={cn(state.isFullScreen && \"hidden\")}>\n             <SidebarContentItems />\n          </Sidebar>\n        ) : (\n          <Sheet open={isSidebarOpen} onOpenChange={setIsSidebarOpen}>\n            <SheetTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" className=\"absolute top-2 left-2 z-20\">\n                    <Menu />\n                </Button>\n            </SheetTrigger>\n            <SheetContent side=\"left\" className=\"w-72 p-0 flex flex-col\">\n              <SidebarContentItems />\n            </SheetContent>\n          </Sheet>\n        )}\n        \n        <div className=\"flex-1 flex flex-col relative bg-muted/30\">\n          <main className=\"flex-1 flex items-center justify-center overflow-auto\">\n            <MainContent\n              activeDoc={state.activeDoc}\n              isUploading={state.isUploading}\n              uploadStage={state.uploadStage}\n              pdfZoomLevel={state.pdfZoomLevel}\n              onFileChange={state.handleFileChange}\n              fileInputRef={state.fileInputRef}\n              onGenerateTextAudio={state.handleGenerateTextAudio}\n              highlightedSentence={state.highlightedSentence}\n              highlightColor={state.highlightColor}\n              highlightStyle={state.highlightStyle}\n            />\n          </main>\n          {(state.activeDoc || state.localAudioUrl) && (\n            <div className=\"absolute inset-x-0 bottom-0 z-10\">\n              <AudioPlayer\n                docStatus={state.activeDoc?.audioGenerationStatus || 'idle'}\n                isSpeaking={state.isSpeaking}\n                onPlayPause={state.handlePlayPause}\n                canPlay={!!(state.activeDoc?.audioUrl || state.localAudioUrl)}\n                playbackRate={state.playbackRate}\n                onPlaybackRateChange={state.setPlaybackRate}\n                showDownload={!!(state.activeDoc?.audioUrl || state.localAudioUrl)}\n                downloadUrl={state.activeDoc?.audioUrl || state.localAudioUrl || ''}\n                downloadFileName={`${state.activeDoc?.fileName?.replace(/\\.pdf$/i, '') || 'audio'}.mp3`}\n                progress={state.audioProgress}\n                duration={state.audioDuration}\n                currentTime={state.audioCurrentTime}\n                onSeek={state.handleSeek}\n                onForward={state.handleForward}\n                onRewind={state.handleRewind}\n                zoomLevel={state.pdfZoomLevel}\n                onZoomIn={state.handleZoomIn}\n                onZoomOut={state.handleZoomOut}\n                isFullScreen={state.isFullScreen}\n                onFullScreenToggle={() => state.setIsFullScreen(!state.isFullScreen)}\n                onSaveZoom={state.handleSaveZoom}\n                isSavingZoom={state.isSavingZoom}\n                isPdfLoaded={!!state.activeDoc}\n              />\n            </div>\n          )}\n        </div>\n        \n        {state.isChatOpen && state.activeDoc && (\n          <ChatWindow\n            ref={state.chatWindowRef}\n            key={state.activeDoc.id}\n            chatHistory={state.activeDoc.chatHistory || []}\n            isLoading={state.isChatLoading}\n            onSendMessage={state.handleSendMessage}\n            onClose={() => state.setIsChatOpen(false)}\n            onPlayAudio={state.handlePlayAiResponse}\n            onClearChat={state.handleClearChat}\n            isPlaying={state.isPreviewAudioPlaying}\n          />\n        )}\n\n        <audio \n          ref={state.audioRef} \n          onPlay={() => state.setIsSpeaking(true)}\n          onPause={() => state.setIsSpeaking(false)}\n          onEnded={() => {\n            state.setIsSpeaking(false);\n          }} \n          onLoadedMetadata={(e) => state.setAudioDuration(e.currentTarget.duration)}\n          onTimeUpdate={state.handleAudioTimeUpdate}\n          hidden \n        />\n        <audio ref={state.previewAudioRef} hidden />\n        <AiDialog\n          open={state.isAiDialogOpen}\n          onOpenChange={state.setIsAiDialogOpen}\n          type={state.aiDialogType}\n          isLoading={state.aiIsLoading}\n          summaryOutput={state.aiSummaryOutput}\n          glossaryOutput={state.aiGlossaryOutput}\n          quizOutput={state.aiQuizOutput}\n          quizAttempt={state.activeDoc?.quizAttempt || null}\n          onQuizSubmit={state.handleQuizSubmit}\n          onPlayAudio={state.handlePlayAiResponse}\n          isPlaying={state.isPreviewAudioPlaying}\n        />\n      </div>\n    </TooltipProvider>\n  );\n}","size_bytes":8970},"src/app/request-access/page.tsx":{"content":"\n'use client';\n\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from '@/hooks/use-toast';\nimport { useState, useEffect } from 'react';\nimport { Loader2, ArrowLeft, Send, CheckCircle } from 'lucide-react';\nimport Link from 'next/link';\nimport { sendContactMessage } from '@/lib/actions';\nimport { AlertDialog, AlertDialogContent, AlertDialogHeader, AlertDialogTitle, AlertDialogDescription } from '@/components/ui/alert-dialog';\nimport { useRouter } from 'next/navigation';\n\nconst contactFormSchema = z.object({\n  name: z.string().min(2, { message: 'Name must be at least 2 characters.' }),\n  email: z.string().email({ message: 'Please enter a valid email address.' }),\n  message: z.string().min(10, { message: 'Message must be at least 10 characters.' }),\n});\n\ntype ContactFormValues = z.infer<typeof contactFormSchema>;\n\nexport default function RequestAccessPage() {\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const router = useRouter();\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout;\n    if (isSuccess) {\n      timer = setTimeout(() => {\n        router.push('/');\n      }, 5000);\n    }\n    return () => clearTimeout(timer);\n  }, [isSuccess, router]);\n\n  const form = useForm<ContactFormValues>({\n    resolver: zodResolver(contactFormSchema),\n    defaultValues: {\n      name: '',\n      email: '',\n      message: '',\n    },\n  });\n\n  const onSubmit = async (values: ContactFormValues) => {\n    setIsLoading(true);\n    try {\n      const result = await sendContactMessage(values);\n      if (result.success) {\n        setIsSuccess(true);\n        form.reset();\n      } else {\n        throw new Error(result.message || 'An unexpected error occurred.');\n      }\n    } catch (error) {\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: error instanceof Error ? error.message : 'Failed to send message.',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <main className=\"flex items-center justify-center min-h-screen bg-background relative\">\n      <AlertDialog open={isSuccess}>\n        <AlertDialogContent>\n          <AlertDialogHeader className=\"flex flex-col items-center text-center\">\n            <CheckCircle className=\"h-16 w-16 text-green-500 mb-4\" />\n            <AlertDialogTitle className=\"text-2xl\">Request Sent!</AlertDialogTitle>\n            <AlertDialogDescription>\n              Thanks for reaching out. We'll review your request and get back to you shortly. You will be redirected to the homepage shortly.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      <div className=\"absolute top-4 left-4\">\n        <Button asChild variant=\"outline\">\n          <Link href=\"/\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Home\n          </Link>\n        </Button>\n      </div>\n      <Card className=\"w-full max-w-lg shadow-2xl\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-4xl font-headline text-primary\">Request Access to Readify</CardTitle>\n          <CardDescription>Fill out the form below to request an account. We'll review your request and get back to you shortly.</CardDescription>\n        </CardHeader>\n        <form onSubmit={form.handleSubmit(onSubmit)}>\n          <CardContent className=\"space-y-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Full Name</Label>\n              <Input id=\"name\" {...form.register('name')} />\n              {form.formState.errors.name && <p className=\"text-sm font-medium text-destructive\">{form.formState.errors.name.message}</p>}\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input id=\"email\" type=\"email\" {...form.register('email')} />\n               {form.formState.errors.email && <p className=\"text-sm font-medium text-destructive\">{form.formState.errors.email.message}</p>}\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"message\">Tell us a bit about why you'd like to use our app</Label>\n              <Textarea id=\"message\" {...form.register('message')} rows={5} />\n               {form.formState.errors.message && <p className=\"text-sm font-medium text-destructive\">{form.formState.errors.message.message}</p>}\n            </div>\n          </CardContent>\n          <CardFooter>\n            <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n              {isLoading ? <Loader2 className=\"animate-spin\" /> : <Send className=\"mr-2\" />}\n              {isLoading ? 'Sending...' : 'Submit Request'}\n            </Button>\n          </CardFooter>\n        </form>\n      </Card>\n    </main>\n  );\n}\n","size_bytes":5214},"src/app/welcome/page.tsx":{"content":"'use client';\n\nimport { useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { useToast } from '@/hooks/use-toast';\nimport { setUsername } from '@/lib/actions';\nimport { Loader2 } from 'lucide-react';\n\nconst formSchema = z.object({\n  username: z.string()\n    .min(3, 'Username must be at least 3 characters.')\n    .max(20, 'Username cannot be longer than 20 characters.')\n    .regex(/^[a-z0-9_.]+$/, 'Username can only contain lowercase letters, numbers, underscores, and periods.'),\n});\n\ntype UsernameFormValues = z.infer<typeof formSchema>;\n\nexport default function WelcomePage() {\n  const router = useRouter();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<UsernameFormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      username: '',\n    },\n  });\n\n  const onSubmit = async (values: UsernameFormValues) => {\n    setIsLoading(true);\n    try {\n      const result = await setUsername(values.username);\n      if (result.success) {\n        toast({\n          title: 'Welcome!',\n          description: 'Your username has been set.',\n        });\n        // Force a session refresh by reloading\n        router.push('/read'); \n        router.refresh();\n      } else {\n        throw new Error(result.message || 'Failed to set username.');\n      }\n    } catch (error) {\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: error instanceof Error ? error.message : 'An unexpected error occurred.',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <main className=\"flex items-center justify-center min-h-screen bg-background p-4\">\n      <Card className=\"w-full max-w-md shadow-2xl\">\n        <CardHeader>\n          <CardTitle>Welcome to Readify</CardTitle>\n          <CardDescription>\n            Please choose a unique username to continue. This cannot be changed later.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Username</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"your.username\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"pt-2\">\n                <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                  {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                  Save and Continue\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </main>\n  );\n}\n","size_bytes":3376},"src/components/emails/admin-reply-email.tsx":{"content":"\nimport {\n    Body,\n    Container,\n    Head,\n    Heading,\n    Html,\n    Preview,\n    Text,\n    Hr,\n    Section\n  } from '@react-email/components';\n  import * as React from 'react';\n  \n  interface AdminReplyEmailProps {\n    originalMessage: string;\n    replyMessage: string;\n  }\n  \n  export const AdminReplyEmail = ({ originalMessage, replyMessage }: AdminReplyEmailProps) => (\n    <Html>\n      <Head />\n      <Preview>Re: Your Inquiry to Readify</Preview>\n      <Body style={main}>\n        <Container style={container}>\n          <Heading style={h1}>A reply from the Readify Team</Heading>\n          \n          <Section style={replySection}>\n             <Text style={{ ...text, whiteSpace: 'pre-wrap' }}>{replyMessage}</Text>\n          </Section>\n  \n          <Hr style={hr} />\n  \n          <Text style={textMuted}>\n            In response to your message:\n          </Text>\n          <Text style={originalMessageStyles}>\n            \"{originalMessage}\"\n          </Text>\n  \n        </Container>\n      </Body>\n    </Html>\n  );\n  \n  export default AdminReplyEmail;\n  \n  const main = {\n    backgroundColor: '#f6f9fc',\n    padding: '10px 0',\n    fontFamily: \"-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif\",\n  };\n  \n  const container = {\n    backgroundColor: '#ffffff',\n    border: '1px solid #f0f0f0',\n    padding: '45px',\n  };\n  \n  const h1 = {\n    color: '#3F51B5',\n    fontSize: '24px',\n    fontWeight: 'bold',\n    margin: '0 0 30px 0',\n  };\n  \n  const text = {\n    color: '#444',\n    fontSize: '16px',\n    lineHeight: '24px',\n  };\n\n  const textMuted = {\n      ...text,\n      color: '#888',\n      fontSize: '14px',\n  }\n\n  const replySection = {\n      marginBottom: '30px',\n  }\n  \n  const hr = {\n      borderColor: '#e6ebf1',\n      margin: '20px 0',\n  };\n\n  const originalMessageStyles = {\n      ...text,\n      fontStyle: 'italic',\n      color: '#666',\n      borderLeft: '4px solid #e6ebf1',\n      paddingLeft: '15px',\n  }\n","size_bytes":2023},"src/components/emails/contact-form-email.tsx":{"content":"\nimport {\n  Body,\n  Container,\n  Head,\n  Heading,\n  Html,\n  Preview,\n  Text,\n  Hr,\n  Button,\n  Section,\n} from '@react-email/components';\nimport * as React from 'react';\n\ninterface ContactFormEmailProps {\n  name: string;\n  email: string;\n  message: string;\n  approveUrl: string;\n  rejectUrl: string;\n}\n\nexport const ContactFormEmail = ({ name, email, message, approveUrl, rejectUrl }: ContactFormEmailProps) => (\n  <Html>\n    <Head />\n    <Preview>New Access Request from {name}</Preview>\n    <Body style={main}>\n      <Container style={container}>\n        <Heading style={h1}>New Access Request for Readify</Heading>\n        <Text style={text}>\n          You have received a new request for access from the Readify website.\n        </Text>\n        <Hr style={hr} />\n        <Text style={text}>\n          <strong>From:</strong> {name}\n        </Text>\n        <Text style={text}>\n          <strong>Email:</strong> <a href={`mailto:${email}`} style={link}>{email}</a>\n        </Text>\n        <Hr style={hr} />\n        <Heading as=\"h2\" style={h2}>Reason for Request:</Heading>\n        <Text style={{ ...text, whiteSpace: 'pre-wrap', border: '1px solid #eee', padding: '10px' }}>\n          {message}\n        </Text>\n\n        <Section style={{ textAlign: 'center', marginTop: '30px' }}>\n           <Text style={text}>\n             Quick Actions:\n           </Text>\n           <Button style={buttonPrimary} href={approveUrl}>\n             Approve & Add User\n           </Button>\n           <Button style={buttonSecondary} href={rejectUrl}>\n             Reject Request\n           </Button>\n        </Section>\n\n      </Container>\n    </Body>\n  </Html>\n);\n\nexport default ContactFormEmail;\n\nconst main = {\n  backgroundColor: '#f6f9fc',\n  padding: '10px 0',\n  fontFamily:\n    \"-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif\",\n};\n\nconst container = {\n  backgroundColor: '#ffffff',\n  border: '1px solid #f0f0f0',\n  padding: '45px',\n};\n\nconst h1 = {\n  color: '#3F51B5',\n  fontSize: '24px',\n  fontWeight: 'bold',\n  margin: '0 0 30px 0',\n  padding: '0',\n};\n\nconst h2 = {\n    color: '#333',\n    fontSize: '20px',\n    fontWeight: 'bold',\n    margin: '30px 0 15px 0',\n    padding: '0',\n}\n\nconst text = {\n  color: '#444',\n  fontSize: '16px',\n  lineHeight: '24px',\n};\n\nconst hr = {\n    borderColor: '#e6ebf1',\n    margin: '20px 0',\n};\n\nconst link = {\n    color: '#3F51B5',\n    textDecoration: 'underline',\n}\n\nconst button = {\n    borderRadius: '5px',\n    fontSize: '16px',\n    fontWeight: 'bold',\n    textDecoration: 'none',\n    textAlign: 'center' as const,\n    display: 'inline-block',\n    padding: '12px 20px',\n    margin: '0 5px'\n}\n\nconst buttonPrimary = {\n    ...button,\n    backgroundColor: '#3F51B5',\n    color: '#fff',\n}\n\nconst buttonSecondary = {\n    ...button,\n    backgroundColor: '#E8EAF6',\n    color: '#3F51B5',\n}\n","size_bytes":2906},"src/components/emails/general-contact-form-email.tsx":{"content":"\nimport {\n  Body,\n  Container,\n  Head,\n  Heading,\n  Html,\n  Preview,\n  Text,\n  Hr,\n} from '@react-email/components';\nimport * as React from 'react';\n\ninterface GeneralContactFormEmailProps {\n  name: string;\n  email: string;\n  message: string;\n}\n\nexport const GeneralContactFormEmail = ({ name, email, message }: GeneralContactFormEmailProps) => (\n  <Html>\n    <Head />\n    <Preview>New General Inquiry from {name}</Preview>\n    <Body style={main}>\n      <Container style={container}>\n        <Heading style={h1}>New General Inquiry</Heading>\n        <Text style={text}>\n          You have received a new message from the Readify contact form.\n        </Text>\n        <Hr style={hr} />\n        <Text style={text}>\n          <strong>From:</strong> {name}\n        </Text>\n        <Text style={text}>\n          <strong>Email:</strong> <a href={`mailto:${email}`} style={link}>{email}</a>\n        </Text>\n        <Hr style={hr} />\n        <Heading as=\"h2\" style={h2}>Message:</Heading>\n        <Text style={{ ...text, whiteSpace: 'pre-wrap', border: '1px solid #eee', padding: '10px' }}>\n          {message}\n        </Text>\n      </Container>\n    </Body>\n  </Html>\n);\n\nexport default GeneralContactFormEmail;\n\nconst main = {\n  backgroundColor: '#f6f9fc',\n  padding: '10px 0',\n  fontFamily:\n    \"-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif\",\n};\n\nconst container = {\n  backgroundColor: '#ffffff',\n  border: '1px solid #f0f0f0',\n  padding: '45px',\n};\n\nconst h1 = {\n  color: '#3F51B5',\n  fontSize: '24px',\n  fontWeight: 'bold',\n  margin: '0 0 30px 0',\n  padding: '0',\n};\n\nconst h2 = {\n    color: '#333',\n    fontSize: '20px',\n    fontWeight: 'bold',\n    margin: '30px 0 15px 0',\n    padding: '0',\n}\n\nconst text = {\n  color: '#444',\n  fontSize: '16px',\n  lineHeight: '24px',\n};\n\nconst hr = {\n    borderColor: '#e6ebf1',\n    margin: '20px 0',\n};\n\nconst link = {\n    color: '#3F51B5',\n    textDecoration: 'underline',\n}\n","size_bytes":2010},"src/components/emails/rejection-email.tsx":{"content":"\nimport {\n    Body,\n    Container,\n    Head,\n    Heading,\n    Html,\n    Preview,\n    Text,\n  } from '@react-email/components';\n  import * as React from 'react';\n  \n  export const RejectionEmail = () => (\n    <Html>\n      <Head />\n      <Preview>Regarding your Readify access request</Preview>\n      <Body style={main}>\n        <Container style={container}>\n          <Heading style={h1}>Update on Your Readify Access Request</Heading>\n          <Text style={text}>\n            Hello,\n          </Text>\n          <Text style={text}>\n            Thank you for your interest in Readify. After careful consideration, we are unable to grant access to new users at this time. We have a limited number of spots available and our platform is currently at capacity.\n          </Text>\n          <Text style={text}>\n            We appreciate your understanding and have added you to our waitlist. We will notify you as soon as a spot becomes available.\n          </Text>\n          <Text style={text}>\n            Best regards,\n            <br />\n            The Readify Team\n          </Text>\n        </Container>\n      </Body>\n    </Html>\n  );\n  \n  export default RejectionEmail;\n  \n  const main = {\n    backgroundColor: '#f6f9fc',\n    padding: '10px 0',\n  };\n  \n  const container = {\n    backgroundColor: '#ffffff',\n    border: '1px solid #f0f0f0',\n    padding: '45px',\n  };\n  \n  const h1 = {\n    color: '#3F51B5',\n    fontFamily:\n      \"-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif\",\n    fontSize: '24px',\n    fontWeight: 'bold',\n    margin: '40px 0',\n    padding: '0',\n  };\n  \n  const text = {\n    color: '#444',\n    fontFamily:\n      \"-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif\",\n    fontSize: '16px',\n    lineHeight: '24px',\n  };\n  \n","size_bytes":1932},"src/components/emails/welcome-email.tsx":{"content":"\nimport {\n  Body,\n  Button,\n  Container,\n  Head,\n  Heading,\n  Html,\n  Preview,\n  Text,\n} from '@react-email/components';\nimport * as React from 'react';\n\ninterface WelcomeEmailProps {\n  name: string;\n  setupLink: string;\n}\n\nexport const WelcomeEmail = ({ name, setupLink }: WelcomeEmailProps) => (\n  <Html>\n    <Head />\n    <Preview>Welcome to Readify! Let's get your account set up.</Preview>\n    <Body style={main}>\n      <Container style={container}>\n        <Heading style={h1}>Welcome to Readify</Heading>\n        <Text style={text}>\n          Hello {name},\n        </Text>\n        <Text style={text}>\n          An administrator has created an account for you on Readify. To get started, you need to set up your username and password by clicking the link below.\n        </Text>\n        <Button\n          style={button}\n          href={setupLink}\n        >\n          Complete Account Setup\n        </Button>\n        <Text style={text}>\n          If you did not request this email, you can safely ignore it. This setup link will expire in 24 hours.\n        </Text>\n      </Container>\n    </Body>\n  </Html>\n);\n\nexport default WelcomeEmail;\n\nconst main = {\n  backgroundColor: '#f6f9fc',\n  padding: '10px 0',\n};\n\nconst container = {\n  backgroundColor: '#ffffff',\n  border: '1px solid #f0f0f0',\n  padding: '45px',\n};\n\nconst h1 = {\n  color: '#3F51B5',\n  fontFamily:\n    \"-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif\",\n  fontSize: '24px',\n  fontWeight: 'bold',\n  margin: '40px 0',\n  padding: '0',\n};\n\nconst text = {\n  color: '#444',\n  fontFamily:\n    \"-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif\",\n  fontSize: '16px',\n  lineHeight: '24px',\n};\n\nconst button = {\n  backgroundColor: '#3F51B5',\n  borderRadius: '5px',\n  color: '#fff',\n  fontFamily: \"'Inter', sans-serif\",\n  fontSize: '16px',\n  fontWeight: 'bold',\n  textDecoration: 'none',\n  textAlign: 'center' as const,\n  display: 'block',\n  width: '100%',\n  padding: '12px 20px',\n};\n","size_bytes":2132},"src/components/ui/accordion.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1991},"src/components/ui/alert-dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4434},"src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"src/components/ui/calendar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2709},"src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"src/components/ui/carousel.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6224},"src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10479},"src/components/ui/checkbox.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1070},"src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"src/components/ui/dropdown-menu.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7433},"src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"src/components/ui/label.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":724},"src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8505},"src/components/ui/popover.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1244},"src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"src/components/ui/radio-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1481},"src/components/ui/scroll-area.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1656},"src/components/ui/select.tsx":{"content":"\n\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5630},"src/components/ui/separator.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":770},"src/components/ui/sheet.tsx":{"content":"\n\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4282},"src/components/ui/sidebar.tsx":{"content":"\n\"use client\"\n\nimport * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { cva, VariantProps } from \"class-variance-authority\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(\n  ({ className, children, ...props }, ref) => {\n    return (\n      <aside\n        ref={ref}\n        className={cn(\n          \"flex h-full w-72 flex-col border-r bg-sidebar text-sidebar-foreground\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </aside>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2 mt-auto\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1 p-2\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        ghost: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    isActive?: boolean\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    return (\n      <button\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarHeader,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n}\n","size_bytes":4104},"src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"src/components/ui/slider.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1091},"src/components/ui/switch.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1153},"src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"src/components/ui/tabs.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1897},"src/components/ui/textarea.tsx":{"content":"import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n","size_bytes":709},"src/components/ui/toast.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4859},"src/components/ui/toaster.tsx":{"content":"\n\"use client\"\n\nimport { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription className=\"whitespace-pre-wrap\">\n                  {description}\n                </ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":855},"src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1159},"src/ai/flows/speech-generation/amazon-async.ts":{"content":"\n'use server';\n/**\n * @fileOverview Handles asynchronous text-to-speech using Amazon Polly's\n * StartSpeechSynthesisTask, which is designed for long-form audio.\n * It now supports generating both the MP3 audio and the corresponding speech marks JSON file.\n */\n\nimport { pollyClient } from './amazon';\nimport { StartSpeechSynthesisTaskCommand, GetSpeechSynthesisTaskCommand, SpeechMarkType } from '@aws-sdk/client-polly';\n\nconst S3_BUCKET_NAME = process.env.AWS_S3_BUCKET_NAME || '';\nif (!S3_BUCKET_NAME) {\n    console.warn(\"AWS_S3_BUCKET_NAME is not set. Amazon Polly audio generation will fail.\");\n}\n\ntype StartGenerationResponse = {\n    audioTaskId: string;\n    marksTaskId: string;\n};\n\n/**\n * Starts an asynchronous speech synthesis task with Amazon Polly for both audio and speech marks.\n */\nexport async function startAmazonVoiceGeneration(\n  text: string, // Expects raw text for accurate speech marks\n  voiceId: string,\n  speed: number,\n  docId: string,\n  fileName?: string\n): Promise<StartGenerationResponse> {\n  const sanitizedText = text\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;');\n    \n  const ssmlText = `<speak><prosody rate=\"${Math.round(speed * 100)}%\">${sanitizedText}</prosody></speak>`;\n\n  const baseName = fileName ? fileName.replace(/\\.[^/.]+$/, \"\") : docId;\n  const sanitizedBaseName = baseName.replace(/\\s+/g, '_').replace(/[^0-9a-zA-Z!_.\\-]/g, '');\n  \n  // Task for MP3 audio generation\n  const audioCommand = new StartSpeechSynthesisTaskCommand({\n    OutputFormat: 'mp3',\n    OutputS3BucketName: S3_BUCKET_NAME,\n    OutputS3KeyPrefix: `${sanitizedBaseName}.mp3`,\n    Text: ssmlText,\n    TextType: 'ssml',\n    VoiceId: voiceId,\n    Engine: 'neural',\n  });\n\n  // Task for JSON speech marks generation\n  const marksCommand = new StartSpeechSynthesisTaskCommand({\n      OutputFormat: 'json',\n      OutputS3BucketName: S3_BUCKET_NAME,\n      OutputS3KeyPrefix: `${sanitizedBaseName}.json`,\n      SpeechMarkTypes: [SpeechMarkType.WORD, SpeechMarkType.SENTENCE],\n      Text: ssmlText,\n      TextType: 'ssml',\n      VoiceId: voiceId,\n      Engine: 'neural',\n  });\n\n  const [audioResponse, marksResponse] = await Promise.all([\n      pollyClient.send(audioCommand),\n      pollyClient.send(marksCommand)\n  ]);\n  \n  const audioTaskId = audioResponse.SynthesisTask?.TaskId;\n  const marksTaskId = marksResponse.SynthesisTask?.TaskId;\n\n  if (!audioTaskId || !marksTaskId) {\n    throw new Error('Failed to start one or both Amazon Polly synthesis tasks.');\n  }\n  \n  return { audioTaskId, marksTaskId };\n}\n\ntype CheckTaskResponse = {\n    status: 'completed' | 'inProgress' | 'failed';\n    outputUrl?: string | null;\n};\n\n/**\n * Checks the status of a single speech synthesis task.\n */\nexport async function checkAmazonVoiceGeneration(\n    taskId: string\n): Promise<CheckTaskResponse> {\n    \n    const command = new GetSpeechSynthesisTaskCommand({ TaskId: taskId });\n    const response = await pollyClient.send(command);\n    const task = response.SynthesisTask;\n\n    switch (task?.TaskStatus) {\n        case 'completed':\n            return { status: 'completed', outputUrl: task.OutputUri };\n        case 'inProgress':\n        case 'scheduled':\n            return { status: 'inProgress' };\n        case 'failed':\n            console.error('Amazon Polly task failed:', task.TaskStatusReason);\n            throw new Error(`Speech synthesis failed: ${task.TaskStatusReason}`);\n        default:\n            return { status: 'inProgress' }; // Assume it's still processing\n    }\n}\n","size_bytes":3519},"src/ai/flows/speech-generation/amazon-sync.ts":{"content":"\n'use server';\n/**\n * @fileOverview Handles synchronous, short-form text-to-speech using Amazon Polly.\n * This is used for on-the-fly audio generation (e.g., chat responses) that\n * does not need to be saved to S3.\n */\n\nimport { pollyClient, amazonVoices } from './amazon';\nimport { SynthesizeSpeechCommand } from '@aws-sdk/client-polly';\n\n// Function to split text into chunks without breaking sentences.\n// Polly's SynthesizeSpeech has a 3000 character limit for plain text. We'll use 2800 to be safe.\nfunction splitText(text: string, maxLength: number = 2800): string[] {\n    const chunks: string[] = [];\n    let remainingText = text;\n\n    while (remainingText.length > 0) {\n        if (remainingText.length <= maxLength) {\n            chunks.push(remainingText);\n            break;\n        }\n\n        let chunk = remainingText.substring(0, maxLength);\n        let lastSentenceEnd = -1;\n\n        const sentenceEnders = ['.', '?', '!', '\\n'];\n        for (const p of sentenceEnders) {\n            const pos = chunk.lastIndexOf(p);\n            if (pos > -1 && (remainingText[pos + 1] === ' ' || remainingText[pos + 1] === '\\n' || pos === chunk.length - 1)) {\n                lastSentenceEnd = Math.max(lastSentenceEnd, pos);\n            }\n        }\n        \n        let splitIndex;\n        if (lastSentenceEnd !== -1) {\n            splitIndex = lastSentenceEnd + 1;\n        } else {\n            const lastSpace = chunk.lastIndexOf(' ');\n            splitIndex = lastSpace !== -1 ? lastSpace : maxLength;\n        }\n        \n        chunk = remainingText.substring(0, splitIndex);\n        chunks.push(chunk);\n        remainingText = remainingText.substring(chunk.length);\n    }\n    return chunks.filter(chunk => chunk.trim().length > 0);\n}\n\n/**\n * Generates speech synchronously using Amazon Polly and returns an array of data URIs.\n */\nexport async function generateAmazonVoiceSync(\n  text: string,\n  voiceId: string,\n  speed: number\n): Promise<string[]> {\n  const voiceConfig = amazonVoices.find(v => v.Id === voiceId);\n  if (!voiceConfig) throw new Error(`Amazon voice not found: ${voiceId}`);\n\n  // Sanitize and wrap text in SSML for speed control\n  const sanitizedText = text\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;');\n  const ssmlText = `<speak><prosody rate=\"${Math.round(speed * 100)}%\">${sanitizedText}</prosody></speak>`;\n  \n  // SynthesizeSpeech has character limits, so we chunk the input.\n  const textChunks = splitText(ssmlText);\n\n  const audioGenerationPromises = textChunks.map(async (chunk) => {\n    const command = new SynthesizeSpeechCommand({\n      OutputFormat: 'mp3',\n      Text: chunk,\n      TextType: 'ssml',\n      VoiceId: voiceId,\n      Engine: voiceConfig.SupportedEngines?.includes('neural') ? 'neural' : 'standard',\n    });\n\n    const response = await pollyClient.send(command);\n    if (!response.AudioStream) {\n      throw new Error('No audio stream returned from Amazon Polly.');\n    }\n\n    const audioBytes = await response.AudioStream.transformToByteArray();\n    return `data:audio/mp3;base64,${Buffer.from(audioBytes).toString('base64')}`;\n  });\n\n  return Promise.all(audioGenerationPromises);\n}\n","size_bytes":3169},"src/ai/flows/speech-generation/amazon.ts":{"content":"\nimport { PollyClient, _Record } from '@aws-sdk/client-polly';\nimport { S3Client } from '@aws-sdk/client-s3';\n\n// Ensure AWS credentials are configured in environment variables\nconst awsConfig = {\n    region: process.env.AWS_REGION,\n    credentials: {\n        accessKeyId: process.env.AWS_ACCESS_KEY_ID!,\n        secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY!,\n    },\n};\n\nif (!awsConfig.region || !awsConfig.credentials.accessKeyId || !awsConfig.credentials.secretAccessKey) {\n    console.warn(\"AWS credentials or region are not fully configured in environment variables. Amazon Polly features may not work.\");\n}\n\nexport const pollyClient = new PollyClient(awsConfig);\nexport const s3Client = new S3Client(awsConfig);\n\n// This is a subset of voices. You can expand this list as needed.\n// To get all voices, you would typically call the DescribeVoicesCommand.\nexport const amazonVoices: _Record[] = [\n    // US English\n    { Id: 'Matthew', Gender: 'Male', LanguageCode: 'en-US', LanguageName: 'US English', Name: 'Matthew', SupportedEngines: ['neural', 'standard'] },\n    { Id: 'Joanna', Gender: 'Female', LanguageCode: 'en-US', LanguageName: 'US English', Name: 'Joanna', SupportedEngines: ['neural', 'standard'] },\n    { Id: 'Ivy', Gender: 'Female', LanguageCode: 'en-US', LanguageName: 'US English', Name: 'Ivy', SupportedEngines: ['neural', 'standard'] },\n    { Id: 'Justin', Gender: 'Male', LanguageCode: 'en-US', LanguageName: 'US English', Name: 'Justin', SupportedEngines: ['neural', 'standard'] },\n    { Id: 'Kendra', Gender: 'Female', LanguageCode: 'en-US', LanguageName: 'US English', Name: 'Kendra', SupportedEngines: ['neural', 'standard'] },\n    { Id: 'Kimberly', Gender: 'Female', LanguageCode: 'en-US', LanguageName: 'US English', Name: 'Kimberly', SupportedEngines: ['neural', 'standard'] },\n    { Id: 'Salli', Gender: 'Female', LanguageCode: 'en-US', LanguageName: 'US English', Name: 'Salli', SupportedEngines: ['neural', 'standard'] },\n    { Id: 'Joey', Gender: 'Male', LanguageCode: 'en-US', LanguageName: 'US English', Name: 'Joey', SupportedEngines: ['neural', 'standard'] },\n    // British English\n    { Id: 'Brian', Gender: 'Male', LanguageCode: 'en-GB', LanguageName: 'British English', Name: 'Brian', SupportedEngines: ['neural', 'standard'] },\n    { Id: 'Amy', Gender: 'Female', LanguageCode: 'en-GB', LanguageName: 'British English', Name: 'Amy', SupportedEngines: ['neural', 'standard'] },\n    { Id: 'Emma', Gender: 'Female', LanguageCode: 'en-GB', LanguageName: 'British English', Name: 'Emma', SupportedEngines: ['neural', 'standard'] },\n    // Australian English\n    { Id: 'Russell', Gender: 'Male', LanguageCode: 'en-AU', LanguageName: 'Australian English', Name: 'Russell', SupportedEngines: ['standard'] },\n    { Id: 'Nicole', Gender: 'Female', LanguageCode: 'en-AU', LanguageName: 'Australian English', Name: 'Nicole', SupportedEngines: ['neural', 'standard'] },\n];\n","size_bytes":2908},"src/ai/flows/speech-generation/lemonfox.ts":{"content":"'use server';\n\n// Function to split text into chunks without breaking sentences\nfunction splitText(text: string, maxLength: number): string[] {\n    const chunks: string[] = [];\n    let remainingText = text;\n\n    while (remainingText.length > 0) {\n        if (remainingText.length <= maxLength) {\n            chunks.push(remainingText);\n            break;\n        }\n\n        let chunk = remainingText.substring(0, maxLength);\n        let lastSentenceEnd = -1;\n\n        // Prioritize splitting at sentence-ending punctuation.\n        const sentenceEnders = ['.', '?', '!', '\\n'];\n        for (const p of sentenceEnders) {\n            const pos = chunk.lastIndexOf(p);\n            // Ensure the punctuation is not part of a larger structure like \"e.g.\"\n            if (pos > -1 && (remainingText[pos + 1] === ' ' || remainingText[pos + 1] === '\\n' || pos === chunk.length - 1)) {\n                lastSentenceEnd = Math.max(lastSentenceEnd, pos);\n            }\n        }\n\n        // If a sentence end is found, split there. Otherwise, split at the last space to avoid breaking words.\n        let splitIndex;\n        if (lastSentenceEnd !== -1) {\n            splitIndex = lastSentenceEnd + 1;\n        } else {\n            const lastSpace = chunk.lastIndexOf(' ');\n            splitIndex = lastSpace !== -1 ? lastSpace : maxLength; // Fallback to hard split if no space\n        }\n        \n        chunk = remainingText.substring(0, splitIndex);\n        chunks.push(chunk);\n        remainingText = remainingText.substring(chunk.length);\n    }\n\n    return chunks.filter(chunk => chunk.trim().length > 0);\n}\n\nexport async function generateLemonfoxVoice(formattedText: string, voice: string, speed: number) {\n    const apiKey = process.env.LEMONFOX_API_KEY;\n    if (!apiKey) {\n        throw new Error('Lemonfox API key is not configured. Please set the LEMONFOX_API_KEY environment variable.');\n    }\n\n    // Using a safe character limit, similar to other providers.\n    const textChunks = splitText(formattedText, 4000);\n    console.log(`Generated ${textChunks.length} text chunks for Lemonfox.`);\n\n    const audioGenerationPromises = textChunks.map(async (chunk) => {\n        const response = await fetch(\"https://api.lemonfox.ai/v1/audio/speech\", {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": `Bearer ${apiKey}`,\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                input: chunk,\n                voice: voice,\n                speed: speed,\n                response_format: \"mp3\"\n            })\n        });\n\n        if (!response.ok) {\n            const errorBody = await response.text();\n            throw new Error(`Lemonfox API request failed with status ${response.status}: ${errorBody}`);\n        }\n        \n        const audioBuffer = await response.arrayBuffer();\n        return `data:audio/mp3;base64,${Buffer.from(audioBuffer).toString('base64')}`;\n    });\n\n    return Promise.all(audioGenerationPromises);\n}","size_bytes":3014},"src/ai/flows/speech-generation/openai.ts":{"content":"\n'use server';\n\nimport { ai } from '@/ai/genkit';\n\n// Function to split text into chunks without breaking sentences\nfunction splitText(text: string, maxLength: number): string[] {\n    const chunks: string[] = [];\n    let remainingText = text;\n\n    while (remainingText.length > 0) {\n        if (remainingText.length <= maxLength) {\n            chunks.push(remainingText);\n            break;\n        }\n\n        let chunk = remainingText.substring(0, maxLength);\n        let lastSentenceEnd = -1;\n\n        // Prioritize splitting at sentence-ending punctuation.\n        const sentenceEnders = ['.', '?', '!', '\\n'];\n        for (const p of sentenceEnders) {\n            const pos = chunk.lastIndexOf(p);\n            // Ensure the punctuation is not part of a larger structure like \"e.g.\"\n            if (pos > -1 && (remainingText[pos + 1] === ' ' || remainingText[pos + 1] === '\\n' || pos === chunk.length - 1)) {\n                lastSentenceEnd = Math.max(lastSentenceEnd, pos);\n            }\n        }\n\n        // If a sentence end is found, split there. Otherwise, split at the last space to avoid breaking words.\n        let splitIndex;\n        if (lastSentenceEnd !== -1) {\n            splitIndex = lastSentenceEnd + 1;\n        } else {\n            const lastSpace = chunk.lastIndexOf(' ');\n            splitIndex = lastSpace !== -1 ? lastSpace : maxLength; // Fallback to hard split if no space\n        }\n        \n        chunk = remainingText.substring(0, splitIndex);\n        chunks.push(chunk);\n        remainingText = remainingText.substring(chunk.length);\n    }\n\n    return chunks.filter(chunk => chunk.trim().length > 0);\n}\n\nexport async function generateOpenAIVoice(formattedText: string, voice: string, speed: number) {\n    // OpenAI has a 4096 character limit per request.\n    const textChunks = splitText(formattedText, 4000);\n    console.log(`Generated ${textChunks.length} text chunks for OpenAI.`);\n\n    const audioGenerationPromises = textChunks.map(async (chunk) => {\n        const { media } = await ai.generate({\n            model: 'openai/tts-1',\n            prompt: chunk,\n            config: { voice: voice as any, speed },\n            output: { format: 'url' }\n        });\n        if (!media?.url) throw new Error('OpenAI failed to return audio.');\n        \n        const audioResponse = await fetch(media.url);\n        if (!audioResponse.ok) throw new Error('Failed to fetch audio from OpenAI URL.');\n        const audioBuffer = await audioResponse.arrayBuffer();\n        return `data:audio/mp3;base64,${Buffer.from(audioBuffer).toString('base64')}`;\n    });\n    return Promise.all(audioGenerationPromises);\n}\n","size_bytes":2636},"src/ai/flows/speech-generation/vibevoice.ts":{"content":"\n'use server';\n\nimport { Client } from \"@gradio/client\";\n\n/**\n * Generates speech using the VibeVoice Gradio API and returns an array of data URIs.\n * This function specifically handles single-speaker generation.\n */\nexport async function generateVibeVoiceSpeech(\n  text: string,\n  voice: string,\n  speed: number // Note: VibeVoice API doesn't seem to have a speed/rate param, so this is unused.\n): Promise<string[]> {\n  try {\n    const client = await Client.connect(\"NeuralFalcon/VibeVoice-Colab\");\n    const result = await client.predict(\"/generate_podcast_with_timestamps\", { \t\t\n            num_speakers: 1, \t\t\n            script: text, \t\t\n            speaker_1: voice,\n    });\n\n    // The result.data is an array. Based on the docs, the audio file is one of the elements.\n    // We need to find the one that corresponds to the audio output.\n    const audioOutput = result.data?.find((d: any) => d && typeof d === 'object' && d.url);\n\n    if (!audioOutput || !audioOutput.url) {\n        throw new Error('No audio URL returned from VibeVoice API.');\n    }\n\n    // The URL from Gradio is temporary. We must fetch it and convert it to a data URI.\n    const audioResponse = await fetch(audioOutput.url);\n    if (!audioResponse.ok) {\n        throw new Error(`Failed to fetch audio from VibeVoice URL: ${audioResponse.statusText}`);\n    }\n    \n    const audioBuffer = await audioResponse.arrayBuffer();\n    const base64Audio = Buffer.from(audioBuffer).toString('base64');\n    \n    // The downloaded file is a .wav file.\n    return [`data:audio/wav;base64,${base64Audio}`];\n\n  } catch (error) {\n      console.error(\"Error calling VibeVoice API:\", error);\n      const message = error instanceof Error ? error.message : \"An unknown error occurred.\";\n      throw new Error(`VibeVoice API failed: ${message}`);\n  }\n}\n","size_bytes":1809},"src/app/api/reject-request/route.ts":{"content":"\nimport { kv } from '@vercel/kv';\nimport { NextRequest, NextResponse } from 'next/server';\nimport { sendRejectionEmail } from '@/lib/email';\nimport { updateSubmissionStatus } from '@/lib/admin-actions';\nimport type { Submission } from '@/lib/db';\n\nexport async function GET(request: NextRequest) {\n  const { searchParams } = new URL(request.url);\n  const token = searchParams.get('token');\n\n  if (!token) {\n    return new NextResponse('<h1>Invalid Request</h1><p>Missing token.</p>', {\n      status: 400,\n      headers: { 'Content-Type': 'text/html' },\n    });\n  }\n\n  try {\n    const tokenKey = `readify:rejection-token:${token}`;\n    const submissionId: string | null = await kv.get(tokenKey);\n\n    if (!submissionId) {\n      return new NextResponse('<h1>Invalid or Expired Link</h1><p>This rejection link is either invalid or has expired.</p>', {\n        status: 400,\n        headers: { 'Content-Type': 'text/html' },\n      });\n    }\n    \n    const submission: Submission | null = await kv.get(`readify:submission:${submissionId}`);\n    if(!submission) {\n        return new NextResponse('<h1>Invalid Submission</h1><p>The submission associated with this link could not be found.</p>', {\n          status: 404,\n          headers: { 'Content-Type': 'text/html' },\n        });\n    }\n    \n    if (submission.status !== 'Pending') {\n         return new NextResponse(`<h1>Request Already Actioned</h1><p>This access request has already been ${submission.status.toLowerCase()}. No further action is needed.</p>`, {\n          status: 200,\n          headers: { 'Content-Type': 'text/html' },\n        });\n    }\n\n\n    // Send the rejection email\n    await sendRejectionEmail(submission.email);\n\n    // Update submission status to 'Rejected'\n    await updateSubmissionStatus(submissionId, 'Rejected');\n\n    // Invalidate the token by deleting it\n    await kv.del(tokenKey);\n\n    return new NextResponse('<h1>Request Rejected</h1><p>The access request has been successfully rejected. An email has been sent to the user.</p>', {\n      status: 200,\n      headers: { 'Content-Type': 'text/html' },\n    });\n\n  } catch (error) {\n    console.error('Error processing rejection:', error);\n    return new NextResponse('<h1>Server Error</h1><p>An unexpected error occurred while processing your request.</p>', {\n      status: 500,\n      headers: { 'Content-Type': 'text/html' },\n    });\n  }\n}\n","size_bytes":2372},"src/app/api/upload/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { put } from '@vercel/blob';\nimport { getSession } from '@/lib/session';\nimport { randomUUID } from 'crypto';\n\nexport async function POST(request: NextRequest) {\n  const session = await getSession();\n  // Allow uploads even if username is not set yet (e.g., during initial document processing)\n  if (!session?.userId) {\n    return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });\n  }\n\n  const originalFilename = request.headers.get('x-vercel-filename');\n  if (!originalFilename) {\n    return NextResponse.json(\n      { message: 'Filename is missing' },\n      { status: 400 }\n    );\n  }\n  \n  if (!request.body) {\n    return NextResponse.json(\n      { message: 'Request body is missing' },\n      { status: 400 }\n    );\n  }\n  \n  // Use a unique identifier for the user folder, which is the userId.\n  const userIdentifier = session.userId;\n  const docId = request.headers.get('x-doc-id') || randomUUID();\n  const blobName = `readify/${userIdentifier}/${docId}-${originalFilename}`;\n\n  try {\n    const blob = await put(blobName, request.body, {\n      access: 'public',\n      addRandomSuffix: false,\n    });\n\n    return NextResponse.json(blob);\n\n  } catch (error) {\n    console.error('Error uploading file:', error);\n    return NextResponse.json(\n      { message: 'Error uploading file' },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":1399},"src/app/setup-account/[token]/page.tsx":{"content":"\n'use client';\n\nimport { useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { useToast } from '@/hooks/use-toast';\nimport { setupAccount } from '@/lib/actions';\nimport { Loader2 } from 'lucide-react';\n\nconst formSchema = z.object({\n  username: z.string()\n    .min(3, 'Username must be at least 3 characters.')\n    .max(20, 'Username cannot be longer than 20 characters.')\n    .regex(/^[a-z0-9_.]+$/, 'Username can only contain lowercase letters, numbers, underscores, and periods.'),\n  password: z.string().min(8, 'New password must be at least 8 characters.'),\n});\n\ntype SetupFormValues = z.infer<typeof formSchema>;\n\ninterface SetupAccountPageProps {\n  params: {\n    token:string;\n  };\n  searchParams?: { [key: string]: string | string[] | undefined };\n}\n\nexport default function SetupAccountPage({ params }: SetupAccountPageProps) {\n  const router = useRouter();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<SetupFormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      username: '',\n      password: '',\n    },\n  });\n\n  const onSubmit = async (values: SetupFormValues) => {\n    setIsLoading(true);\n    try {\n      const result = await setupAccount({ ...values, token: params.token });\n      if (result.success) {\n        toast({\n          title: 'Account Setup Complete!',\n          description: 'You can now log in with your new credentials.',\n        });\n        router.push('/read');\n        router.refresh();\n      } else {\n        throw new Error(result.message || 'Failed to set up account.');\n      }\n    } catch (error) {\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: error instanceof Error ? error.message : 'An unexpected error occurred.',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <main className=\"flex items-center justify-center min-h-screen bg-background p-4\">\n      <Card className=\"w-full max-w-md shadow-2xl\">\n        <CardHeader>\n          <CardTitle>Set Up Your Readify Account</CardTitle>\n          <CardDescription>\n            Choose a unique username and a secure password to complete your registration.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Username</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"your.username\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <Input type=\"password\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"pt-2\">\n                <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                  {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                  Complete Setup\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </main>\n  );\n}\n","size_bytes":4107},"src/app/api/admin/impersonate/route.ts":{"content":"\nimport { NextRequest, NextResponse } from 'next/server';\nimport { getSession, createSession } from '@/lib/session';\nimport { kv } from '@vercel/kv';\nimport type { User } from '@/lib/db';\n\nexport async function POST(req: NextRequest) {\n  const adminSession = await getSession();\n\n  // 1. Check if the current user is an admin\n  if (!adminSession?.isAdmin) {\n    return NextResponse.json({ message: 'Unauthorized' }, { status: 403 });\n  }\n\n  const { userId } = await req.json();\n\n  if (!userId) {\n    return NextResponse.json({ message: 'User ID is required' }, { status: 400 });\n  }\n\n  // 2. Find the user to impersonate\n  const userToImpersonate: User | null = await kv.get(`readify:user:id:${userId}`);\n\n  if (!userToImpersonate) {\n    return NextResponse.json({ message: 'User not found' }, { status: 404 });\n  }\n  \n  if (userToImpersonate.isAdmin) {\n      return NextResponse.json({ message: 'Cannot impersonate another admin.' }, { status: 403 });\n  }\n\n  // 3. Store the original admin's ID\n  const adminId = adminSession.userId;\n  const response = NextResponse.json({ success: true });\n  response.cookies.set('impersonator_id', adminId, {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    sameSite: 'strict',\n    path: '/',\n  });\n\n  // 4. Create a new session for the impersonated user\n  // This will overwrite the current 'session' cookie\n  await createSession(userToImpersonate.id, userToImpersonate.isAdmin, userToImpersonate.username, response.cookies);\n  \n  return response;\n}\n","size_bytes":1513},"src/app/api/admin/stop-impersonating/route.ts":{"content":"\nimport { NextRequest, NextResponse } from 'next/server';\nimport { createSession } from '@/lib/session';\nimport { kv } from '@vercel/kv';\nimport type { User } from '@/lib/db';\nimport { cookies } from 'next/headers';\n\nexport async function POST(req: NextRequest) {\n  const cookieStore = cookies();\n  const impersonatorId = cookieStore.get('impersonator_id')?.value;\n\n  if (!impersonatorId) {\n    return NextResponse.json({ message: 'No active impersonation session found' }, { status: 400 });\n  }\n\n  // Find the original admin user\n  const adminUser: User | null = await kv.get(`readify:user:id:${impersonatorId}`);\n\n  if (!adminUser || !adminUser.isAdmin) {\n    // Clear cookies just in case, and redirect to login\n    const response = NextResponse.redirect(new URL('/login', req.nextUrl));\n    response.cookies.delete('session');\n    response.cookies.delete('impersonator_id');\n    return response;\n  }\n  \n  // Create a new response so we can set cookies\n  const response = NextResponse.json({ success: true });\n\n  // Restore the admin's session\n  await createSession(adminUser.id, adminUser.isAdmin, adminUser.username, response.cookies);\n\n  // Clear the impersonator cookie\n  response.cookies.delete('impersonator_id');\n  \n  return response;\n}\n","size_bytes":1247},"src/app/api/auth/login/route.ts":{"content":"\n'use server';\n\nimport { kv } from '@vercel/kv';\nimport { NextRequest, NextResponse } from 'next/server';\nimport bcrypt from 'bcrypt';\nimport { createSession } from '@/lib/session';\nimport type { User } from '@/lib/db';\n\nexport async function POST(req: NextRequest) {\n  try {\n    const { email, password } = await req.json();\n\n    // Use the new namespaced key\n    const user: User | null = await kv.get(`readify:user:email:${email}`);\n\n    if (!user) {\n      console.log(`Login attempt failed: User not found for email ${email}`);\n      return NextResponse.json({ message: 'Invalid credentials' }, { status: 401 });\n    }\n\n    // if user has not completed setup, they should not be able to log in with an empty password\n    if (!user.password) {\n      console.log(`Login attempt failed: Account not set up for email ${email}`);\n      return NextResponse.json({ message: 'Account setup not complete. Please check your invitation email.' }, { status: 401 });\n    }\n\n    const passwordsMatch = await bcrypt.compare(password, user.password);\n\n    if (!passwordsMatch) {\n      console.log(`Login attempt failed: Password mismatch for email ${email}`);\n      return NextResponse.json({ message: 'Invalid credentials' }, { status: 401 });\n    }\n\n    await createSession(user.id, user.isAdmin, user.username);\n    \n    let redirectUrl = user.isAdmin ? '/admin' : '/read';\n    // If user has not set a username, redirect to the welcome page first\n    if (!user.username) {\n        redirectUrl = '/welcome';\n    }\n\n    console.log(`Login successful for ${email}, redirecting to ${redirectUrl}`);\n    return NextResponse.json({ success: true, redirectUrl });\n\n  } catch (error) {\n    console.error('Login API Error:', error);\n    const errorMessage = error instanceof Error ? error.message : 'An unexpected error occurred';\n    return NextResponse.json({ message: errorMessage }, { status: 500 });\n  }\n}\n","size_bytes":1894},"src/app/api/auth/logout/route.ts":{"content":"import { deleteSession } from '@/lib/session';\nimport { NextResponse } from 'next/server';\n\nexport async function POST() {\n  await deleteSession();\n  return NextResponse.json({ success: true }, { status: 200 });\n}\n","size_bytes":214}},"version":1}